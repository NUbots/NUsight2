/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "Matrix.proto";
import "Neutron.proto";
import "Vector.proto";

message Sensors {

    message Servo {
        uint32 errorFlags      = 1;
        uint32 id              = 2;
        bool   enabled         = 3;
        float  pGain           = 4;
        float  iGain           = 5;
        float  dGain           = 6;
        float  goalPosition    = 7;
        float  goalVelocity    = 8;
        float  presentPosition = 9;
        float  presentVelocity = 10;
        float  load            = 11;
        float  voltage         = 12;
        float  temperature     = 13;
    }

    message Button {
        uint32 id    = 1;
        bool   value = 2;
    }

    message LED {
        uint32 id     = 1;
        uint32 colour = 2;
    }

    message FSR {
        repeated float value  = 1 [packed=true];
        vec2           centre = 2;
    }

    google.protobuf.Timestamp     timestamp               = 1;
    vec3                          accelerometer           = 2;
    vec3                          gyroscope               = 3;

    /// This is the transform from the odometry (world) space to robot space (=Htw). It measures the world in robot space.
    mat44                         world                   = 4;
    repeated FSR                  fsr                     = 5;
    repeated Servo                servo                   = 6;
    repeated Button               button                  = 7;
    repeated LED                  led                     = 8;
    float                         voltage                 = 9;
    float                         battery                 = 10;
    vec3                          centreOfPressure        = 11;
    mat22                         robotToIMU              = 12;

    /// Percentage of the left foot that's considered "down" i.e. if 3/4 FSR sensors have weight this is 0.75
    bool                          leftFootDown            = 13;
    bool                          rightFootDown           = 14;
    repeated mat44                forwardKinematics       = 15 [(array_size) = 20];
    float                         bodyCentreHeight        = 16;
    vec4                          centreOfMass            = 17;
    mat44                         bodyToGround            = 18;
    mat44                         camToGround             = 19;
}
