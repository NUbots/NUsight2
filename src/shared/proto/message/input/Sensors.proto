/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.input;

import "google/protobuf/timestamp.proto";
import "Matrix.proto";
import "Neutron.proto";
import "Vector.proto";

message Sensors {

    message Servo {
        uint32 error_flags      = 1;
        uint32 id               = 2;
        bool   enabled          = 3;
        float  p_gain           = 4;
        float  i_gain           = 5;
        float  d_gain           = 6;
        float  goal_position    = 7;
        float  goal_velocity    = 8;
        float  present_position = 9;
        float  present_velocity = 10;
        float  load             = 11;
        float  voltage          = 12;
        float  temperature      = 13;
    }

    message Button {
        uint32 id    = 1;
        bool   value = 2;
    }

    message LED {
        uint32 id     = 1;
        uint32 colour = 2;
    }

    message FSR {
        repeated float value  = 1 [packed = true];
        vec2           centre = 2;
    }

    google.protobuf.Timestamp timestamp     = 1;
    vec3                      accelerometer = 2;
    vec3                      gyroscope     = 3;

    /// This is the transform from the odometry (world) space to robot space (=Htw). It measures the world in robot
    /// space.
    mat4     Htw                    = 4;
    repeated FSR fsr                = 5;
    repeated Servo servo            = 6;
    repeated Button button          = 7;
    repeated LED led                = 8;
    float        voltage            = 9;
    float        battery            = 10;
    vec3         centre_of_pressure = 11;
    mat2         robot_to_IMU       = 12;

    /// Percentage of the left foot that's considered "down" i.e. if 3/4 FSR sensors have weight this is 0.75
    bool     left_foot_down          = 13;
    bool     right_foot_down         = 14;
    repeated mat4 forward_kinematics = 15 [(array_size) = 20];
    float         body_centre_height = 16;
    vec4          centre_of_mass     = 17;
    mat4          Hgt                = 18;
    mat4          Hgc                = 19;
}
