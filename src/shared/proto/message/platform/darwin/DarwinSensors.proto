/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUBots <nubots@nubots.net>
 */
syntax = "proto3";

package message.platform.darwin;

import "google/protobuf/timestamp.proto";

/**
 * TODO document
 *
 * @author Trent Houliston
 */
message DarwinSensors {
    // bitmask values
    enum Error {
        OK              = 0;    // not really a flag but the lack of any other flag
        INPUT_VOLTAGE   = 1;
        ANGLE_LIMIT     = 2;
        OVERHEATING     = 4;
        RANGE           = 8;
        CHECKSUM        = 16;
        OVERLOAD        = 32;
        INSTRUCTION     = 64;
        CORRUPT_DATA    = 128;
        TIMEOUT         = 256;
        TIMEOUT_VICTIM  = 512;
    }

    message LEDPanel {
        bool led2 = 1;
        bool led3 = 2;
        bool led4 = 3;
    }

    message HeadLED {
        // Encode as 0x00 0xRR 0xGG 0xBB
        uint32 RGB = 1;
    }

    message EyeLED {
        // Encode as 0x00 0xRR 0xGG 0xBB
        uint32 RGB = 1;
    }

    message Buttons {
        bool left   = 1;
        bool middle = 2;
    }

    message Accelerometer {
        float x = 1;
        float y = 2;
        float z = 3;
    }

    message Gyroscope {
        float x = 1;
        float y = 2;
        float z = 3;
    }

    message FSR {
        float fsr1        = 1;
        float fsr2        = 2;
        float fsr3        = 3;
        float fsr4        = 4;
        float centreX     = 5;
        float centreY     = 6;
        uint32 errorFlags = 7;
    }

    message FSRs {
        FSR left  = 1;
        FSR right = 2;
    }

    message Servo {
        uint32 errorFlags      = 1;
        bool   torqueEnabled   = 2;
        float  pGain           = 3;
        float  iGain           = 4;
        float  dGain           = 5;
        float  goalPosition    = 6;
        float  movingSpeed     = 7;
        float  torque          = 8;
        float  presentPosition = 9;
        float  presentSpeed    = 10;
        float  load            = 11;
        float  voltage         = 12;
        uint32 temperature     = 13;
    };

    message Servos {
        Servo rShoulderPitch = 1;
        Servo lShoulderPitch = 2;
        Servo rShoulderRoll  = 3;
        Servo lShoulderRoll  = 4;
        Servo rElbow         = 5;
        Servo lElbow         = 6;
        Servo rHipYaw        = 7;
        Servo lHipYaw        = 8;
        Servo rHipRoll       = 9;
        Servo lHipRoll       = 10;
        Servo rHipPitch      = 11;
        Servo lHipPitch      = 12;
        Servo rKnee          = 13;
        Servo lKnee          = 14;
        Servo rAnklePitch    = 15;
        Servo lAnklePitch    = 16;
        Servo rAnkleRoll     = 17;
        Servo lAnkleRoll     = 18;
        Servo headPan        = 19;
        Servo headTilt       = 20;
    }

    google.protobuf.Timestamp timestamp       = 1;
    uint32                    cm730ErrorFlags = 2;
    LEDPanel                  ledPanel        = 3;
    HeadLED                   headLED         = 4;
    EyeLED                    eyeLED          = 5;
    Buttons                   buttons         = 6;
    float                     voltage         = 7;
    Accelerometer             accelerometer   = 8;
    Gyroscope                 gyroscope       = 9;
    FSRs                      fsr             = 10;
    Servos                    servo           = 11;
}

// Button press events
message ButtonLeftDown   {}
message ButtonLeftUp     {}
message ButtonMiddleDown {}
message ButtonMiddleUp   {}
