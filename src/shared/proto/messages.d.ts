import * as $protobuf from "protobufjs";

/** Namespace google. */
export namespace google {

    /** Namespace protobuf. */
    namespace protobuf {

        /** Properties of a Duration. */
        interface IDuration {

            /** Duration seconds */
            seconds?: (number|Long|null);

            /** Duration nanos */
            nanos?: (number|null);
        }

        /** Represents a Duration. */
        class Duration implements IDuration {

            /**
             * Constructs a new Duration.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDuration);

            /** Duration seconds. */
            public seconds: (number|Long);

            /** Duration nanos. */
            public nanos: number;

            /**
             * Creates a new Duration instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Duration instance
             */
            public static create(properties?: google.protobuf.IDuration): google.protobuf.Duration;

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @param message Duration message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IDuration, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @param message Duration message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IDuration, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Duration;

            /**
             * Decodes a Duration message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Duration;

            /**
             * Verifies a Duration message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Duration
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Duration;

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @param message Duration
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Duration, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Duration to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Timestamp. */
        interface ITimestamp {

            /** Timestamp seconds */
            seconds?: (number|Long|null);

            /** Timestamp nanos */
            nanos?: (number|null);
        }

        /** Represents a Timestamp. */
        class Timestamp implements ITimestamp {

            /**
             * Constructs a new Timestamp.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ITimestamp);

            /** Timestamp seconds. */
            public seconds: (number|Long);

            /** Timestamp nanos. */
            public nanos: number;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Timestamp instance
             */
            public static create(properties?: google.protobuf.ITimestamp): google.protobuf.Timestamp;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Timestamp;

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Timestamp;

            /**
             * Verifies a Timestamp message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Timestamp
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Timestamp;

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @param message Timestamp
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Timestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Timestamp to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileDescriptorSet. */
        interface IFileDescriptorSet {

            /** FileDescriptorSet file */
            file?: (google.protobuf.IFileDescriptorProto[]|null);
        }

        /** Represents a FileDescriptorSet. */
        class FileDescriptorSet implements IFileDescriptorSet {

            /**
             * Constructs a new FileDescriptorSet.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorSet);

            /** FileDescriptorSet file. */
            public file: google.protobuf.IFileDescriptorProto[];

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileDescriptorSet instance
             */
            public static create(properties?: google.protobuf.IFileDescriptorSet): google.protobuf.FileDescriptorSet;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param message FileDescriptorSet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileDescriptorSet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param message FileDescriptorSet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileDescriptorSet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorSet;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorSet;

            /**
             * Verifies a FileDescriptorSet message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorSet
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorSet;

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @param message FileDescriptorSet
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileDescriptorProto. */
        interface IFileDescriptorProto {

            /** FileDescriptorProto name */
            name?: (string|null);

            /** FileDescriptorProto package */
            "package"?: (string|null);

            /** FileDescriptorProto dependency */
            dependency?: (string[]|null);

            /** FileDescriptorProto publicDependency */
            publicDependency?: (number[]|null);

            /** FileDescriptorProto weakDependency */
            weakDependency?: (number[]|null);

            /** FileDescriptorProto messageType */
            messageType?: (google.protobuf.IDescriptorProto[]|null);

            /** FileDescriptorProto enumType */
            enumType?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** FileDescriptorProto service */
            service?: (google.protobuf.IServiceDescriptorProto[]|null);

            /** FileDescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** FileDescriptorProto options */
            options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto sourceCodeInfo */
            sourceCodeInfo?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax */
            syntax?: (string|null);
        }

        /** Represents a FileDescriptorProto. */
        class FileDescriptorProto implements IFileDescriptorProto {

            /**
             * Constructs a new FileDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorProto);

            /** FileDescriptorProto name. */
            public name: string;

            /** FileDescriptorProto package. */
            public package: string;

            /** FileDescriptorProto dependency. */
            public dependency: string[];

            /** FileDescriptorProto publicDependency. */
            public publicDependency: number[];

            /** FileDescriptorProto weakDependency. */
            public weakDependency: number[];

            /** FileDescriptorProto messageType. */
            public messageType: google.protobuf.IDescriptorProto[];

            /** FileDescriptorProto enumType. */
            public enumType: google.protobuf.IEnumDescriptorProto[];

            /** FileDescriptorProto service. */
            public service: google.protobuf.IServiceDescriptorProto[];

            /** FileDescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** FileDescriptorProto options. */
            public options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto sourceCodeInfo. */
            public sourceCodeInfo?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax. */
            public syntax: string;

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IFileDescriptorProto): google.protobuf.FileDescriptorProto;

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param message FileDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param message FileDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorProto;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorProto;

            /**
             * Verifies a FileDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorProto;

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @param message FileDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DescriptorProto. */
        interface IDescriptorProto {

            /** DescriptorProto name */
            name?: (string|null);

            /** DescriptorProto field */
            field?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto nestedType */
            nestedType?: (google.protobuf.IDescriptorProto[]|null);

            /** DescriptorProto enumType */
            enumType?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** DescriptorProto extensionRange */
            extensionRange?: (google.protobuf.DescriptorProto.IExtensionRange[]|null);

            /** DescriptorProto oneofDecl */
            oneofDecl?: (google.protobuf.IOneofDescriptorProto[]|null);

            /** DescriptorProto options */
            options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reservedRange */
            reservedRange?: (google.protobuf.DescriptorProto.IReservedRange[]|null);

            /** DescriptorProto reservedName */
            reservedName?: (string[]|null);
        }

        /** Represents a DescriptorProto. */
        class DescriptorProto implements IDescriptorProto {

            /**
             * Constructs a new DescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDescriptorProto);

            /** DescriptorProto name. */
            public name: string;

            /** DescriptorProto field. */
            public field: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto nestedType. */
            public nestedType: google.protobuf.IDescriptorProto[];

            /** DescriptorProto enumType. */
            public enumType: google.protobuf.IEnumDescriptorProto[];

            /** DescriptorProto extensionRange. */
            public extensionRange: google.protobuf.DescriptorProto.IExtensionRange[];

            /** DescriptorProto oneofDecl. */
            public oneofDecl: google.protobuf.IOneofDescriptorProto[];

            /** DescriptorProto options. */
            public options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reservedRange. */
            public reservedRange: google.protobuf.DescriptorProto.IReservedRange[];

            /** DescriptorProto reservedName. */
            public reservedName: string[];

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DescriptorProto instance
             */
            public static create(properties?: google.protobuf.IDescriptorProto): google.protobuf.DescriptorProto;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param message DescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param message DescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto;

            /**
             * Verifies a DescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto;

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @param message DescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.DescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace DescriptorProto {

            /** Properties of an ExtensionRange. */
            interface IExtensionRange {

                /** ExtensionRange start */
                start?: (number|null);

                /** ExtensionRange end */
                end?: (number|null);
            }

            /** Represents an ExtensionRange. */
            class ExtensionRange implements IExtensionRange {

                /**
                 * Constructs a new ExtensionRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IExtensionRange);

                /** ExtensionRange start. */
                public start: number;

                /** ExtensionRange end. */
                public end: number;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ExtensionRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.IExtensionRange): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param message ExtensionRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.IExtensionRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param message ExtensionRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.IExtensionRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Verifies an ExtensionRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExtensionRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @param message ExtensionRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ExtensionRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ReservedRange. */
            interface IReservedRange {

                /** ReservedRange start */
                start?: (number|null);

                /** ReservedRange end */
                end?: (number|null);
            }

            /** Represents a ReservedRange. */
            class ReservedRange implements IReservedRange {

                /**
                 * Constructs a new ReservedRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IReservedRange);

                /** ReservedRange start. */
                public start: number;

                /** ReservedRange end. */
                public end: number;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ReservedRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.IReservedRange): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param message ReservedRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.IReservedRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param message ReservedRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.IReservedRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Verifies a ReservedRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReservedRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @param message ReservedRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ReservedRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReservedRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a FieldDescriptorProto. */
        interface IFieldDescriptorProto {

            /** FieldDescriptorProto name */
            name?: (string|null);

            /** FieldDescriptorProto number */
            number?: (number|null);

            /** FieldDescriptorProto label */
            label?: (google.protobuf.FieldDescriptorProto.Label|null);

            /** FieldDescriptorProto type */
            type?: (google.protobuf.FieldDescriptorProto.Type|null);

            /** FieldDescriptorProto typeName */
            typeName?: (string|null);

            /** FieldDescriptorProto extendee */
            extendee?: (string|null);

            /** FieldDescriptorProto defaultValue */
            defaultValue?: (string|null);

            /** FieldDescriptorProto oneofIndex */
            oneofIndex?: (number|null);

            /** FieldDescriptorProto jsonName */
            jsonName?: (string|null);

            /** FieldDescriptorProto options */
            options?: (google.protobuf.IFieldOptions|null);
        }

        /** Represents a FieldDescriptorProto. */
        class FieldDescriptorProto implements IFieldDescriptorProto {

            /**
             * Constructs a new FieldDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldDescriptorProto);

            /** FieldDescriptorProto name. */
            public name: string;

            /** FieldDescriptorProto number. */
            public number: number;

            /** FieldDescriptorProto label. */
            public label: google.protobuf.FieldDescriptorProto.Label;

            /** FieldDescriptorProto type. */
            public type: google.protobuf.FieldDescriptorProto.Type;

            /** FieldDescriptorProto typeName. */
            public typeName: string;

            /** FieldDescriptorProto extendee. */
            public extendee: string;

            /** FieldDescriptorProto defaultValue. */
            public defaultValue: string;

            /** FieldDescriptorProto oneofIndex. */
            public oneofIndex: number;

            /** FieldDescriptorProto jsonName. */
            public jsonName: string;

            /** FieldDescriptorProto options. */
            public options?: (google.protobuf.IFieldOptions|null);

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IFieldDescriptorProto): google.protobuf.FieldDescriptorProto;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param message FieldDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFieldDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param message FieldDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFieldDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldDescriptorProto;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldDescriptorProto;

            /**
             * Verifies a FieldDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldDescriptorProto;

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @param message FieldDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldDescriptorProto {

            /** Type enum. */
            enum Type {
                TYPE_DOUBLE = 1,
                TYPE_FLOAT = 2,
                TYPE_INT64 = 3,
                TYPE_UINT64 = 4,
                TYPE_INT32 = 5,
                TYPE_FIXED64 = 6,
                TYPE_FIXED32 = 7,
                TYPE_BOOL = 8,
                TYPE_STRING = 9,
                TYPE_GROUP = 10,
                TYPE_MESSAGE = 11,
                TYPE_BYTES = 12,
                TYPE_UINT32 = 13,
                TYPE_ENUM = 14,
                TYPE_SFIXED32 = 15,
                TYPE_SFIXED64 = 16,
                TYPE_SINT32 = 17,
                TYPE_SINT64 = 18
            }

            /** Label enum. */
            enum Label {
                LABEL_OPTIONAL = 1,
                LABEL_REQUIRED = 2,
                LABEL_REPEATED = 3
            }
        }

        /** Properties of an OneofDescriptorProto. */
        interface IOneofDescriptorProto {

            /** OneofDescriptorProto name */
            name?: (string|null);

            /** OneofDescriptorProto options */
            options?: (google.protobuf.IOneofOptions|null);
        }

        /** Represents an OneofDescriptorProto. */
        class OneofDescriptorProto implements IOneofDescriptorProto {

            /**
             * Constructs a new OneofDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofDescriptorProto);

            /** OneofDescriptorProto name. */
            public name: string;

            /** OneofDescriptorProto options. */
            public options?: (google.protobuf.IOneofOptions|null);

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns OneofDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IOneofDescriptorProto): google.protobuf.OneofDescriptorProto;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param message OneofDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IOneofDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param message OneofDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IOneofDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofDescriptorProto;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofDescriptorProto;

            /**
             * Verifies an OneofDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofDescriptorProto;

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @param message OneofDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumDescriptorProto. */
        interface IEnumDescriptorProto {

            /** EnumDescriptorProto name */
            name?: (string|null);

            /** EnumDescriptorProto value */
            value?: (google.protobuf.IEnumValueDescriptorProto[]|null);

            /** EnumDescriptorProto options */
            options?: (google.protobuf.IEnumOptions|null);
        }

        /** Represents an EnumDescriptorProto. */
        class EnumDescriptorProto implements IEnumDescriptorProto {

            /**
             * Constructs a new EnumDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumDescriptorProto);

            /** EnumDescriptorProto name. */
            public name: string;

            /** EnumDescriptorProto value. */
            public value: google.protobuf.IEnumValueDescriptorProto[];

            /** EnumDescriptorProto options. */
            public options?: (google.protobuf.IEnumOptions|null);

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IEnumDescriptorProto): google.protobuf.EnumDescriptorProto;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param message EnumDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param message EnumDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumDescriptorProto;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumDescriptorProto;

            /**
             * Verifies an EnumDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto;

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumValueDescriptorProto. */
        interface IEnumValueDescriptorProto {

            /** EnumValueDescriptorProto name */
            name?: (string|null);

            /** EnumValueDescriptorProto number */
            number?: (number|null);

            /** EnumValueDescriptorProto options */
            options?: (google.protobuf.IEnumValueOptions|null);
        }

        /** Represents an EnumValueDescriptorProto. */
        class EnumValueDescriptorProto implements IEnumValueDescriptorProto {

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueDescriptorProto);

            /** EnumValueDescriptorProto name. */
            public name: string;

            /** EnumValueDescriptorProto number. */
            public number: number;

            /** EnumValueDescriptorProto options. */
            public options?: (google.protobuf.IEnumValueOptions|null);

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumValueDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IEnumValueDescriptorProto): google.protobuf.EnumValueDescriptorProto;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param message EnumValueDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumValueDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param message EnumValueDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumValueDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueDescriptorProto;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueDescriptorProto;

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueDescriptorProto;

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumValueDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceDescriptorProto. */
        interface IServiceDescriptorProto {

            /** ServiceDescriptorProto name */
            name?: (string|null);

            /** ServiceDescriptorProto method */
            method?: (google.protobuf.IMethodDescriptorProto[]|null);

            /** ServiceDescriptorProto options */
            options?: (google.protobuf.IServiceOptions|null);
        }

        /** Represents a ServiceDescriptorProto. */
        class ServiceDescriptorProto implements IServiceDescriptorProto {

            /**
             * Constructs a new ServiceDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceDescriptorProto);

            /** ServiceDescriptorProto name. */
            public name: string;

            /** ServiceDescriptorProto method. */
            public method: google.protobuf.IMethodDescriptorProto[];

            /** ServiceDescriptorProto options. */
            public options?: (google.protobuf.IServiceOptions|null);

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServiceDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IServiceDescriptorProto): google.protobuf.ServiceDescriptorProto;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param message ServiceDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IServiceDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param message ServiceDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IServiceDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceDescriptorProto;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceDescriptorProto;

            /**
             * Verifies a ServiceDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceDescriptorProto;

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @param message ServiceDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodDescriptorProto. */
        interface IMethodDescriptorProto {

            /** MethodDescriptorProto name */
            name?: (string|null);

            /** MethodDescriptorProto inputType */
            inputType?: (string|null);

            /** MethodDescriptorProto outputType */
            outputType?: (string|null);

            /** MethodDescriptorProto options */
            options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto clientStreaming */
            clientStreaming?: (boolean|null);

            /** MethodDescriptorProto serverStreaming */
            serverStreaming?: (boolean|null);
        }

        /** Represents a MethodDescriptorProto. */
        class MethodDescriptorProto implements IMethodDescriptorProto {

            /**
             * Constructs a new MethodDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodDescriptorProto);

            /** MethodDescriptorProto name. */
            public name: string;

            /** MethodDescriptorProto inputType. */
            public inputType: string;

            /** MethodDescriptorProto outputType. */
            public outputType: string;

            /** MethodDescriptorProto options. */
            public options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto clientStreaming. */
            public clientStreaming: boolean;

            /** MethodDescriptorProto serverStreaming. */
            public serverStreaming: boolean;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MethodDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IMethodDescriptorProto): google.protobuf.MethodDescriptorProto;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param message MethodDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMethodDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param message MethodDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMethodDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodDescriptorProto;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodDescriptorProto;

            /**
             * Verifies a MethodDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodDescriptorProto;

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @param message MethodDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileOptions. */
        interface IFileOptions {

            /** FileOptions javaPackage */
            javaPackage?: (string|null);

            /** FileOptions javaOuterClassname */
            javaOuterClassname?: (string|null);

            /** FileOptions javaMultipleFiles */
            javaMultipleFiles?: (boolean|null);

            /** FileOptions javaGenerateEqualsAndHash */
            javaGenerateEqualsAndHash?: (boolean|null);

            /** FileOptions javaStringCheckUtf8 */
            javaStringCheckUtf8?: (boolean|null);

            /** FileOptions optimizeFor */
            optimizeFor?: (google.protobuf.FileOptions.OptimizeMode|null);

            /** FileOptions goPackage */
            goPackage?: (string|null);

            /** FileOptions ccGenericServices */
            ccGenericServices?: (boolean|null);

            /** FileOptions javaGenericServices */
            javaGenericServices?: (boolean|null);

            /** FileOptions pyGenericServices */
            pyGenericServices?: (boolean|null);

            /** FileOptions deprecated */
            deprecated?: (boolean|null);

            /** FileOptions ccEnableArenas */
            ccEnableArenas?: (boolean|null);

            /** FileOptions objcClassPrefix */
            objcClassPrefix?: (string|null);

            /** FileOptions csharpNamespace */
            csharpNamespace?: (string|null);

            /** FileOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a FileOptions. */
        class FileOptions implements IFileOptions {

            /**
             * Constructs a new FileOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileOptions);

            /** FileOptions javaPackage. */
            public javaPackage: string;

            /** FileOptions javaOuterClassname. */
            public javaOuterClassname: string;

            /** FileOptions javaMultipleFiles. */
            public javaMultipleFiles: boolean;

            /** FileOptions javaGenerateEqualsAndHash. */
            public javaGenerateEqualsAndHash: boolean;

            /** FileOptions javaStringCheckUtf8. */
            public javaStringCheckUtf8: boolean;

            /** FileOptions optimizeFor. */
            public optimizeFor: google.protobuf.FileOptions.OptimizeMode;

            /** FileOptions goPackage. */
            public goPackage: string;

            /** FileOptions ccGenericServices. */
            public ccGenericServices: boolean;

            /** FileOptions javaGenericServices. */
            public javaGenericServices: boolean;

            /** FileOptions pyGenericServices. */
            public pyGenericServices: boolean;

            /** FileOptions deprecated. */
            public deprecated: boolean;

            /** FileOptions ccEnableArenas. */
            public ccEnableArenas: boolean;

            /** FileOptions objcClassPrefix. */
            public objcClassPrefix: string;

            /** FileOptions csharpNamespace. */
            public csharpNamespace: string;

            /** FileOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileOptions instance
             */
            public static create(properties?: google.protobuf.IFileOptions): google.protobuf.FileOptions;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param message FileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param message FileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileOptions;

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileOptions;

            /**
             * Verifies a FileOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileOptions;

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @param message FileOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FileOptions {

            /** OptimizeMode enum. */
            enum OptimizeMode {
                SPEED = 1,
                CODE_SIZE = 2,
                LITE_RUNTIME = 3
            }
        }

        /** Properties of a MessageOptions. */
        interface IMessageOptions {

            /** MessageOptions messageSetWireFormat */
            messageSetWireFormat?: (boolean|null);

            /** MessageOptions noStandardDescriptorAccessor */
            noStandardDescriptorAccessor?: (boolean|null);

            /** MessageOptions deprecated */
            deprecated?: (boolean|null);

            /** MessageOptions mapEntry */
            mapEntry?: (boolean|null);

            /** MessageOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a MessageOptions. */
        class MessageOptions implements IMessageOptions {

            /**
             * Constructs a new MessageOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMessageOptions);

            /** MessageOptions messageSetWireFormat. */
            public messageSetWireFormat: boolean;

            /** MessageOptions noStandardDescriptorAccessor. */
            public noStandardDescriptorAccessor: boolean;

            /** MessageOptions deprecated. */
            public deprecated: boolean;

            /** MessageOptions mapEntry. */
            public mapEntry: boolean;

            /** MessageOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MessageOptions instance
             */
            public static create(properties?: google.protobuf.IMessageOptions): google.protobuf.MessageOptions;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param message MessageOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param message MessageOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MessageOptions;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MessageOptions;

            /**
             * Verifies a MessageOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MessageOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MessageOptions;

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @param message MessageOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MessageOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MessageOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FieldOptions. */
        interface IFieldOptions {

            /** FieldOptions ctype */
            ctype?: (google.protobuf.FieldOptions.CType|null);

            /** FieldOptions packed */
            packed?: (boolean|null);

            /** FieldOptions jstype */
            jstype?: (google.protobuf.FieldOptions.JSType|null);

            /** FieldOptions lazy */
            lazy?: (boolean|null);

            /** FieldOptions deprecated */
            deprecated?: (boolean|null);

            /** FieldOptions weak */
            weak?: (boolean|null);

            /** FieldOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);

            /** FieldOptions .pointer */
            ".pointer"?: (PointerType|null);

            /** FieldOptions .arraySize */
            ".arraySize"?: (number|null);
        }

        /** Represents a FieldOptions. */
        class FieldOptions implements IFieldOptions {

            /**
             * Constructs a new FieldOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldOptions);

            /** FieldOptions ctype. */
            public ctype: google.protobuf.FieldOptions.CType;

            /** FieldOptions packed. */
            public packed: boolean;

            /** FieldOptions jstype. */
            public jstype: google.protobuf.FieldOptions.JSType;

            /** FieldOptions lazy. */
            public lazy: boolean;

            /** FieldOptions deprecated. */
            public deprecated: boolean;

            /** FieldOptions weak. */
            public weak: boolean;

            /** FieldOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /** FieldOptions .pointer. */
            public pointer: PointerType;

            /** FieldOptions .arraySize. */
            public arraySize: number;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldOptions instance
             */
            public static create(properties?: google.protobuf.IFieldOptions): google.protobuf.FieldOptions;

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param message FieldOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFieldOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param message FieldOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFieldOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldOptions;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldOptions;

            /**
             * Verifies a FieldOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldOptions;

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @param message FieldOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldOptions {

            /** CType enum. */
            enum CType {
                STRING = 0,
                CORD = 1,
                STRING_PIECE = 2
            }

            /** JSType enum. */
            enum JSType {
                JS_NORMAL = 0,
                JS_STRING = 1,
                JS_NUMBER = 2
            }
        }

        /** Properties of an OneofOptions. */
        interface IOneofOptions {

            /** OneofOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an OneofOptions. */
        class OneofOptions implements IOneofOptions {

            /**
             * Constructs a new OneofOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofOptions);

            /** OneofOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns OneofOptions instance
             */
            public static create(properties?: google.protobuf.IOneofOptions): google.protobuf.OneofOptions;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param message OneofOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IOneofOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param message OneofOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IOneofOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofOptions;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofOptions;

            /**
             * Verifies an OneofOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofOptions;

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @param message OneofOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumOptions. */
        interface IEnumOptions {

            /** EnumOptions allowAlias */
            allowAlias?: (boolean|null);

            /** EnumOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an EnumOptions. */
        class EnumOptions implements IEnumOptions {

            /**
             * Constructs a new EnumOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumOptions);

            /** EnumOptions allowAlias. */
            public allowAlias: boolean;

            /** EnumOptions deprecated. */
            public deprecated: boolean;

            /** EnumOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumOptions instance
             */
            public static create(properties?: google.protobuf.IEnumOptions): google.protobuf.EnumOptions;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param message EnumOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param message EnumOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumOptions;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumOptions;

            /**
             * Verifies an EnumOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumOptions;

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @param message EnumOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumValueOptions. */
        interface IEnumValueOptions {

            /** EnumValueOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumValueOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an EnumValueOptions. */
        class EnumValueOptions implements IEnumValueOptions {

            /**
             * Constructs a new EnumValueOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueOptions);

            /** EnumValueOptions deprecated. */
            public deprecated: boolean;

            /** EnumValueOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumValueOptions instance
             */
            public static create(properties?: google.protobuf.IEnumValueOptions): google.protobuf.EnumValueOptions;

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param message EnumValueOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumValueOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param message EnumValueOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumValueOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueOptions;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueOptions;

            /**
             * Verifies an EnumValueOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueOptions;

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @param message EnumValueOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceOptions. */
        interface IServiceOptions {

            /** ServiceOptions deprecated */
            deprecated?: (boolean|null);

            /** ServiceOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a ServiceOptions. */
        class ServiceOptions implements IServiceOptions {

            /**
             * Constructs a new ServiceOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceOptions);

            /** ServiceOptions deprecated. */
            public deprecated: boolean;

            /** ServiceOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServiceOptions instance
             */
            public static create(properties?: google.protobuf.IServiceOptions): google.protobuf.ServiceOptions;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param message ServiceOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IServiceOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param message ServiceOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IServiceOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceOptions;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceOptions;

            /**
             * Verifies a ServiceOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceOptions;

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @param message ServiceOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodOptions. */
        interface IMethodOptions {

            /** MethodOptions deprecated */
            deprecated?: (boolean|null);

            /** MethodOptions uninterpretedOption */
            uninterpretedOption?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a MethodOptions. */
        class MethodOptions implements IMethodOptions {

            /**
             * Constructs a new MethodOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodOptions);

            /** MethodOptions deprecated. */
            public deprecated: boolean;

            /** MethodOptions uninterpretedOption. */
            public uninterpretedOption: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MethodOptions instance
             */
            public static create(properties?: google.protobuf.IMethodOptions): google.protobuf.MethodOptions;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param message MethodOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMethodOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param message MethodOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMethodOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodOptions;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodOptions;

            /**
             * Verifies a MethodOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodOptions;

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @param message MethodOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an UninterpretedOption. */
        interface IUninterpretedOption {

            /** UninterpretedOption name */
            name?: (google.protobuf.UninterpretedOption.INamePart[]|null);

            /** UninterpretedOption identifierValue */
            identifierValue?: (string|null);

            /** UninterpretedOption positiveIntValue */
            positiveIntValue?: (number|Long|null);

            /** UninterpretedOption negativeIntValue */
            negativeIntValue?: (number|Long|null);

            /** UninterpretedOption doubleValue */
            doubleValue?: (number|null);

            /** UninterpretedOption stringValue */
            stringValue?: (Uint8Array|null);

            /** UninterpretedOption aggregateValue */
            aggregateValue?: (string|null);
        }

        /** Represents an UninterpretedOption. */
        class UninterpretedOption implements IUninterpretedOption {

            /**
             * Constructs a new UninterpretedOption.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IUninterpretedOption);

            /** UninterpretedOption name. */
            public name: google.protobuf.UninterpretedOption.INamePart[];

            /** UninterpretedOption identifierValue. */
            public identifierValue: string;

            /** UninterpretedOption positiveIntValue. */
            public positiveIntValue: (number|Long);

            /** UninterpretedOption negativeIntValue. */
            public negativeIntValue: (number|Long);

            /** UninterpretedOption doubleValue. */
            public doubleValue: number;

            /** UninterpretedOption stringValue. */
            public stringValue: Uint8Array;

            /** UninterpretedOption aggregateValue. */
            public aggregateValue: string;

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @param [properties] Properties to set
             * @returns UninterpretedOption instance
             */
            public static create(properties?: google.protobuf.IUninterpretedOption): google.protobuf.UninterpretedOption;

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param message UninterpretedOption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IUninterpretedOption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param message UninterpretedOption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IUninterpretedOption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption;

            /**
             * Verifies an UninterpretedOption message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UninterpretedOption
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption;

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @param message UninterpretedOption
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.UninterpretedOption, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UninterpretedOption to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace UninterpretedOption {

            /** Properties of a NamePart. */
            interface INamePart {

                /** NamePart namePart */
                namePart: string;

                /** NamePart isExtension */
                isExtension: boolean;
            }

            /** Represents a NamePart. */
            class NamePart implements INamePart {

                /**
                 * Constructs a new NamePart.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.UninterpretedOption.INamePart);

                /** NamePart namePart. */
                public namePart: string;

                /** NamePart isExtension. */
                public isExtension: boolean;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NamePart instance
                 */
                public static create(properties?: google.protobuf.UninterpretedOption.INamePart): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param message NamePart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.UninterpretedOption.INamePart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param message NamePart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.UninterpretedOption.INamePart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Verifies a NamePart message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NamePart
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @param message NamePart
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.UninterpretedOption.NamePart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NamePart to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a SourceCodeInfo. */
        interface ISourceCodeInfo {

            /** SourceCodeInfo location */
            location?: (google.protobuf.SourceCodeInfo.ILocation[]|null);
        }

        /** Represents a SourceCodeInfo. */
        class SourceCodeInfo implements ISourceCodeInfo {

            /**
             * Constructs a new SourceCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ISourceCodeInfo);

            /** SourceCodeInfo location. */
            public location: google.protobuf.SourceCodeInfo.ILocation[];

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SourceCodeInfo instance
             */
            public static create(properties?: google.protobuf.ISourceCodeInfo): google.protobuf.SourceCodeInfo;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param message SourceCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.ISourceCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param message SourceCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.ISourceCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo;

            /**
             * Verifies a SourceCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SourceCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo;

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @param message SourceCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.SourceCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace SourceCodeInfo {

            /** Properties of a Location. */
            interface ILocation {

                /** Location path */
                path?: (number[]|null);

                /** Location span */
                span?: (number[]|null);

                /** Location leadingComments */
                leadingComments?: (string|null);

                /** Location trailingComments */
                trailingComments?: (string|null);

                /** Location leadingDetachedComments */
                leadingDetachedComments?: (string[]|null);
            }

            /** Represents a Location. */
            class Location implements ILocation {

                /**
                 * Constructs a new Location.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.SourceCodeInfo.ILocation);

                /** Location path. */
                public path: number[];

                /** Location span. */
                public span: number[];

                /** Location leadingComments. */
                public leadingComments: string;

                /** Location trailingComments. */
                public trailingComments: string;

                /** Location leadingDetachedComments. */
                public leadingDetachedComments: string[];

                /**
                 * Creates a new Location instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Location instance
                 */
                public static create(properties?: google.protobuf.SourceCodeInfo.ILocation): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param message Location message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.SourceCodeInfo.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param message Location message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.SourceCodeInfo.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Verifies a Location message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Location
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @param message Location
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.SourceCodeInfo.Location, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Location to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GeneratedCodeInfo. */
        interface IGeneratedCodeInfo {

            /** GeneratedCodeInfo annotation */
            annotation?: (google.protobuf.GeneratedCodeInfo.IAnnotation[]|null);
        }

        /** Represents a GeneratedCodeInfo. */
        class GeneratedCodeInfo implements IGeneratedCodeInfo {

            /**
             * Constructs a new GeneratedCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IGeneratedCodeInfo);

            /** GeneratedCodeInfo annotation. */
            public annotation: google.protobuf.GeneratedCodeInfo.IAnnotation[];

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns GeneratedCodeInfo instance
             */
            public static create(properties?: google.protobuf.IGeneratedCodeInfo): google.protobuf.GeneratedCodeInfo;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param message GeneratedCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IGeneratedCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param message GeneratedCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IGeneratedCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo;

            /**
             * Verifies a GeneratedCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GeneratedCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo;

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @param message GeneratedCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.GeneratedCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GeneratedCodeInfo {

            /** Properties of an Annotation. */
            interface IAnnotation {

                /** Annotation path */
                path?: (number[]|null);

                /** Annotation sourceFile */
                sourceFile?: (string|null);

                /** Annotation begin */
                begin?: (number|null);

                /** Annotation end */
                end?: (number|null);
            }

            /** Represents an Annotation. */
            class Annotation implements IAnnotation {

                /**
                 * Constructs a new Annotation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.GeneratedCodeInfo.IAnnotation);

                /** Annotation path. */
                public path: number[];

                /** Annotation sourceFile. */
                public sourceFile: string;

                /** Annotation begin. */
                public begin: number;

                /** Annotation end. */
                public end: number;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Annotation instance
                 */
                public static create(properties?: google.protobuf.GeneratedCodeInfo.IAnnotation): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param message Annotation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.GeneratedCodeInfo.IAnnotation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param message Annotation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.GeneratedCodeInfo.IAnnotation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Verifies an Annotation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Annotation
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @param message Annotation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.GeneratedCodeInfo.Annotation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Annotation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }
}

/** Properties of a mat. */
export interface Imat {

    /** mat rows */
    rows?: (number|null);

    /** mat cols */
    cols?: (number|null);

    /** mat v */
    v?: (number[]|null);
}

/** Represents a mat. */
export class mat implements Imat {

    /**
     * Constructs a new mat.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat);

    /** mat rows. */
    public rows: number;

    /** mat cols. */
    public cols: number;

    /** mat v. */
    public v: number[];

    /**
     * Creates a new mat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat instance
     */
    public static create(properties?: Imat): mat;

    /**
     * Encodes the specified mat message. Does not implicitly {@link mat.verify|verify} messages.
     * @param message mat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat message, length delimited. Does not implicitly {@link mat.verify|verify} messages.
     * @param message mat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat;

    /**
     * Decodes a mat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat;

    /**
     * Verifies a mat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat
     */
    public static fromObject(object: { [k: string]: any }): mat;

    /**
     * Creates a plain object from a mat message. Also converts values to other types if specified.
     * @param message mat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat. */
export interface Ifmat {

    /** fmat rows */
    rows?: (number|null);

    /** fmat cols */
    cols?: (number|null);

    /** fmat v */
    v?: (number[]|null);
}

/** Represents a fmat. */
export class fmat implements Ifmat {

    /**
     * Constructs a new fmat.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat);

    /** fmat rows. */
    public rows: number;

    /** fmat cols. */
    public cols: number;

    /** fmat v. */
    public v: number[];

    /**
     * Creates a new fmat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat instance
     */
    public static create(properties?: Ifmat): fmat;

    /**
     * Encodes the specified fmat message. Does not implicitly {@link fmat.verify|verify} messages.
     * @param message fmat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat message, length delimited. Does not implicitly {@link fmat.verify|verify} messages.
     * @param message fmat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat;

    /**
     * Decodes a fmat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat;

    /**
     * Verifies a fmat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat
     */
    public static fromObject(object: { [k: string]: any }): fmat;

    /**
     * Creates a plain object from a fmat message. Also converts values to other types if specified.
     * @param message fmat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat. */
export interface Iimat {

    /** imat rows */
    rows?: (number|null);

    /** imat cols */
    cols?: (number|null);

    /** imat v */
    v?: (number[]|null);
}

/** Represents an imat. */
export class imat implements Iimat {

    /**
     * Constructs a new imat.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat);

    /** imat rows. */
    public rows: number;

    /** imat cols. */
    public cols: number;

    /** imat v. */
    public v: number[];

    /**
     * Creates a new imat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat instance
     */
    public static create(properties?: Iimat): imat;

    /**
     * Encodes the specified imat message. Does not implicitly {@link imat.verify|verify} messages.
     * @param message imat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat message, length delimited. Does not implicitly {@link imat.verify|verify} messages.
     * @param message imat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat;

    /**
     * Decodes an imat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat;

    /**
     * Verifies an imat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat
     */
    public static fromObject(object: { [k: string]: any }): imat;

    /**
     * Creates a plain object from an imat message. Also converts values to other types if specified.
     * @param message imat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat. */
export interface Iumat {

    /** umat rows */
    rows?: (number|null);

    /** umat cols */
    cols?: (number|null);

    /** umat v */
    v?: (number[]|null);
}

/** Represents an umat. */
export class umat implements Iumat {

    /**
     * Constructs a new umat.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat);

    /** umat rows. */
    public rows: number;

    /** umat cols. */
    public cols: number;

    /** umat v. */
    public v: number[];

    /**
     * Creates a new umat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat instance
     */
    public static create(properties?: Iumat): umat;

    /**
     * Encodes the specified umat message. Does not implicitly {@link umat.verify|verify} messages.
     * @param message umat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat message, length delimited. Does not implicitly {@link umat.verify|verify} messages.
     * @param message umat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat;

    /**
     * Decodes an umat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat;

    /**
     * Verifies an umat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat
     */
    public static fromObject(object: { [k: string]: any }): umat;

    /**
     * Creates a plain object from an umat message. Also converts values to other types if specified.
     * @param message umat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a cmat. */
export interface Icmat {

    /** cmat rows */
    rows?: (number|null);

    /** cmat cols */
    cols?: (number|null);

    /** cmat v */
    v?: (Uint8Array|null);
}

/** Represents a cmat. */
export class cmat implements Icmat {

    /**
     * Constructs a new cmat.
     * @param [properties] Properties to set
     */
    constructor(properties?: Icmat);

    /** cmat rows. */
    public rows: number;

    /** cmat cols. */
    public cols: number;

    /** cmat v. */
    public v: Uint8Array;

    /**
     * Creates a new cmat instance using the specified properties.
     * @param [properties] Properties to set
     * @returns cmat instance
     */
    public static create(properties?: Icmat): cmat;

    /**
     * Encodes the specified cmat message. Does not implicitly {@link cmat.verify|verify} messages.
     * @param message cmat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Icmat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified cmat message, length delimited. Does not implicitly {@link cmat.verify|verify} messages.
     * @param message cmat message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Icmat, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a cmat message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns cmat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cmat;

    /**
     * Decodes a cmat message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns cmat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cmat;

    /**
     * Verifies a cmat message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a cmat message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns cmat
     */
    public static fromObject(object: { [k: string]: any }): cmat;

    /**
     * Creates a plain object from a cmat message. Also converts values to other types if specified.
     * @param message cmat
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: cmat, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this cmat to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat2. */
export interface Imat2 {

    /** mat2 x */
    x?: (Ivec2|null);

    /** mat2 y */
    y?: (Ivec2|null);
}

/** Represents a mat2. */
export class mat2 implements Imat2 {

    /**
     * Constructs a new mat2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat2);

    /** mat2 x. */
    public x?: (Ivec2|null);

    /** mat2 y. */
    public y?: (Ivec2|null);

    /**
     * Creates a new mat2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat2 instance
     */
    public static create(properties?: Imat2): mat2;

    /**
     * Encodes the specified mat2 message. Does not implicitly {@link mat2.verify|verify} messages.
     * @param message mat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat2 message, length delimited. Does not implicitly {@link mat2.verify|verify} messages.
     * @param message mat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat2;

    /**
     * Decodes a mat2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat2;

    /**
     * Verifies a mat2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat2
     */
    public static fromObject(object: { [k: string]: any }): mat2;

    /**
     * Creates a plain object from a mat2 message. Also converts values to other types if specified.
     * @param message mat2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat2. */
export interface Ifmat2 {

    /** fmat2 x */
    x?: (Ifvec2|null);

    /** fmat2 y */
    y?: (Ifvec2|null);
}

/** Represents a fmat2. */
export class fmat2 implements Ifmat2 {

    /**
     * Constructs a new fmat2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat2);

    /** fmat2 x. */
    public x?: (Ifvec2|null);

    /** fmat2 y. */
    public y?: (Ifvec2|null);

    /**
     * Creates a new fmat2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat2 instance
     */
    public static create(properties?: Ifmat2): fmat2;

    /**
     * Encodes the specified fmat2 message. Does not implicitly {@link fmat2.verify|verify} messages.
     * @param message fmat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat2 message, length delimited. Does not implicitly {@link fmat2.verify|verify} messages.
     * @param message fmat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat2;

    /**
     * Decodes a fmat2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat2;

    /**
     * Verifies a fmat2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat2
     */
    public static fromObject(object: { [k: string]: any }): fmat2;

    /**
     * Creates a plain object from a fmat2 message. Also converts values to other types if specified.
     * @param message fmat2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat2. */
export interface Iimat2 {

    /** imat2 x */
    x?: (Iivec2|null);

    /** imat2 y */
    y?: (Iivec2|null);
}

/** Represents an imat2. */
export class imat2 implements Iimat2 {

    /**
     * Constructs a new imat2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat2);

    /** imat2 x. */
    public x?: (Iivec2|null);

    /** imat2 y. */
    public y?: (Iivec2|null);

    /**
     * Creates a new imat2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat2 instance
     */
    public static create(properties?: Iimat2): imat2;

    /**
     * Encodes the specified imat2 message. Does not implicitly {@link imat2.verify|verify} messages.
     * @param message imat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat2 message, length delimited. Does not implicitly {@link imat2.verify|verify} messages.
     * @param message imat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat2;

    /**
     * Decodes an imat2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat2;

    /**
     * Verifies an imat2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat2
     */
    public static fromObject(object: { [k: string]: any }): imat2;

    /**
     * Creates a plain object from an imat2 message. Also converts values to other types if specified.
     * @param message imat2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat2. */
export interface Iumat2 {

    /** umat2 x */
    x?: (Iuvec2|null);

    /** umat2 y */
    y?: (Iuvec2|null);
}

/** Represents an umat2. */
export class umat2 implements Iumat2 {

    /**
     * Constructs a new umat2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat2);

    /** umat2 x. */
    public x?: (Iuvec2|null);

    /** umat2 y. */
    public y?: (Iuvec2|null);

    /**
     * Creates a new umat2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat2 instance
     */
    public static create(properties?: Iumat2): umat2;

    /**
     * Encodes the specified umat2 message. Does not implicitly {@link umat2.verify|verify} messages.
     * @param message umat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat2 message, length delimited. Does not implicitly {@link umat2.verify|verify} messages.
     * @param message umat2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat2;

    /**
     * Decodes an umat2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat2;

    /**
     * Verifies an umat2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat2
     */
    public static fromObject(object: { [k: string]: any }): umat2;

    /**
     * Creates a plain object from an umat2 message. Also converts values to other types if specified.
     * @param message umat2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat3. */
export interface Imat3 {

    /** mat3 x */
    x?: (Ivec3|null);

    /** mat3 y */
    y?: (Ivec3|null);

    /** mat3 z */
    z?: (Ivec3|null);
}

/** Represents a mat3. */
export class mat3 implements Imat3 {

    /**
     * Constructs a new mat3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat3);

    /** mat3 x. */
    public x?: (Ivec3|null);

    /** mat3 y. */
    public y?: (Ivec3|null);

    /** mat3 z. */
    public z?: (Ivec3|null);

    /**
     * Creates a new mat3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat3 instance
     */
    public static create(properties?: Imat3): mat3;

    /**
     * Encodes the specified mat3 message. Does not implicitly {@link mat3.verify|verify} messages.
     * @param message mat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat3 message, length delimited. Does not implicitly {@link mat3.verify|verify} messages.
     * @param message mat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat3;

    /**
     * Decodes a mat3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat3;

    /**
     * Verifies a mat3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat3
     */
    public static fromObject(object: { [k: string]: any }): mat3;

    /**
     * Creates a plain object from a mat3 message. Also converts values to other types if specified.
     * @param message mat3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat3. */
export interface Ifmat3 {

    /** fmat3 x */
    x?: (Ifvec3|null);

    /** fmat3 y */
    y?: (Ifvec3|null);

    /** fmat3 z */
    z?: (Ifvec3|null);
}

/** Represents a fmat3. */
export class fmat3 implements Ifmat3 {

    /**
     * Constructs a new fmat3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat3);

    /** fmat3 x. */
    public x?: (Ifvec3|null);

    /** fmat3 y. */
    public y?: (Ifvec3|null);

    /** fmat3 z. */
    public z?: (Ifvec3|null);

    /**
     * Creates a new fmat3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat3 instance
     */
    public static create(properties?: Ifmat3): fmat3;

    /**
     * Encodes the specified fmat3 message. Does not implicitly {@link fmat3.verify|verify} messages.
     * @param message fmat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat3 message, length delimited. Does not implicitly {@link fmat3.verify|verify} messages.
     * @param message fmat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat3;

    /**
     * Decodes a fmat3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat3;

    /**
     * Verifies a fmat3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat3
     */
    public static fromObject(object: { [k: string]: any }): fmat3;

    /**
     * Creates a plain object from a fmat3 message. Also converts values to other types if specified.
     * @param message fmat3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat3. */
export interface Iimat3 {

    /** imat3 x */
    x?: (Iivec3|null);

    /** imat3 y */
    y?: (Iivec3|null);

    /** imat3 z */
    z?: (Iivec3|null);
}

/** Represents an imat3. */
export class imat3 implements Iimat3 {

    /**
     * Constructs a new imat3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat3);

    /** imat3 x. */
    public x?: (Iivec3|null);

    /** imat3 y. */
    public y?: (Iivec3|null);

    /** imat3 z. */
    public z?: (Iivec3|null);

    /**
     * Creates a new imat3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat3 instance
     */
    public static create(properties?: Iimat3): imat3;

    /**
     * Encodes the specified imat3 message. Does not implicitly {@link imat3.verify|verify} messages.
     * @param message imat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat3 message, length delimited. Does not implicitly {@link imat3.verify|verify} messages.
     * @param message imat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat3;

    /**
     * Decodes an imat3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat3;

    /**
     * Verifies an imat3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat3
     */
    public static fromObject(object: { [k: string]: any }): imat3;

    /**
     * Creates a plain object from an imat3 message. Also converts values to other types if specified.
     * @param message imat3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat3. */
export interface Iumat3 {

    /** umat3 x */
    x?: (Iuvec3|null);

    /** umat3 y */
    y?: (Iuvec3|null);

    /** umat3 z */
    z?: (Iuvec3|null);
}

/** Represents an umat3. */
export class umat3 implements Iumat3 {

    /**
     * Constructs a new umat3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat3);

    /** umat3 x. */
    public x?: (Iuvec3|null);

    /** umat3 y. */
    public y?: (Iuvec3|null);

    /** umat3 z. */
    public z?: (Iuvec3|null);

    /**
     * Creates a new umat3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat3 instance
     */
    public static create(properties?: Iumat3): umat3;

    /**
     * Encodes the specified umat3 message. Does not implicitly {@link umat3.verify|verify} messages.
     * @param message umat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat3 message, length delimited. Does not implicitly {@link umat3.verify|verify} messages.
     * @param message umat3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat3;

    /**
     * Decodes an umat3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat3;

    /**
     * Verifies an umat3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat3
     */
    public static fromObject(object: { [k: string]: any }): umat3;

    /**
     * Creates a plain object from an umat3 message. Also converts values to other types if specified.
     * @param message umat3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat4. */
export interface Imat4 {

    /** mat4 x */
    x?: (Ivec4|null);

    /** mat4 y */
    y?: (Ivec4|null);

    /** mat4 z */
    z?: (Ivec4|null);

    /** mat4 t */
    t?: (Ivec4|null);
}

/** Represents a mat4. */
export class mat4 implements Imat4 {

    /**
     * Constructs a new mat4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat4);

    /** mat4 x. */
    public x?: (Ivec4|null);

    /** mat4 y. */
    public y?: (Ivec4|null);

    /** mat4 z. */
    public z?: (Ivec4|null);

    /** mat4 t. */
    public t?: (Ivec4|null);

    /**
     * Creates a new mat4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat4 instance
     */
    public static create(properties?: Imat4): mat4;

    /**
     * Encodes the specified mat4 message. Does not implicitly {@link mat4.verify|verify} messages.
     * @param message mat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat4 message, length delimited. Does not implicitly {@link mat4.verify|verify} messages.
     * @param message mat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat4;

    /**
     * Decodes a mat4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat4;

    /**
     * Verifies a mat4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat4
     */
    public static fromObject(object: { [k: string]: any }): mat4;

    /**
     * Creates a plain object from a mat4 message. Also converts values to other types if specified.
     * @param message mat4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat4. */
export interface Ifmat4 {

    /** fmat4 x */
    x?: (Ifvec4|null);

    /** fmat4 y */
    y?: (Ifvec4|null);

    /** fmat4 z */
    z?: (Ifvec4|null);

    /** fmat4 t */
    t?: (Ifvec4|null);
}

/** Represents a fmat4. */
export class fmat4 implements Ifmat4 {

    /**
     * Constructs a new fmat4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat4);

    /** fmat4 x. */
    public x?: (Ifvec4|null);

    /** fmat4 y. */
    public y?: (Ifvec4|null);

    /** fmat4 z. */
    public z?: (Ifvec4|null);

    /** fmat4 t. */
    public t?: (Ifvec4|null);

    /**
     * Creates a new fmat4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat4 instance
     */
    public static create(properties?: Ifmat4): fmat4;

    /**
     * Encodes the specified fmat4 message. Does not implicitly {@link fmat4.verify|verify} messages.
     * @param message fmat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat4 message, length delimited. Does not implicitly {@link fmat4.verify|verify} messages.
     * @param message fmat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat4;

    /**
     * Decodes a fmat4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat4;

    /**
     * Verifies a fmat4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat4
     */
    public static fromObject(object: { [k: string]: any }): fmat4;

    /**
     * Creates a plain object from a fmat4 message. Also converts values to other types if specified.
     * @param message fmat4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat4. */
export interface Iimat4 {

    /** imat4 x */
    x?: (Iivec4|null);

    /** imat4 y */
    y?: (Iivec4|null);

    /** imat4 z */
    z?: (Iivec4|null);

    /** imat4 t */
    t?: (Iivec4|null);
}

/** Represents an imat4. */
export class imat4 implements Iimat4 {

    /**
     * Constructs a new imat4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat4);

    /** imat4 x. */
    public x?: (Iivec4|null);

    /** imat4 y. */
    public y?: (Iivec4|null);

    /** imat4 z. */
    public z?: (Iivec4|null);

    /** imat4 t. */
    public t?: (Iivec4|null);

    /**
     * Creates a new imat4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat4 instance
     */
    public static create(properties?: Iimat4): imat4;

    /**
     * Encodes the specified imat4 message. Does not implicitly {@link imat4.verify|verify} messages.
     * @param message imat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat4 message, length delimited. Does not implicitly {@link imat4.verify|verify} messages.
     * @param message imat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat4;

    /**
     * Decodes an imat4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat4;

    /**
     * Verifies an imat4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat4
     */
    public static fromObject(object: { [k: string]: any }): imat4;

    /**
     * Creates a plain object from an imat4 message. Also converts values to other types if specified.
     * @param message imat4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat4. */
export interface Iumat4 {

    /** umat4 x */
    x?: (Iuvec4|null);

    /** umat4 y */
    y?: (Iuvec4|null);

    /** umat4 z */
    z?: (Iuvec4|null);

    /** umat4 t */
    t?: (Iuvec4|null);
}

/** Represents an umat4. */
export class umat4 implements Iumat4 {

    /**
     * Constructs a new umat4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat4);

    /** umat4 x. */
    public x?: (Iuvec4|null);

    /** umat4 y. */
    public y?: (Iuvec4|null);

    /** umat4 z. */
    public z?: (Iuvec4|null);

    /** umat4 t. */
    public t?: (Iuvec4|null);

    /**
     * Creates a new umat4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat4 instance
     */
    public static create(properties?: Iumat4): umat4;

    /**
     * Encodes the specified umat4 message. Does not implicitly {@link umat4.verify|verify} messages.
     * @param message umat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat4 message, length delimited. Does not implicitly {@link umat4.verify|verify} messages.
     * @param message umat4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat4;

    /**
     * Decodes an umat4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat4;

    /**
     * Verifies an umat4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat4
     */
    public static fromObject(object: { [k: string]: any }): umat4;

    /**
     * Creates a plain object from an umat4 message. Also converts values to other types if specified.
     * @param message umat4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat5. */
export interface Imat5 {

    /** mat5 s0 */
    s0?: (Ivec5|null);

    /** mat5 s1 */
    s1?: (Ivec5|null);

    /** mat5 s2 */
    s2?: (Ivec5|null);

    /** mat5 s3 */
    s3?: (Ivec5|null);

    /** mat5 s4 */
    s4?: (Ivec5|null);
}

/** Represents a mat5. */
export class mat5 implements Imat5 {

    /**
     * Constructs a new mat5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat5);

    /** mat5 s0. */
    public s0?: (Ivec5|null);

    /** mat5 s1. */
    public s1?: (Ivec5|null);

    /** mat5 s2. */
    public s2?: (Ivec5|null);

    /** mat5 s3. */
    public s3?: (Ivec5|null);

    /** mat5 s4. */
    public s4?: (Ivec5|null);

    /**
     * Creates a new mat5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat5 instance
     */
    public static create(properties?: Imat5): mat5;

    /**
     * Encodes the specified mat5 message. Does not implicitly {@link mat5.verify|verify} messages.
     * @param message mat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat5 message, length delimited. Does not implicitly {@link mat5.verify|verify} messages.
     * @param message mat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat5;

    /**
     * Decodes a mat5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat5;

    /**
     * Verifies a mat5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat5
     */
    public static fromObject(object: { [k: string]: any }): mat5;

    /**
     * Creates a plain object from a mat5 message. Also converts values to other types if specified.
     * @param message mat5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat5. */
export interface Ifmat5 {

    /** fmat5 s0 */
    s0?: (Ifvec5|null);

    /** fmat5 s1 */
    s1?: (Ifvec5|null);

    /** fmat5 s2 */
    s2?: (Ifvec5|null);

    /** fmat5 s3 */
    s3?: (Ifvec5|null);

    /** fmat5 s4 */
    s4?: (Ifvec5|null);
}

/** Represents a fmat5. */
export class fmat5 implements Ifmat5 {

    /**
     * Constructs a new fmat5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat5);

    /** fmat5 s0. */
    public s0?: (Ifvec5|null);

    /** fmat5 s1. */
    public s1?: (Ifvec5|null);

    /** fmat5 s2. */
    public s2?: (Ifvec5|null);

    /** fmat5 s3. */
    public s3?: (Ifvec5|null);

    /** fmat5 s4. */
    public s4?: (Ifvec5|null);

    /**
     * Creates a new fmat5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat5 instance
     */
    public static create(properties?: Ifmat5): fmat5;

    /**
     * Encodes the specified fmat5 message. Does not implicitly {@link fmat5.verify|verify} messages.
     * @param message fmat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat5 message, length delimited. Does not implicitly {@link fmat5.verify|verify} messages.
     * @param message fmat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat5;

    /**
     * Decodes a fmat5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat5;

    /**
     * Verifies a fmat5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat5
     */
    public static fromObject(object: { [k: string]: any }): fmat5;

    /**
     * Creates a plain object from a fmat5 message. Also converts values to other types if specified.
     * @param message fmat5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat5. */
export interface Iimat5 {

    /** imat5 s0 */
    s0?: (Iivec5|null);

    /** imat5 s1 */
    s1?: (Iivec5|null);

    /** imat5 s2 */
    s2?: (Iivec5|null);

    /** imat5 s3 */
    s3?: (Iivec5|null);

    /** imat5 s4 */
    s4?: (Iivec5|null);
}

/** Represents an imat5. */
export class imat5 implements Iimat5 {

    /**
     * Constructs a new imat5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat5);

    /** imat5 s0. */
    public s0?: (Iivec5|null);

    /** imat5 s1. */
    public s1?: (Iivec5|null);

    /** imat5 s2. */
    public s2?: (Iivec5|null);

    /** imat5 s3. */
    public s3?: (Iivec5|null);

    /** imat5 s4. */
    public s4?: (Iivec5|null);

    /**
     * Creates a new imat5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat5 instance
     */
    public static create(properties?: Iimat5): imat5;

    /**
     * Encodes the specified imat5 message. Does not implicitly {@link imat5.verify|verify} messages.
     * @param message imat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat5 message, length delimited. Does not implicitly {@link imat5.verify|verify} messages.
     * @param message imat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat5;

    /**
     * Decodes an imat5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat5;

    /**
     * Verifies an imat5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat5
     */
    public static fromObject(object: { [k: string]: any }): imat5;

    /**
     * Creates a plain object from an imat5 message. Also converts values to other types if specified.
     * @param message imat5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat5. */
export interface Iumat5 {

    /** umat5 s0 */
    s0?: (Iuvec5|null);

    /** umat5 s1 */
    s1?: (Iuvec5|null);

    /** umat5 s2 */
    s2?: (Iuvec5|null);

    /** umat5 s3 */
    s3?: (Iuvec5|null);

    /** umat5 s4 */
    s4?: (Iuvec5|null);
}

/** Represents an umat5. */
export class umat5 implements Iumat5 {

    /**
     * Constructs a new umat5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat5);

    /** umat5 s0. */
    public s0?: (Iuvec5|null);

    /** umat5 s1. */
    public s1?: (Iuvec5|null);

    /** umat5 s2. */
    public s2?: (Iuvec5|null);

    /** umat5 s3. */
    public s3?: (Iuvec5|null);

    /** umat5 s4. */
    public s4?: (Iuvec5|null);

    /**
     * Creates a new umat5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat5 instance
     */
    public static create(properties?: Iumat5): umat5;

    /**
     * Encodes the specified umat5 message. Does not implicitly {@link umat5.verify|verify} messages.
     * @param message umat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat5 message, length delimited. Does not implicitly {@link umat5.verify|verify} messages.
     * @param message umat5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat5;

    /**
     * Decodes an umat5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat5;

    /**
     * Verifies an umat5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat5
     */
    public static fromObject(object: { [k: string]: any }): umat5;

    /**
     * Creates a plain object from an umat5 message. Also converts values to other types if specified.
     * @param message umat5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat6. */
export interface Imat6 {

    /** mat6 s0 */
    s0?: (Ivec6|null);

    /** mat6 s1 */
    s1?: (Ivec6|null);

    /** mat6 s2 */
    s2?: (Ivec6|null);

    /** mat6 s3 */
    s3?: (Ivec6|null);

    /** mat6 s4 */
    s4?: (Ivec6|null);

    /** mat6 s5 */
    s5?: (Ivec6|null);
}

/** Represents a mat6. */
export class mat6 implements Imat6 {

    /**
     * Constructs a new mat6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat6);

    /** mat6 s0. */
    public s0?: (Ivec6|null);

    /** mat6 s1. */
    public s1?: (Ivec6|null);

    /** mat6 s2. */
    public s2?: (Ivec6|null);

    /** mat6 s3. */
    public s3?: (Ivec6|null);

    /** mat6 s4. */
    public s4?: (Ivec6|null);

    /** mat6 s5. */
    public s5?: (Ivec6|null);

    /**
     * Creates a new mat6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat6 instance
     */
    public static create(properties?: Imat6): mat6;

    /**
     * Encodes the specified mat6 message. Does not implicitly {@link mat6.verify|verify} messages.
     * @param message mat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat6 message, length delimited. Does not implicitly {@link mat6.verify|verify} messages.
     * @param message mat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat6;

    /**
     * Decodes a mat6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat6;

    /**
     * Verifies a mat6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat6
     */
    public static fromObject(object: { [k: string]: any }): mat6;

    /**
     * Creates a plain object from a mat6 message. Also converts values to other types if specified.
     * @param message mat6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat6. */
export interface Ifmat6 {

    /** fmat6 s0 */
    s0?: (Ifvec6|null);

    /** fmat6 s1 */
    s1?: (Ifvec6|null);

    /** fmat6 s2 */
    s2?: (Ifvec6|null);

    /** fmat6 s3 */
    s3?: (Ifvec6|null);

    /** fmat6 s4 */
    s4?: (Ifvec6|null);

    /** fmat6 s5 */
    s5?: (Ifvec6|null);
}

/** Represents a fmat6. */
export class fmat6 implements Ifmat6 {

    /**
     * Constructs a new fmat6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat6);

    /** fmat6 s0. */
    public s0?: (Ifvec6|null);

    /** fmat6 s1. */
    public s1?: (Ifvec6|null);

    /** fmat6 s2. */
    public s2?: (Ifvec6|null);

    /** fmat6 s3. */
    public s3?: (Ifvec6|null);

    /** fmat6 s4. */
    public s4?: (Ifvec6|null);

    /** fmat6 s5. */
    public s5?: (Ifvec6|null);

    /**
     * Creates a new fmat6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat6 instance
     */
    public static create(properties?: Ifmat6): fmat6;

    /**
     * Encodes the specified fmat6 message. Does not implicitly {@link fmat6.verify|verify} messages.
     * @param message fmat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat6 message, length delimited. Does not implicitly {@link fmat6.verify|verify} messages.
     * @param message fmat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat6;

    /**
     * Decodes a fmat6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat6;

    /**
     * Verifies a fmat6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat6
     */
    public static fromObject(object: { [k: string]: any }): fmat6;

    /**
     * Creates a plain object from a fmat6 message. Also converts values to other types if specified.
     * @param message fmat6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat6. */
export interface Iimat6 {

    /** imat6 s0 */
    s0?: (Iivec6|null);

    /** imat6 s1 */
    s1?: (Iivec6|null);

    /** imat6 s2 */
    s2?: (Iivec6|null);

    /** imat6 s3 */
    s3?: (Iivec6|null);

    /** imat6 s4 */
    s4?: (Iivec6|null);

    /** imat6 s5 */
    s5?: (Iivec6|null);
}

/** Represents an imat6. */
export class imat6 implements Iimat6 {

    /**
     * Constructs a new imat6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat6);

    /** imat6 s0. */
    public s0?: (Iivec6|null);

    /** imat6 s1. */
    public s1?: (Iivec6|null);

    /** imat6 s2. */
    public s2?: (Iivec6|null);

    /** imat6 s3. */
    public s3?: (Iivec6|null);

    /** imat6 s4. */
    public s4?: (Iivec6|null);

    /** imat6 s5. */
    public s5?: (Iivec6|null);

    /**
     * Creates a new imat6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat6 instance
     */
    public static create(properties?: Iimat6): imat6;

    /**
     * Encodes the specified imat6 message. Does not implicitly {@link imat6.verify|verify} messages.
     * @param message imat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat6 message, length delimited. Does not implicitly {@link imat6.verify|verify} messages.
     * @param message imat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat6;

    /**
     * Decodes an imat6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat6;

    /**
     * Verifies an imat6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat6
     */
    public static fromObject(object: { [k: string]: any }): imat6;

    /**
     * Creates a plain object from an imat6 message. Also converts values to other types if specified.
     * @param message imat6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat6. */
export interface Iumat6 {

    /** umat6 s0 */
    s0?: (Iuvec6|null);

    /** umat6 s1 */
    s1?: (Iuvec6|null);

    /** umat6 s2 */
    s2?: (Iuvec6|null);

    /** umat6 s3 */
    s3?: (Iuvec6|null);

    /** umat6 s4 */
    s4?: (Iuvec6|null);

    /** umat6 s5 */
    s5?: (Iuvec6|null);
}

/** Represents an umat6. */
export class umat6 implements Iumat6 {

    /**
     * Constructs a new umat6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat6);

    /** umat6 s0. */
    public s0?: (Iuvec6|null);

    /** umat6 s1. */
    public s1?: (Iuvec6|null);

    /** umat6 s2. */
    public s2?: (Iuvec6|null);

    /** umat6 s3. */
    public s3?: (Iuvec6|null);

    /** umat6 s4. */
    public s4?: (Iuvec6|null);

    /** umat6 s5. */
    public s5?: (Iuvec6|null);

    /**
     * Creates a new umat6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat6 instance
     */
    public static create(properties?: Iumat6): umat6;

    /**
     * Encodes the specified umat6 message. Does not implicitly {@link umat6.verify|verify} messages.
     * @param message umat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat6 message, length delimited. Does not implicitly {@link umat6.verify|verify} messages.
     * @param message umat6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat6;

    /**
     * Decodes an umat6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat6;

    /**
     * Verifies an umat6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat6
     */
    public static fromObject(object: { [k: string]: any }): umat6;

    /**
     * Creates a plain object from an umat6 message. Also converts values to other types if specified.
     * @param message umat6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat7. */
export interface Imat7 {

    /** mat7 s0 */
    s0?: (Ivec7|null);

    /** mat7 s1 */
    s1?: (Ivec7|null);

    /** mat7 s2 */
    s2?: (Ivec7|null);

    /** mat7 s3 */
    s3?: (Ivec7|null);

    /** mat7 s4 */
    s4?: (Ivec7|null);

    /** mat7 s5 */
    s5?: (Ivec7|null);

    /** mat7 s6 */
    s6?: (Ivec7|null);
}

/** Represents a mat7. */
export class mat7 implements Imat7 {

    /**
     * Constructs a new mat7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat7);

    /** mat7 s0. */
    public s0?: (Ivec7|null);

    /** mat7 s1. */
    public s1?: (Ivec7|null);

    /** mat7 s2. */
    public s2?: (Ivec7|null);

    /** mat7 s3. */
    public s3?: (Ivec7|null);

    /** mat7 s4. */
    public s4?: (Ivec7|null);

    /** mat7 s5. */
    public s5?: (Ivec7|null);

    /** mat7 s6. */
    public s6?: (Ivec7|null);

    /**
     * Creates a new mat7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat7 instance
     */
    public static create(properties?: Imat7): mat7;

    /**
     * Encodes the specified mat7 message. Does not implicitly {@link mat7.verify|verify} messages.
     * @param message mat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat7 message, length delimited. Does not implicitly {@link mat7.verify|verify} messages.
     * @param message mat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat7;

    /**
     * Decodes a mat7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat7;

    /**
     * Verifies a mat7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat7
     */
    public static fromObject(object: { [k: string]: any }): mat7;

    /**
     * Creates a plain object from a mat7 message. Also converts values to other types if specified.
     * @param message mat7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat7. */
export interface Ifmat7 {

    /** fmat7 s0 */
    s0?: (Ifvec7|null);

    /** fmat7 s1 */
    s1?: (Ifvec7|null);

    /** fmat7 s2 */
    s2?: (Ifvec7|null);

    /** fmat7 s3 */
    s3?: (Ifvec7|null);

    /** fmat7 s4 */
    s4?: (Ifvec7|null);

    /** fmat7 s5 */
    s5?: (Ifvec7|null);

    /** fmat7 s6 */
    s6?: (Ifvec7|null);
}

/** Represents a fmat7. */
export class fmat7 implements Ifmat7 {

    /**
     * Constructs a new fmat7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat7);

    /** fmat7 s0. */
    public s0?: (Ifvec7|null);

    /** fmat7 s1. */
    public s1?: (Ifvec7|null);

    /** fmat7 s2. */
    public s2?: (Ifvec7|null);

    /** fmat7 s3. */
    public s3?: (Ifvec7|null);

    /** fmat7 s4. */
    public s4?: (Ifvec7|null);

    /** fmat7 s5. */
    public s5?: (Ifvec7|null);

    /** fmat7 s6. */
    public s6?: (Ifvec7|null);

    /**
     * Creates a new fmat7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat7 instance
     */
    public static create(properties?: Ifmat7): fmat7;

    /**
     * Encodes the specified fmat7 message. Does not implicitly {@link fmat7.verify|verify} messages.
     * @param message fmat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat7 message, length delimited. Does not implicitly {@link fmat7.verify|verify} messages.
     * @param message fmat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat7;

    /**
     * Decodes a fmat7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat7;

    /**
     * Verifies a fmat7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat7
     */
    public static fromObject(object: { [k: string]: any }): fmat7;

    /**
     * Creates a plain object from a fmat7 message. Also converts values to other types if specified.
     * @param message fmat7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat7. */
export interface Iimat7 {

    /** imat7 s0 */
    s0?: (Iivec7|null);

    /** imat7 s1 */
    s1?: (Iivec7|null);

    /** imat7 s2 */
    s2?: (Iivec7|null);

    /** imat7 s3 */
    s3?: (Iivec7|null);

    /** imat7 s4 */
    s4?: (Iivec7|null);

    /** imat7 s5 */
    s5?: (Iivec7|null);

    /** imat7 s6 */
    s6?: (Iivec7|null);
}

/** Represents an imat7. */
export class imat7 implements Iimat7 {

    /**
     * Constructs a new imat7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat7);

    /** imat7 s0. */
    public s0?: (Iivec7|null);

    /** imat7 s1. */
    public s1?: (Iivec7|null);

    /** imat7 s2. */
    public s2?: (Iivec7|null);

    /** imat7 s3. */
    public s3?: (Iivec7|null);

    /** imat7 s4. */
    public s4?: (Iivec7|null);

    /** imat7 s5. */
    public s5?: (Iivec7|null);

    /** imat7 s6. */
    public s6?: (Iivec7|null);

    /**
     * Creates a new imat7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat7 instance
     */
    public static create(properties?: Iimat7): imat7;

    /**
     * Encodes the specified imat7 message. Does not implicitly {@link imat7.verify|verify} messages.
     * @param message imat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat7 message, length delimited. Does not implicitly {@link imat7.verify|verify} messages.
     * @param message imat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat7;

    /**
     * Decodes an imat7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat7;

    /**
     * Verifies an imat7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat7
     */
    public static fromObject(object: { [k: string]: any }): imat7;

    /**
     * Creates a plain object from an imat7 message. Also converts values to other types if specified.
     * @param message imat7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat7. */
export interface Iumat7 {

    /** umat7 s0 */
    s0?: (Iuvec7|null);

    /** umat7 s1 */
    s1?: (Iuvec7|null);

    /** umat7 s2 */
    s2?: (Iuvec7|null);

    /** umat7 s3 */
    s3?: (Iuvec7|null);

    /** umat7 s4 */
    s4?: (Iuvec7|null);

    /** umat7 s5 */
    s5?: (Iuvec7|null);

    /** umat7 s6 */
    s6?: (Iuvec7|null);
}

/** Represents an umat7. */
export class umat7 implements Iumat7 {

    /**
     * Constructs a new umat7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat7);

    /** umat7 s0. */
    public s0?: (Iuvec7|null);

    /** umat7 s1. */
    public s1?: (Iuvec7|null);

    /** umat7 s2. */
    public s2?: (Iuvec7|null);

    /** umat7 s3. */
    public s3?: (Iuvec7|null);

    /** umat7 s4. */
    public s4?: (Iuvec7|null);

    /** umat7 s5. */
    public s5?: (Iuvec7|null);

    /** umat7 s6. */
    public s6?: (Iuvec7|null);

    /**
     * Creates a new umat7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat7 instance
     */
    public static create(properties?: Iumat7): umat7;

    /**
     * Encodes the specified umat7 message. Does not implicitly {@link umat7.verify|verify} messages.
     * @param message umat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat7 message, length delimited. Does not implicitly {@link umat7.verify|verify} messages.
     * @param message umat7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat7;

    /**
     * Decodes an umat7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat7;

    /**
     * Verifies an umat7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat7
     */
    public static fromObject(object: { [k: string]: any }): umat7;

    /**
     * Creates a plain object from an umat7 message. Also converts values to other types if specified.
     * @param message umat7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat8. */
export interface Imat8 {

    /** mat8 s0 */
    s0?: (Ivec8|null);

    /** mat8 s1 */
    s1?: (Ivec8|null);

    /** mat8 s2 */
    s2?: (Ivec8|null);

    /** mat8 s3 */
    s3?: (Ivec8|null);

    /** mat8 s4 */
    s4?: (Ivec8|null);

    /** mat8 s5 */
    s5?: (Ivec8|null);

    /** mat8 s6 */
    s6?: (Ivec8|null);

    /** mat8 s7 */
    s7?: (Ivec8|null);
}

/** Represents a mat8. */
export class mat8 implements Imat8 {

    /**
     * Constructs a new mat8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat8);

    /** mat8 s0. */
    public s0?: (Ivec8|null);

    /** mat8 s1. */
    public s1?: (Ivec8|null);

    /** mat8 s2. */
    public s2?: (Ivec8|null);

    /** mat8 s3. */
    public s3?: (Ivec8|null);

    /** mat8 s4. */
    public s4?: (Ivec8|null);

    /** mat8 s5. */
    public s5?: (Ivec8|null);

    /** mat8 s6. */
    public s6?: (Ivec8|null);

    /** mat8 s7. */
    public s7?: (Ivec8|null);

    /**
     * Creates a new mat8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat8 instance
     */
    public static create(properties?: Imat8): mat8;

    /**
     * Encodes the specified mat8 message. Does not implicitly {@link mat8.verify|verify} messages.
     * @param message mat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat8 message, length delimited. Does not implicitly {@link mat8.verify|verify} messages.
     * @param message mat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat8;

    /**
     * Decodes a mat8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat8;

    /**
     * Verifies a mat8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat8
     */
    public static fromObject(object: { [k: string]: any }): mat8;

    /**
     * Creates a plain object from a mat8 message. Also converts values to other types if specified.
     * @param message mat8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat8. */
export interface Ifmat8 {

    /** fmat8 s0 */
    s0?: (Ifvec8|null);

    /** fmat8 s1 */
    s1?: (Ifvec8|null);

    /** fmat8 s2 */
    s2?: (Ifvec8|null);

    /** fmat8 s3 */
    s3?: (Ifvec8|null);

    /** fmat8 s4 */
    s4?: (Ifvec8|null);

    /** fmat8 s5 */
    s5?: (Ifvec8|null);

    /** fmat8 s6 */
    s6?: (Ifvec8|null);

    /** fmat8 s7 */
    s7?: (Ifvec8|null);
}

/** Represents a fmat8. */
export class fmat8 implements Ifmat8 {

    /**
     * Constructs a new fmat8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat8);

    /** fmat8 s0. */
    public s0?: (Ifvec8|null);

    /** fmat8 s1. */
    public s1?: (Ifvec8|null);

    /** fmat8 s2. */
    public s2?: (Ifvec8|null);

    /** fmat8 s3. */
    public s3?: (Ifvec8|null);

    /** fmat8 s4. */
    public s4?: (Ifvec8|null);

    /** fmat8 s5. */
    public s5?: (Ifvec8|null);

    /** fmat8 s6. */
    public s6?: (Ifvec8|null);

    /** fmat8 s7. */
    public s7?: (Ifvec8|null);

    /**
     * Creates a new fmat8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat8 instance
     */
    public static create(properties?: Ifmat8): fmat8;

    /**
     * Encodes the specified fmat8 message. Does not implicitly {@link fmat8.verify|verify} messages.
     * @param message fmat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat8 message, length delimited. Does not implicitly {@link fmat8.verify|verify} messages.
     * @param message fmat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat8;

    /**
     * Decodes a fmat8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat8;

    /**
     * Verifies a fmat8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat8
     */
    public static fromObject(object: { [k: string]: any }): fmat8;

    /**
     * Creates a plain object from a fmat8 message. Also converts values to other types if specified.
     * @param message fmat8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat8. */
export interface Iimat8 {

    /** imat8 s0 */
    s0?: (Iivec8|null);

    /** imat8 s1 */
    s1?: (Iivec8|null);

    /** imat8 s2 */
    s2?: (Iivec8|null);

    /** imat8 s3 */
    s3?: (Iivec8|null);

    /** imat8 s4 */
    s4?: (Iivec8|null);

    /** imat8 s5 */
    s5?: (Iivec8|null);

    /** imat8 s6 */
    s6?: (Iivec8|null);

    /** imat8 s7 */
    s7?: (Iivec8|null);
}

/** Represents an imat8. */
export class imat8 implements Iimat8 {

    /**
     * Constructs a new imat8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat8);

    /** imat8 s0. */
    public s0?: (Iivec8|null);

    /** imat8 s1. */
    public s1?: (Iivec8|null);

    /** imat8 s2. */
    public s2?: (Iivec8|null);

    /** imat8 s3. */
    public s3?: (Iivec8|null);

    /** imat8 s4. */
    public s4?: (Iivec8|null);

    /** imat8 s5. */
    public s5?: (Iivec8|null);

    /** imat8 s6. */
    public s6?: (Iivec8|null);

    /** imat8 s7. */
    public s7?: (Iivec8|null);

    /**
     * Creates a new imat8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat8 instance
     */
    public static create(properties?: Iimat8): imat8;

    /**
     * Encodes the specified imat8 message. Does not implicitly {@link imat8.verify|verify} messages.
     * @param message imat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat8 message, length delimited. Does not implicitly {@link imat8.verify|verify} messages.
     * @param message imat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat8;

    /**
     * Decodes an imat8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat8;

    /**
     * Verifies an imat8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat8
     */
    public static fromObject(object: { [k: string]: any }): imat8;

    /**
     * Creates a plain object from an imat8 message. Also converts values to other types if specified.
     * @param message imat8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat8. */
export interface Iumat8 {

    /** umat8 s0 */
    s0?: (Iuvec8|null);

    /** umat8 s1 */
    s1?: (Iuvec8|null);

    /** umat8 s2 */
    s2?: (Iuvec8|null);

    /** umat8 s3 */
    s3?: (Iuvec8|null);

    /** umat8 s4 */
    s4?: (Iuvec8|null);

    /** umat8 s5 */
    s5?: (Iuvec8|null);

    /** umat8 s6 */
    s6?: (Iuvec8|null);

    /** umat8 s7 */
    s7?: (Iuvec8|null);
}

/** Represents an umat8. */
export class umat8 implements Iumat8 {

    /**
     * Constructs a new umat8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat8);

    /** umat8 s0. */
    public s0?: (Iuvec8|null);

    /** umat8 s1. */
    public s1?: (Iuvec8|null);

    /** umat8 s2. */
    public s2?: (Iuvec8|null);

    /** umat8 s3. */
    public s3?: (Iuvec8|null);

    /** umat8 s4. */
    public s4?: (Iuvec8|null);

    /** umat8 s5. */
    public s5?: (Iuvec8|null);

    /** umat8 s6. */
    public s6?: (Iuvec8|null);

    /** umat8 s7. */
    public s7?: (Iuvec8|null);

    /**
     * Creates a new umat8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat8 instance
     */
    public static create(properties?: Iumat8): umat8;

    /**
     * Encodes the specified umat8 message. Does not implicitly {@link umat8.verify|verify} messages.
     * @param message umat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat8 message, length delimited. Does not implicitly {@link umat8.verify|verify} messages.
     * @param message umat8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat8;

    /**
     * Decodes an umat8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat8;

    /**
     * Verifies an umat8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat8
     */
    public static fromObject(object: { [k: string]: any }): umat8;

    /**
     * Creates a plain object from an umat8 message. Also converts values to other types if specified.
     * @param message umat8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat9. */
export interface Imat9 {

    /** mat9 s0 */
    s0?: (Ivec9|null);

    /** mat9 s1 */
    s1?: (Ivec9|null);

    /** mat9 s2 */
    s2?: (Ivec9|null);

    /** mat9 s3 */
    s3?: (Ivec9|null);

    /** mat9 s4 */
    s4?: (Ivec9|null);

    /** mat9 s5 */
    s5?: (Ivec9|null);

    /** mat9 s6 */
    s6?: (Ivec9|null);

    /** mat9 s7 */
    s7?: (Ivec9|null);

    /** mat9 s8 */
    s8?: (Ivec9|null);
}

/** Represents a mat9. */
export class mat9 implements Imat9 {

    /**
     * Constructs a new mat9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat9);

    /** mat9 s0. */
    public s0?: (Ivec9|null);

    /** mat9 s1. */
    public s1?: (Ivec9|null);

    /** mat9 s2. */
    public s2?: (Ivec9|null);

    /** mat9 s3. */
    public s3?: (Ivec9|null);

    /** mat9 s4. */
    public s4?: (Ivec9|null);

    /** mat9 s5. */
    public s5?: (Ivec9|null);

    /** mat9 s6. */
    public s6?: (Ivec9|null);

    /** mat9 s7. */
    public s7?: (Ivec9|null);

    /** mat9 s8. */
    public s8?: (Ivec9|null);

    /**
     * Creates a new mat9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat9 instance
     */
    public static create(properties?: Imat9): mat9;

    /**
     * Encodes the specified mat9 message. Does not implicitly {@link mat9.verify|verify} messages.
     * @param message mat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat9 message, length delimited. Does not implicitly {@link mat9.verify|verify} messages.
     * @param message mat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat9;

    /**
     * Decodes a mat9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat9;

    /**
     * Verifies a mat9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat9
     */
    public static fromObject(object: { [k: string]: any }): mat9;

    /**
     * Creates a plain object from a mat9 message. Also converts values to other types if specified.
     * @param message mat9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat9. */
export interface Ifmat9 {

    /** fmat9 s0 */
    s0?: (Ifvec9|null);

    /** fmat9 s1 */
    s1?: (Ifvec9|null);

    /** fmat9 s2 */
    s2?: (Ifvec9|null);

    /** fmat9 s3 */
    s3?: (Ifvec9|null);

    /** fmat9 s4 */
    s4?: (Ifvec9|null);

    /** fmat9 s5 */
    s5?: (Ifvec9|null);

    /** fmat9 s6 */
    s6?: (Ifvec9|null);

    /** fmat9 s7 */
    s7?: (Ifvec9|null);

    /** fmat9 s8 */
    s8?: (Ifvec9|null);
}

/** Represents a fmat9. */
export class fmat9 implements Ifmat9 {

    /**
     * Constructs a new fmat9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat9);

    /** fmat9 s0. */
    public s0?: (Ifvec9|null);

    /** fmat9 s1. */
    public s1?: (Ifvec9|null);

    /** fmat9 s2. */
    public s2?: (Ifvec9|null);

    /** fmat9 s3. */
    public s3?: (Ifvec9|null);

    /** fmat9 s4. */
    public s4?: (Ifvec9|null);

    /** fmat9 s5. */
    public s5?: (Ifvec9|null);

    /** fmat9 s6. */
    public s6?: (Ifvec9|null);

    /** fmat9 s7. */
    public s7?: (Ifvec9|null);

    /** fmat9 s8. */
    public s8?: (Ifvec9|null);

    /**
     * Creates a new fmat9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat9 instance
     */
    public static create(properties?: Ifmat9): fmat9;

    /**
     * Encodes the specified fmat9 message. Does not implicitly {@link fmat9.verify|verify} messages.
     * @param message fmat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat9 message, length delimited. Does not implicitly {@link fmat9.verify|verify} messages.
     * @param message fmat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat9;

    /**
     * Decodes a fmat9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat9;

    /**
     * Verifies a fmat9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat9
     */
    public static fromObject(object: { [k: string]: any }): fmat9;

    /**
     * Creates a plain object from a fmat9 message. Also converts values to other types if specified.
     * @param message fmat9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat9. */
export interface Iimat9 {

    /** imat9 s0 */
    s0?: (Iivec9|null);

    /** imat9 s1 */
    s1?: (Iivec9|null);

    /** imat9 s2 */
    s2?: (Iivec9|null);

    /** imat9 s3 */
    s3?: (Iivec9|null);

    /** imat9 s4 */
    s4?: (Iivec9|null);

    /** imat9 s5 */
    s5?: (Iivec9|null);

    /** imat9 s6 */
    s6?: (Iivec9|null);

    /** imat9 s7 */
    s7?: (Iivec9|null);

    /** imat9 s8 */
    s8?: (Iivec9|null);
}

/** Represents an imat9. */
export class imat9 implements Iimat9 {

    /**
     * Constructs a new imat9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat9);

    /** imat9 s0. */
    public s0?: (Iivec9|null);

    /** imat9 s1. */
    public s1?: (Iivec9|null);

    /** imat9 s2. */
    public s2?: (Iivec9|null);

    /** imat9 s3. */
    public s3?: (Iivec9|null);

    /** imat9 s4. */
    public s4?: (Iivec9|null);

    /** imat9 s5. */
    public s5?: (Iivec9|null);

    /** imat9 s6. */
    public s6?: (Iivec9|null);

    /** imat9 s7. */
    public s7?: (Iivec9|null);

    /** imat9 s8. */
    public s8?: (Iivec9|null);

    /**
     * Creates a new imat9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat9 instance
     */
    public static create(properties?: Iimat9): imat9;

    /**
     * Encodes the specified imat9 message. Does not implicitly {@link imat9.verify|verify} messages.
     * @param message imat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat9 message, length delimited. Does not implicitly {@link imat9.verify|verify} messages.
     * @param message imat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat9;

    /**
     * Decodes an imat9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat9;

    /**
     * Verifies an imat9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat9
     */
    public static fromObject(object: { [k: string]: any }): imat9;

    /**
     * Creates a plain object from an imat9 message. Also converts values to other types if specified.
     * @param message imat9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat9. */
export interface Iumat9 {

    /** umat9 s0 */
    s0?: (Iuvec9|null);

    /** umat9 s1 */
    s1?: (Iuvec9|null);

    /** umat9 s2 */
    s2?: (Iuvec9|null);

    /** umat9 s3 */
    s3?: (Iuvec9|null);

    /** umat9 s4 */
    s4?: (Iuvec9|null);

    /** umat9 s5 */
    s5?: (Iuvec9|null);

    /** umat9 s6 */
    s6?: (Iuvec9|null);

    /** umat9 s7 */
    s7?: (Iuvec9|null);

    /** umat9 s8 */
    s8?: (Iuvec9|null);
}

/** Represents an umat9. */
export class umat9 implements Iumat9 {

    /**
     * Constructs a new umat9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat9);

    /** umat9 s0. */
    public s0?: (Iuvec9|null);

    /** umat9 s1. */
    public s1?: (Iuvec9|null);

    /** umat9 s2. */
    public s2?: (Iuvec9|null);

    /** umat9 s3. */
    public s3?: (Iuvec9|null);

    /** umat9 s4. */
    public s4?: (Iuvec9|null);

    /** umat9 s5. */
    public s5?: (Iuvec9|null);

    /** umat9 s6. */
    public s6?: (Iuvec9|null);

    /** umat9 s7. */
    public s7?: (Iuvec9|null);

    /** umat9 s8. */
    public s8?: (Iuvec9|null);

    /**
     * Creates a new umat9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat9 instance
     */
    public static create(properties?: Iumat9): umat9;

    /**
     * Encodes the specified umat9 message. Does not implicitly {@link umat9.verify|verify} messages.
     * @param message umat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat9 message, length delimited. Does not implicitly {@link umat9.verify|verify} messages.
     * @param message umat9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat9;

    /**
     * Decodes an umat9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat9;

    /**
     * Verifies an umat9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat9
     */
    public static fromObject(object: { [k: string]: any }): umat9;

    /**
     * Creates a plain object from an umat9 message. Also converts values to other types if specified.
     * @param message umat9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat10. */
export interface Imat10 {

    /** mat10 s0 */
    s0?: (Ivec10|null);

    /** mat10 s1 */
    s1?: (Ivec10|null);

    /** mat10 s2 */
    s2?: (Ivec10|null);

    /** mat10 s3 */
    s3?: (Ivec10|null);

    /** mat10 s4 */
    s4?: (Ivec10|null);

    /** mat10 s5 */
    s5?: (Ivec10|null);

    /** mat10 s6 */
    s6?: (Ivec10|null);

    /** mat10 s7 */
    s7?: (Ivec10|null);

    /** mat10 s8 */
    s8?: (Ivec10|null);

    /** mat10 s9 */
    s9?: (Ivec10|null);
}

/** Represents a mat10. */
export class mat10 implements Imat10 {

    /**
     * Constructs a new mat10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat10);

    /** mat10 s0. */
    public s0?: (Ivec10|null);

    /** mat10 s1. */
    public s1?: (Ivec10|null);

    /** mat10 s2. */
    public s2?: (Ivec10|null);

    /** mat10 s3. */
    public s3?: (Ivec10|null);

    /** mat10 s4. */
    public s4?: (Ivec10|null);

    /** mat10 s5. */
    public s5?: (Ivec10|null);

    /** mat10 s6. */
    public s6?: (Ivec10|null);

    /** mat10 s7. */
    public s7?: (Ivec10|null);

    /** mat10 s8. */
    public s8?: (Ivec10|null);

    /** mat10 s9. */
    public s9?: (Ivec10|null);

    /**
     * Creates a new mat10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat10 instance
     */
    public static create(properties?: Imat10): mat10;

    /**
     * Encodes the specified mat10 message. Does not implicitly {@link mat10.verify|verify} messages.
     * @param message mat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat10 message, length delimited. Does not implicitly {@link mat10.verify|verify} messages.
     * @param message mat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat10;

    /**
     * Decodes a mat10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat10;

    /**
     * Verifies a mat10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat10
     */
    public static fromObject(object: { [k: string]: any }): mat10;

    /**
     * Creates a plain object from a mat10 message. Also converts values to other types if specified.
     * @param message mat10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat10. */
export interface Ifmat10 {

    /** fmat10 s0 */
    s0?: (Ifvec10|null);

    /** fmat10 s1 */
    s1?: (Ifvec10|null);

    /** fmat10 s2 */
    s2?: (Ifvec10|null);

    /** fmat10 s3 */
    s3?: (Ifvec10|null);

    /** fmat10 s4 */
    s4?: (Ifvec10|null);

    /** fmat10 s5 */
    s5?: (Ifvec10|null);

    /** fmat10 s6 */
    s6?: (Ifvec10|null);

    /** fmat10 s7 */
    s7?: (Ifvec10|null);

    /** fmat10 s8 */
    s8?: (Ifvec10|null);

    /** fmat10 s9 */
    s9?: (Ifvec10|null);
}

/** Represents a fmat10. */
export class fmat10 implements Ifmat10 {

    /**
     * Constructs a new fmat10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat10);

    /** fmat10 s0. */
    public s0?: (Ifvec10|null);

    /** fmat10 s1. */
    public s1?: (Ifvec10|null);

    /** fmat10 s2. */
    public s2?: (Ifvec10|null);

    /** fmat10 s3. */
    public s3?: (Ifvec10|null);

    /** fmat10 s4. */
    public s4?: (Ifvec10|null);

    /** fmat10 s5. */
    public s5?: (Ifvec10|null);

    /** fmat10 s6. */
    public s6?: (Ifvec10|null);

    /** fmat10 s7. */
    public s7?: (Ifvec10|null);

    /** fmat10 s8. */
    public s8?: (Ifvec10|null);

    /** fmat10 s9. */
    public s9?: (Ifvec10|null);

    /**
     * Creates a new fmat10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat10 instance
     */
    public static create(properties?: Ifmat10): fmat10;

    /**
     * Encodes the specified fmat10 message. Does not implicitly {@link fmat10.verify|verify} messages.
     * @param message fmat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat10 message, length delimited. Does not implicitly {@link fmat10.verify|verify} messages.
     * @param message fmat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat10;

    /**
     * Decodes a fmat10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat10;

    /**
     * Verifies a fmat10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat10
     */
    public static fromObject(object: { [k: string]: any }): fmat10;

    /**
     * Creates a plain object from a fmat10 message. Also converts values to other types if specified.
     * @param message fmat10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat10. */
export interface Iimat10 {

    /** imat10 s0 */
    s0?: (Iivec10|null);

    /** imat10 s1 */
    s1?: (Iivec10|null);

    /** imat10 s2 */
    s2?: (Iivec10|null);

    /** imat10 s3 */
    s3?: (Iivec10|null);

    /** imat10 s4 */
    s4?: (Iivec10|null);

    /** imat10 s5 */
    s5?: (Iivec10|null);

    /** imat10 s6 */
    s6?: (Iivec10|null);

    /** imat10 s7 */
    s7?: (Iivec10|null);

    /** imat10 s8 */
    s8?: (Iivec10|null);

    /** imat10 s9 */
    s9?: (Iivec10|null);
}

/** Represents an imat10. */
export class imat10 implements Iimat10 {

    /**
     * Constructs a new imat10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat10);

    /** imat10 s0. */
    public s0?: (Iivec10|null);

    /** imat10 s1. */
    public s1?: (Iivec10|null);

    /** imat10 s2. */
    public s2?: (Iivec10|null);

    /** imat10 s3. */
    public s3?: (Iivec10|null);

    /** imat10 s4. */
    public s4?: (Iivec10|null);

    /** imat10 s5. */
    public s5?: (Iivec10|null);

    /** imat10 s6. */
    public s6?: (Iivec10|null);

    /** imat10 s7. */
    public s7?: (Iivec10|null);

    /** imat10 s8. */
    public s8?: (Iivec10|null);

    /** imat10 s9. */
    public s9?: (Iivec10|null);

    /**
     * Creates a new imat10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat10 instance
     */
    public static create(properties?: Iimat10): imat10;

    /**
     * Encodes the specified imat10 message. Does not implicitly {@link imat10.verify|verify} messages.
     * @param message imat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat10 message, length delimited. Does not implicitly {@link imat10.verify|verify} messages.
     * @param message imat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat10;

    /**
     * Decodes an imat10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat10;

    /**
     * Verifies an imat10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat10
     */
    public static fromObject(object: { [k: string]: any }): imat10;

    /**
     * Creates a plain object from an imat10 message. Also converts values to other types if specified.
     * @param message imat10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat10. */
export interface Iumat10 {

    /** umat10 s0 */
    s0?: (Iuvec10|null);

    /** umat10 s1 */
    s1?: (Iuvec10|null);

    /** umat10 s2 */
    s2?: (Iuvec10|null);

    /** umat10 s3 */
    s3?: (Iuvec10|null);

    /** umat10 s4 */
    s4?: (Iuvec10|null);

    /** umat10 s5 */
    s5?: (Iuvec10|null);

    /** umat10 s6 */
    s6?: (Iuvec10|null);

    /** umat10 s7 */
    s7?: (Iuvec10|null);

    /** umat10 s8 */
    s8?: (Iuvec10|null);

    /** umat10 s9 */
    s9?: (Iuvec10|null);
}

/** Represents an umat10. */
export class umat10 implements Iumat10 {

    /**
     * Constructs a new umat10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat10);

    /** umat10 s0. */
    public s0?: (Iuvec10|null);

    /** umat10 s1. */
    public s1?: (Iuvec10|null);

    /** umat10 s2. */
    public s2?: (Iuvec10|null);

    /** umat10 s3. */
    public s3?: (Iuvec10|null);

    /** umat10 s4. */
    public s4?: (Iuvec10|null);

    /** umat10 s5. */
    public s5?: (Iuvec10|null);

    /** umat10 s6. */
    public s6?: (Iuvec10|null);

    /** umat10 s7. */
    public s7?: (Iuvec10|null);

    /** umat10 s8. */
    public s8?: (Iuvec10|null);

    /** umat10 s9. */
    public s9?: (Iuvec10|null);

    /**
     * Creates a new umat10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat10 instance
     */
    public static create(properties?: Iumat10): umat10;

    /**
     * Encodes the specified umat10 message. Does not implicitly {@link umat10.verify|verify} messages.
     * @param message umat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat10 message, length delimited. Does not implicitly {@link umat10.verify|verify} messages.
     * @param message umat10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat10;

    /**
     * Decodes an umat10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat10;

    /**
     * Verifies an umat10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat10
     */
    public static fromObject(object: { [k: string]: any }): umat10;

    /**
     * Creates a plain object from an umat10 message. Also converts values to other types if specified.
     * @param message umat10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat11. */
export interface Imat11 {

    /** mat11 s0 */
    s0?: (Ivec11|null);

    /** mat11 s1 */
    s1?: (Ivec11|null);

    /** mat11 s2 */
    s2?: (Ivec11|null);

    /** mat11 s3 */
    s3?: (Ivec11|null);

    /** mat11 s4 */
    s4?: (Ivec11|null);

    /** mat11 s5 */
    s5?: (Ivec11|null);

    /** mat11 s6 */
    s6?: (Ivec11|null);

    /** mat11 s7 */
    s7?: (Ivec11|null);

    /** mat11 s8 */
    s8?: (Ivec11|null);

    /** mat11 s9 */
    s9?: (Ivec11|null);

    /** mat11 sa */
    sa?: (Ivec11|null);
}

/** Represents a mat11. */
export class mat11 implements Imat11 {

    /**
     * Constructs a new mat11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat11);

    /** mat11 s0. */
    public s0?: (Ivec11|null);

    /** mat11 s1. */
    public s1?: (Ivec11|null);

    /** mat11 s2. */
    public s2?: (Ivec11|null);

    /** mat11 s3. */
    public s3?: (Ivec11|null);

    /** mat11 s4. */
    public s4?: (Ivec11|null);

    /** mat11 s5. */
    public s5?: (Ivec11|null);

    /** mat11 s6. */
    public s6?: (Ivec11|null);

    /** mat11 s7. */
    public s7?: (Ivec11|null);

    /** mat11 s8. */
    public s8?: (Ivec11|null);

    /** mat11 s9. */
    public s9?: (Ivec11|null);

    /** mat11 sa. */
    public sa?: (Ivec11|null);

    /**
     * Creates a new mat11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat11 instance
     */
    public static create(properties?: Imat11): mat11;

    /**
     * Encodes the specified mat11 message. Does not implicitly {@link mat11.verify|verify} messages.
     * @param message mat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat11 message, length delimited. Does not implicitly {@link mat11.verify|verify} messages.
     * @param message mat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat11;

    /**
     * Decodes a mat11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat11;

    /**
     * Verifies a mat11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat11
     */
    public static fromObject(object: { [k: string]: any }): mat11;

    /**
     * Creates a plain object from a mat11 message. Also converts values to other types if specified.
     * @param message mat11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat11. */
export interface Ifmat11 {

    /** fmat11 s0 */
    s0?: (Ifvec11|null);

    /** fmat11 s1 */
    s1?: (Ifvec11|null);

    /** fmat11 s2 */
    s2?: (Ifvec11|null);

    /** fmat11 s3 */
    s3?: (Ifvec11|null);

    /** fmat11 s4 */
    s4?: (Ifvec11|null);

    /** fmat11 s5 */
    s5?: (Ifvec11|null);

    /** fmat11 s6 */
    s6?: (Ifvec11|null);

    /** fmat11 s7 */
    s7?: (Ifvec11|null);

    /** fmat11 s8 */
    s8?: (Ifvec11|null);

    /** fmat11 s9 */
    s9?: (Ifvec11|null);

    /** fmat11 sa */
    sa?: (Ifvec11|null);
}

/** Represents a fmat11. */
export class fmat11 implements Ifmat11 {

    /**
     * Constructs a new fmat11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat11);

    /** fmat11 s0. */
    public s0?: (Ifvec11|null);

    /** fmat11 s1. */
    public s1?: (Ifvec11|null);

    /** fmat11 s2. */
    public s2?: (Ifvec11|null);

    /** fmat11 s3. */
    public s3?: (Ifvec11|null);

    /** fmat11 s4. */
    public s4?: (Ifvec11|null);

    /** fmat11 s5. */
    public s5?: (Ifvec11|null);

    /** fmat11 s6. */
    public s6?: (Ifvec11|null);

    /** fmat11 s7. */
    public s7?: (Ifvec11|null);

    /** fmat11 s8. */
    public s8?: (Ifvec11|null);

    /** fmat11 s9. */
    public s9?: (Ifvec11|null);

    /** fmat11 sa. */
    public sa?: (Ifvec11|null);

    /**
     * Creates a new fmat11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat11 instance
     */
    public static create(properties?: Ifmat11): fmat11;

    /**
     * Encodes the specified fmat11 message. Does not implicitly {@link fmat11.verify|verify} messages.
     * @param message fmat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat11 message, length delimited. Does not implicitly {@link fmat11.verify|verify} messages.
     * @param message fmat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat11;

    /**
     * Decodes a fmat11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat11;

    /**
     * Verifies a fmat11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat11
     */
    public static fromObject(object: { [k: string]: any }): fmat11;

    /**
     * Creates a plain object from a fmat11 message. Also converts values to other types if specified.
     * @param message fmat11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat11. */
export interface Iimat11 {

    /** imat11 s0 */
    s0?: (Iivec11|null);

    /** imat11 s1 */
    s1?: (Iivec11|null);

    /** imat11 s2 */
    s2?: (Iivec11|null);

    /** imat11 s3 */
    s3?: (Iivec11|null);

    /** imat11 s4 */
    s4?: (Iivec11|null);

    /** imat11 s5 */
    s5?: (Iivec11|null);

    /** imat11 s6 */
    s6?: (Iivec11|null);

    /** imat11 s7 */
    s7?: (Iivec11|null);

    /** imat11 s8 */
    s8?: (Iivec11|null);

    /** imat11 s9 */
    s9?: (Iivec11|null);

    /** imat11 sa */
    sa?: (Iivec11|null);
}

/** Represents an imat11. */
export class imat11 implements Iimat11 {

    /**
     * Constructs a new imat11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat11);

    /** imat11 s0. */
    public s0?: (Iivec11|null);

    /** imat11 s1. */
    public s1?: (Iivec11|null);

    /** imat11 s2. */
    public s2?: (Iivec11|null);

    /** imat11 s3. */
    public s3?: (Iivec11|null);

    /** imat11 s4. */
    public s4?: (Iivec11|null);

    /** imat11 s5. */
    public s5?: (Iivec11|null);

    /** imat11 s6. */
    public s6?: (Iivec11|null);

    /** imat11 s7. */
    public s7?: (Iivec11|null);

    /** imat11 s8. */
    public s8?: (Iivec11|null);

    /** imat11 s9. */
    public s9?: (Iivec11|null);

    /** imat11 sa. */
    public sa?: (Iivec11|null);

    /**
     * Creates a new imat11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat11 instance
     */
    public static create(properties?: Iimat11): imat11;

    /**
     * Encodes the specified imat11 message. Does not implicitly {@link imat11.verify|verify} messages.
     * @param message imat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat11 message, length delimited. Does not implicitly {@link imat11.verify|verify} messages.
     * @param message imat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat11;

    /**
     * Decodes an imat11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat11;

    /**
     * Verifies an imat11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat11
     */
    public static fromObject(object: { [k: string]: any }): imat11;

    /**
     * Creates a plain object from an imat11 message. Also converts values to other types if specified.
     * @param message imat11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat11. */
export interface Iumat11 {

    /** umat11 s0 */
    s0?: (Iuvec11|null);

    /** umat11 s1 */
    s1?: (Iuvec11|null);

    /** umat11 s2 */
    s2?: (Iuvec11|null);

    /** umat11 s3 */
    s3?: (Iuvec11|null);

    /** umat11 s4 */
    s4?: (Iuvec11|null);

    /** umat11 s5 */
    s5?: (Iuvec11|null);

    /** umat11 s6 */
    s6?: (Iuvec11|null);

    /** umat11 s7 */
    s7?: (Iuvec11|null);

    /** umat11 s8 */
    s8?: (Iuvec11|null);

    /** umat11 s9 */
    s9?: (Iuvec11|null);

    /** umat11 sa */
    sa?: (Iuvec11|null);
}

/** Represents an umat11. */
export class umat11 implements Iumat11 {

    /**
     * Constructs a new umat11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat11);

    /** umat11 s0. */
    public s0?: (Iuvec11|null);

    /** umat11 s1. */
    public s1?: (Iuvec11|null);

    /** umat11 s2. */
    public s2?: (Iuvec11|null);

    /** umat11 s3. */
    public s3?: (Iuvec11|null);

    /** umat11 s4. */
    public s4?: (Iuvec11|null);

    /** umat11 s5. */
    public s5?: (Iuvec11|null);

    /** umat11 s6. */
    public s6?: (Iuvec11|null);

    /** umat11 s7. */
    public s7?: (Iuvec11|null);

    /** umat11 s8. */
    public s8?: (Iuvec11|null);

    /** umat11 s9. */
    public s9?: (Iuvec11|null);

    /** umat11 sa. */
    public sa?: (Iuvec11|null);

    /**
     * Creates a new umat11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat11 instance
     */
    public static create(properties?: Iumat11): umat11;

    /**
     * Encodes the specified umat11 message. Does not implicitly {@link umat11.verify|verify} messages.
     * @param message umat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat11 message, length delimited. Does not implicitly {@link umat11.verify|verify} messages.
     * @param message umat11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat11;

    /**
     * Decodes an umat11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat11;

    /**
     * Verifies an umat11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat11
     */
    public static fromObject(object: { [k: string]: any }): umat11;

    /**
     * Creates a plain object from an umat11 message. Also converts values to other types if specified.
     * @param message umat11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat12. */
export interface Imat12 {

    /** mat12 s0 */
    s0?: (Ivec12|null);

    /** mat12 s1 */
    s1?: (Ivec12|null);

    /** mat12 s2 */
    s2?: (Ivec12|null);

    /** mat12 s3 */
    s3?: (Ivec12|null);

    /** mat12 s4 */
    s4?: (Ivec12|null);

    /** mat12 s5 */
    s5?: (Ivec12|null);

    /** mat12 s6 */
    s6?: (Ivec12|null);

    /** mat12 s7 */
    s7?: (Ivec12|null);

    /** mat12 s8 */
    s8?: (Ivec12|null);

    /** mat12 s9 */
    s9?: (Ivec12|null);

    /** mat12 sa */
    sa?: (Ivec12|null);

    /** mat12 sb */
    sb?: (Ivec12|null);
}

/** Represents a mat12. */
export class mat12 implements Imat12 {

    /**
     * Constructs a new mat12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat12);

    /** mat12 s0. */
    public s0?: (Ivec12|null);

    /** mat12 s1. */
    public s1?: (Ivec12|null);

    /** mat12 s2. */
    public s2?: (Ivec12|null);

    /** mat12 s3. */
    public s3?: (Ivec12|null);

    /** mat12 s4. */
    public s4?: (Ivec12|null);

    /** mat12 s5. */
    public s5?: (Ivec12|null);

    /** mat12 s6. */
    public s6?: (Ivec12|null);

    /** mat12 s7. */
    public s7?: (Ivec12|null);

    /** mat12 s8. */
    public s8?: (Ivec12|null);

    /** mat12 s9. */
    public s9?: (Ivec12|null);

    /** mat12 sa. */
    public sa?: (Ivec12|null);

    /** mat12 sb. */
    public sb?: (Ivec12|null);

    /**
     * Creates a new mat12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat12 instance
     */
    public static create(properties?: Imat12): mat12;

    /**
     * Encodes the specified mat12 message. Does not implicitly {@link mat12.verify|verify} messages.
     * @param message mat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat12 message, length delimited. Does not implicitly {@link mat12.verify|verify} messages.
     * @param message mat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat12;

    /**
     * Decodes a mat12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat12;

    /**
     * Verifies a mat12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat12
     */
    public static fromObject(object: { [k: string]: any }): mat12;

    /**
     * Creates a plain object from a mat12 message. Also converts values to other types if specified.
     * @param message mat12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat12. */
export interface Ifmat12 {

    /** fmat12 s0 */
    s0?: (Ifvec12|null);

    /** fmat12 s1 */
    s1?: (Ifvec12|null);

    /** fmat12 s2 */
    s2?: (Ifvec12|null);

    /** fmat12 s3 */
    s3?: (Ifvec12|null);

    /** fmat12 s4 */
    s4?: (Ifvec12|null);

    /** fmat12 s5 */
    s5?: (Ifvec12|null);

    /** fmat12 s6 */
    s6?: (Ifvec12|null);

    /** fmat12 s7 */
    s7?: (Ifvec12|null);

    /** fmat12 s8 */
    s8?: (Ifvec12|null);

    /** fmat12 s9 */
    s9?: (Ifvec12|null);

    /** fmat12 sa */
    sa?: (Ifvec12|null);

    /** fmat12 sb */
    sb?: (Ifvec12|null);
}

/** Represents a fmat12. */
export class fmat12 implements Ifmat12 {

    /**
     * Constructs a new fmat12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat12);

    /** fmat12 s0. */
    public s0?: (Ifvec12|null);

    /** fmat12 s1. */
    public s1?: (Ifvec12|null);

    /** fmat12 s2. */
    public s2?: (Ifvec12|null);

    /** fmat12 s3. */
    public s3?: (Ifvec12|null);

    /** fmat12 s4. */
    public s4?: (Ifvec12|null);

    /** fmat12 s5. */
    public s5?: (Ifvec12|null);

    /** fmat12 s6. */
    public s6?: (Ifvec12|null);

    /** fmat12 s7. */
    public s7?: (Ifvec12|null);

    /** fmat12 s8. */
    public s8?: (Ifvec12|null);

    /** fmat12 s9. */
    public s9?: (Ifvec12|null);

    /** fmat12 sa. */
    public sa?: (Ifvec12|null);

    /** fmat12 sb. */
    public sb?: (Ifvec12|null);

    /**
     * Creates a new fmat12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat12 instance
     */
    public static create(properties?: Ifmat12): fmat12;

    /**
     * Encodes the specified fmat12 message. Does not implicitly {@link fmat12.verify|verify} messages.
     * @param message fmat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat12 message, length delimited. Does not implicitly {@link fmat12.verify|verify} messages.
     * @param message fmat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat12;

    /**
     * Decodes a fmat12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat12;

    /**
     * Verifies a fmat12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat12
     */
    public static fromObject(object: { [k: string]: any }): fmat12;

    /**
     * Creates a plain object from a fmat12 message. Also converts values to other types if specified.
     * @param message fmat12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat12. */
export interface Iimat12 {

    /** imat12 s0 */
    s0?: (Iivec12|null);

    /** imat12 s1 */
    s1?: (Iivec12|null);

    /** imat12 s2 */
    s2?: (Iivec12|null);

    /** imat12 s3 */
    s3?: (Iivec12|null);

    /** imat12 s4 */
    s4?: (Iivec12|null);

    /** imat12 s5 */
    s5?: (Iivec12|null);

    /** imat12 s6 */
    s6?: (Iivec12|null);

    /** imat12 s7 */
    s7?: (Iivec12|null);

    /** imat12 s8 */
    s8?: (Iivec12|null);

    /** imat12 s9 */
    s9?: (Iivec12|null);

    /** imat12 sa */
    sa?: (Iivec12|null);

    /** imat12 sb */
    sb?: (Iivec12|null);
}

/** Represents an imat12. */
export class imat12 implements Iimat12 {

    /**
     * Constructs a new imat12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat12);

    /** imat12 s0. */
    public s0?: (Iivec12|null);

    /** imat12 s1. */
    public s1?: (Iivec12|null);

    /** imat12 s2. */
    public s2?: (Iivec12|null);

    /** imat12 s3. */
    public s3?: (Iivec12|null);

    /** imat12 s4. */
    public s4?: (Iivec12|null);

    /** imat12 s5. */
    public s5?: (Iivec12|null);

    /** imat12 s6. */
    public s6?: (Iivec12|null);

    /** imat12 s7. */
    public s7?: (Iivec12|null);

    /** imat12 s8. */
    public s8?: (Iivec12|null);

    /** imat12 s9. */
    public s9?: (Iivec12|null);

    /** imat12 sa. */
    public sa?: (Iivec12|null);

    /** imat12 sb. */
    public sb?: (Iivec12|null);

    /**
     * Creates a new imat12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat12 instance
     */
    public static create(properties?: Iimat12): imat12;

    /**
     * Encodes the specified imat12 message. Does not implicitly {@link imat12.verify|verify} messages.
     * @param message imat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat12 message, length delimited. Does not implicitly {@link imat12.verify|verify} messages.
     * @param message imat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat12;

    /**
     * Decodes an imat12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat12;

    /**
     * Verifies an imat12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat12
     */
    public static fromObject(object: { [k: string]: any }): imat12;

    /**
     * Creates a plain object from an imat12 message. Also converts values to other types if specified.
     * @param message imat12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat12. */
export interface Iumat12 {

    /** umat12 s0 */
    s0?: (Iuvec12|null);

    /** umat12 s1 */
    s1?: (Iuvec12|null);

    /** umat12 s2 */
    s2?: (Iuvec12|null);

    /** umat12 s3 */
    s3?: (Iuvec12|null);

    /** umat12 s4 */
    s4?: (Iuvec12|null);

    /** umat12 s5 */
    s5?: (Iuvec12|null);

    /** umat12 s6 */
    s6?: (Iuvec12|null);

    /** umat12 s7 */
    s7?: (Iuvec12|null);

    /** umat12 s8 */
    s8?: (Iuvec12|null);

    /** umat12 s9 */
    s9?: (Iuvec12|null);

    /** umat12 sa */
    sa?: (Iuvec12|null);

    /** umat12 sb */
    sb?: (Iuvec12|null);
}

/** Represents an umat12. */
export class umat12 implements Iumat12 {

    /**
     * Constructs a new umat12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat12);

    /** umat12 s0. */
    public s0?: (Iuvec12|null);

    /** umat12 s1. */
    public s1?: (Iuvec12|null);

    /** umat12 s2. */
    public s2?: (Iuvec12|null);

    /** umat12 s3. */
    public s3?: (Iuvec12|null);

    /** umat12 s4. */
    public s4?: (Iuvec12|null);

    /** umat12 s5. */
    public s5?: (Iuvec12|null);

    /** umat12 s6. */
    public s6?: (Iuvec12|null);

    /** umat12 s7. */
    public s7?: (Iuvec12|null);

    /** umat12 s8. */
    public s8?: (Iuvec12|null);

    /** umat12 s9. */
    public s9?: (Iuvec12|null);

    /** umat12 sa. */
    public sa?: (Iuvec12|null);

    /** umat12 sb. */
    public sb?: (Iuvec12|null);

    /**
     * Creates a new umat12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat12 instance
     */
    public static create(properties?: Iumat12): umat12;

    /**
     * Encodes the specified umat12 message. Does not implicitly {@link umat12.verify|verify} messages.
     * @param message umat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat12 message, length delimited. Does not implicitly {@link umat12.verify|verify} messages.
     * @param message umat12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat12;

    /**
     * Decodes an umat12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat12;

    /**
     * Verifies an umat12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat12
     */
    public static fromObject(object: { [k: string]: any }): umat12;

    /**
     * Creates a plain object from an umat12 message. Also converts values to other types if specified.
     * @param message umat12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat13. */
export interface Imat13 {

    /** mat13 s0 */
    s0?: (Ivec13|null);

    /** mat13 s1 */
    s1?: (Ivec13|null);

    /** mat13 s2 */
    s2?: (Ivec13|null);

    /** mat13 s3 */
    s3?: (Ivec13|null);

    /** mat13 s4 */
    s4?: (Ivec13|null);

    /** mat13 s5 */
    s5?: (Ivec13|null);

    /** mat13 s6 */
    s6?: (Ivec13|null);

    /** mat13 s7 */
    s7?: (Ivec13|null);

    /** mat13 s8 */
    s8?: (Ivec13|null);

    /** mat13 s9 */
    s9?: (Ivec13|null);

    /** mat13 sa */
    sa?: (Ivec13|null);

    /** mat13 sb */
    sb?: (Ivec13|null);

    /** mat13 sc */
    sc?: (Ivec13|null);
}

/** Represents a mat13. */
export class mat13 implements Imat13 {

    /**
     * Constructs a new mat13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat13);

    /** mat13 s0. */
    public s0?: (Ivec13|null);

    /** mat13 s1. */
    public s1?: (Ivec13|null);

    /** mat13 s2. */
    public s2?: (Ivec13|null);

    /** mat13 s3. */
    public s3?: (Ivec13|null);

    /** mat13 s4. */
    public s4?: (Ivec13|null);

    /** mat13 s5. */
    public s5?: (Ivec13|null);

    /** mat13 s6. */
    public s6?: (Ivec13|null);

    /** mat13 s7. */
    public s7?: (Ivec13|null);

    /** mat13 s8. */
    public s8?: (Ivec13|null);

    /** mat13 s9. */
    public s9?: (Ivec13|null);

    /** mat13 sa. */
    public sa?: (Ivec13|null);

    /** mat13 sb. */
    public sb?: (Ivec13|null);

    /** mat13 sc. */
    public sc?: (Ivec13|null);

    /**
     * Creates a new mat13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat13 instance
     */
    public static create(properties?: Imat13): mat13;

    /**
     * Encodes the specified mat13 message. Does not implicitly {@link mat13.verify|verify} messages.
     * @param message mat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat13 message, length delimited. Does not implicitly {@link mat13.verify|verify} messages.
     * @param message mat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat13;

    /**
     * Decodes a mat13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat13;

    /**
     * Verifies a mat13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat13
     */
    public static fromObject(object: { [k: string]: any }): mat13;

    /**
     * Creates a plain object from a mat13 message. Also converts values to other types if specified.
     * @param message mat13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat13. */
export interface Ifmat13 {

    /** fmat13 s0 */
    s0?: (Ifvec13|null);

    /** fmat13 s1 */
    s1?: (Ifvec13|null);

    /** fmat13 s2 */
    s2?: (Ifvec13|null);

    /** fmat13 s3 */
    s3?: (Ifvec13|null);

    /** fmat13 s4 */
    s4?: (Ifvec13|null);

    /** fmat13 s5 */
    s5?: (Ifvec13|null);

    /** fmat13 s6 */
    s6?: (Ifvec13|null);

    /** fmat13 s7 */
    s7?: (Ifvec13|null);

    /** fmat13 s8 */
    s8?: (Ifvec13|null);

    /** fmat13 s9 */
    s9?: (Ifvec13|null);

    /** fmat13 sa */
    sa?: (Ifvec13|null);

    /** fmat13 sb */
    sb?: (Ifvec13|null);

    /** fmat13 sc */
    sc?: (Ifvec13|null);
}

/** Represents a fmat13. */
export class fmat13 implements Ifmat13 {

    /**
     * Constructs a new fmat13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat13);

    /** fmat13 s0. */
    public s0?: (Ifvec13|null);

    /** fmat13 s1. */
    public s1?: (Ifvec13|null);

    /** fmat13 s2. */
    public s2?: (Ifvec13|null);

    /** fmat13 s3. */
    public s3?: (Ifvec13|null);

    /** fmat13 s4. */
    public s4?: (Ifvec13|null);

    /** fmat13 s5. */
    public s5?: (Ifvec13|null);

    /** fmat13 s6. */
    public s6?: (Ifvec13|null);

    /** fmat13 s7. */
    public s7?: (Ifvec13|null);

    /** fmat13 s8. */
    public s8?: (Ifvec13|null);

    /** fmat13 s9. */
    public s9?: (Ifvec13|null);

    /** fmat13 sa. */
    public sa?: (Ifvec13|null);

    /** fmat13 sb. */
    public sb?: (Ifvec13|null);

    /** fmat13 sc. */
    public sc?: (Ifvec13|null);

    /**
     * Creates a new fmat13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat13 instance
     */
    public static create(properties?: Ifmat13): fmat13;

    /**
     * Encodes the specified fmat13 message. Does not implicitly {@link fmat13.verify|verify} messages.
     * @param message fmat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat13 message, length delimited. Does not implicitly {@link fmat13.verify|verify} messages.
     * @param message fmat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat13;

    /**
     * Decodes a fmat13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat13;

    /**
     * Verifies a fmat13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat13
     */
    public static fromObject(object: { [k: string]: any }): fmat13;

    /**
     * Creates a plain object from a fmat13 message. Also converts values to other types if specified.
     * @param message fmat13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat13. */
export interface Iimat13 {

    /** imat13 s0 */
    s0?: (Iivec13|null);

    /** imat13 s1 */
    s1?: (Iivec13|null);

    /** imat13 s2 */
    s2?: (Iivec13|null);

    /** imat13 s3 */
    s3?: (Iivec13|null);

    /** imat13 s4 */
    s4?: (Iivec13|null);

    /** imat13 s5 */
    s5?: (Iivec13|null);

    /** imat13 s6 */
    s6?: (Iivec13|null);

    /** imat13 s7 */
    s7?: (Iivec13|null);

    /** imat13 s8 */
    s8?: (Iivec13|null);

    /** imat13 s9 */
    s9?: (Iivec13|null);

    /** imat13 sa */
    sa?: (Iivec13|null);

    /** imat13 sb */
    sb?: (Iivec13|null);

    /** imat13 sc */
    sc?: (Iivec13|null);
}

/** Represents an imat13. */
export class imat13 implements Iimat13 {

    /**
     * Constructs a new imat13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat13);

    /** imat13 s0. */
    public s0?: (Iivec13|null);

    /** imat13 s1. */
    public s1?: (Iivec13|null);

    /** imat13 s2. */
    public s2?: (Iivec13|null);

    /** imat13 s3. */
    public s3?: (Iivec13|null);

    /** imat13 s4. */
    public s4?: (Iivec13|null);

    /** imat13 s5. */
    public s5?: (Iivec13|null);

    /** imat13 s6. */
    public s6?: (Iivec13|null);

    /** imat13 s7. */
    public s7?: (Iivec13|null);

    /** imat13 s8. */
    public s8?: (Iivec13|null);

    /** imat13 s9. */
    public s9?: (Iivec13|null);

    /** imat13 sa. */
    public sa?: (Iivec13|null);

    /** imat13 sb. */
    public sb?: (Iivec13|null);

    /** imat13 sc. */
    public sc?: (Iivec13|null);

    /**
     * Creates a new imat13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat13 instance
     */
    public static create(properties?: Iimat13): imat13;

    /**
     * Encodes the specified imat13 message. Does not implicitly {@link imat13.verify|verify} messages.
     * @param message imat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat13 message, length delimited. Does not implicitly {@link imat13.verify|verify} messages.
     * @param message imat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat13;

    /**
     * Decodes an imat13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat13;

    /**
     * Verifies an imat13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat13
     */
    public static fromObject(object: { [k: string]: any }): imat13;

    /**
     * Creates a plain object from an imat13 message. Also converts values to other types if specified.
     * @param message imat13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat13. */
export interface Iumat13 {

    /** umat13 s0 */
    s0?: (Iuvec13|null);

    /** umat13 s1 */
    s1?: (Iuvec13|null);

    /** umat13 s2 */
    s2?: (Iuvec13|null);

    /** umat13 s3 */
    s3?: (Iuvec13|null);

    /** umat13 s4 */
    s4?: (Iuvec13|null);

    /** umat13 s5 */
    s5?: (Iuvec13|null);

    /** umat13 s6 */
    s6?: (Iuvec13|null);

    /** umat13 s7 */
    s7?: (Iuvec13|null);

    /** umat13 s8 */
    s8?: (Iuvec13|null);

    /** umat13 s9 */
    s9?: (Iuvec13|null);

    /** umat13 sa */
    sa?: (Iuvec13|null);

    /** umat13 sb */
    sb?: (Iuvec13|null);

    /** umat13 sc */
    sc?: (Iuvec13|null);
}

/** Represents an umat13. */
export class umat13 implements Iumat13 {

    /**
     * Constructs a new umat13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat13);

    /** umat13 s0. */
    public s0?: (Iuvec13|null);

    /** umat13 s1. */
    public s1?: (Iuvec13|null);

    /** umat13 s2. */
    public s2?: (Iuvec13|null);

    /** umat13 s3. */
    public s3?: (Iuvec13|null);

    /** umat13 s4. */
    public s4?: (Iuvec13|null);

    /** umat13 s5. */
    public s5?: (Iuvec13|null);

    /** umat13 s6. */
    public s6?: (Iuvec13|null);

    /** umat13 s7. */
    public s7?: (Iuvec13|null);

    /** umat13 s8. */
    public s8?: (Iuvec13|null);

    /** umat13 s9. */
    public s9?: (Iuvec13|null);

    /** umat13 sa. */
    public sa?: (Iuvec13|null);

    /** umat13 sb. */
    public sb?: (Iuvec13|null);

    /** umat13 sc. */
    public sc?: (Iuvec13|null);

    /**
     * Creates a new umat13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat13 instance
     */
    public static create(properties?: Iumat13): umat13;

    /**
     * Encodes the specified umat13 message. Does not implicitly {@link umat13.verify|verify} messages.
     * @param message umat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat13 message, length delimited. Does not implicitly {@link umat13.verify|verify} messages.
     * @param message umat13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat13;

    /**
     * Decodes an umat13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat13;

    /**
     * Verifies an umat13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat13
     */
    public static fromObject(object: { [k: string]: any }): umat13;

    /**
     * Creates a plain object from an umat13 message. Also converts values to other types if specified.
     * @param message umat13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat14. */
export interface Imat14 {

    /** mat14 s0 */
    s0?: (Ivec14|null);

    /** mat14 s1 */
    s1?: (Ivec14|null);

    /** mat14 s2 */
    s2?: (Ivec14|null);

    /** mat14 s3 */
    s3?: (Ivec14|null);

    /** mat14 s4 */
    s4?: (Ivec14|null);

    /** mat14 s5 */
    s5?: (Ivec14|null);

    /** mat14 s6 */
    s6?: (Ivec14|null);

    /** mat14 s7 */
    s7?: (Ivec14|null);

    /** mat14 s8 */
    s8?: (Ivec14|null);

    /** mat14 s9 */
    s9?: (Ivec14|null);

    /** mat14 sa */
    sa?: (Ivec14|null);

    /** mat14 sb */
    sb?: (Ivec14|null);

    /** mat14 sc */
    sc?: (Ivec14|null);

    /** mat14 sd */
    sd?: (Ivec14|null);
}

/** Represents a mat14. */
export class mat14 implements Imat14 {

    /**
     * Constructs a new mat14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat14);

    /** mat14 s0. */
    public s0?: (Ivec14|null);

    /** mat14 s1. */
    public s1?: (Ivec14|null);

    /** mat14 s2. */
    public s2?: (Ivec14|null);

    /** mat14 s3. */
    public s3?: (Ivec14|null);

    /** mat14 s4. */
    public s4?: (Ivec14|null);

    /** mat14 s5. */
    public s5?: (Ivec14|null);

    /** mat14 s6. */
    public s6?: (Ivec14|null);

    /** mat14 s7. */
    public s7?: (Ivec14|null);

    /** mat14 s8. */
    public s8?: (Ivec14|null);

    /** mat14 s9. */
    public s9?: (Ivec14|null);

    /** mat14 sa. */
    public sa?: (Ivec14|null);

    /** mat14 sb. */
    public sb?: (Ivec14|null);

    /** mat14 sc. */
    public sc?: (Ivec14|null);

    /** mat14 sd. */
    public sd?: (Ivec14|null);

    /**
     * Creates a new mat14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat14 instance
     */
    public static create(properties?: Imat14): mat14;

    /**
     * Encodes the specified mat14 message. Does not implicitly {@link mat14.verify|verify} messages.
     * @param message mat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat14 message, length delimited. Does not implicitly {@link mat14.verify|verify} messages.
     * @param message mat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat14;

    /**
     * Decodes a mat14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat14;

    /**
     * Verifies a mat14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat14
     */
    public static fromObject(object: { [k: string]: any }): mat14;

    /**
     * Creates a plain object from a mat14 message. Also converts values to other types if specified.
     * @param message mat14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat14. */
export interface Ifmat14 {

    /** fmat14 s0 */
    s0?: (Ifvec14|null);

    /** fmat14 s1 */
    s1?: (Ifvec14|null);

    /** fmat14 s2 */
    s2?: (Ifvec14|null);

    /** fmat14 s3 */
    s3?: (Ifvec14|null);

    /** fmat14 s4 */
    s4?: (Ifvec14|null);

    /** fmat14 s5 */
    s5?: (Ifvec14|null);

    /** fmat14 s6 */
    s6?: (Ifvec14|null);

    /** fmat14 s7 */
    s7?: (Ifvec14|null);

    /** fmat14 s8 */
    s8?: (Ifvec14|null);

    /** fmat14 s9 */
    s9?: (Ifvec14|null);

    /** fmat14 sa */
    sa?: (Ifvec14|null);

    /** fmat14 sb */
    sb?: (Ifvec14|null);

    /** fmat14 sc */
    sc?: (Ifvec14|null);

    /** fmat14 sd */
    sd?: (Ifvec14|null);
}

/** Represents a fmat14. */
export class fmat14 implements Ifmat14 {

    /**
     * Constructs a new fmat14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat14);

    /** fmat14 s0. */
    public s0?: (Ifvec14|null);

    /** fmat14 s1. */
    public s1?: (Ifvec14|null);

    /** fmat14 s2. */
    public s2?: (Ifvec14|null);

    /** fmat14 s3. */
    public s3?: (Ifvec14|null);

    /** fmat14 s4. */
    public s4?: (Ifvec14|null);

    /** fmat14 s5. */
    public s5?: (Ifvec14|null);

    /** fmat14 s6. */
    public s6?: (Ifvec14|null);

    /** fmat14 s7. */
    public s7?: (Ifvec14|null);

    /** fmat14 s8. */
    public s8?: (Ifvec14|null);

    /** fmat14 s9. */
    public s9?: (Ifvec14|null);

    /** fmat14 sa. */
    public sa?: (Ifvec14|null);

    /** fmat14 sb. */
    public sb?: (Ifvec14|null);

    /** fmat14 sc. */
    public sc?: (Ifvec14|null);

    /** fmat14 sd. */
    public sd?: (Ifvec14|null);

    /**
     * Creates a new fmat14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat14 instance
     */
    public static create(properties?: Ifmat14): fmat14;

    /**
     * Encodes the specified fmat14 message. Does not implicitly {@link fmat14.verify|verify} messages.
     * @param message fmat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat14 message, length delimited. Does not implicitly {@link fmat14.verify|verify} messages.
     * @param message fmat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat14;

    /**
     * Decodes a fmat14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat14;

    /**
     * Verifies a fmat14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat14
     */
    public static fromObject(object: { [k: string]: any }): fmat14;

    /**
     * Creates a plain object from a fmat14 message. Also converts values to other types if specified.
     * @param message fmat14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat14. */
export interface Iimat14 {

    /** imat14 s0 */
    s0?: (Iivec14|null);

    /** imat14 s1 */
    s1?: (Iivec14|null);

    /** imat14 s2 */
    s2?: (Iivec14|null);

    /** imat14 s3 */
    s3?: (Iivec14|null);

    /** imat14 s4 */
    s4?: (Iivec14|null);

    /** imat14 s5 */
    s5?: (Iivec14|null);

    /** imat14 s6 */
    s6?: (Iivec14|null);

    /** imat14 s7 */
    s7?: (Iivec14|null);

    /** imat14 s8 */
    s8?: (Iivec14|null);

    /** imat14 s9 */
    s9?: (Iivec14|null);

    /** imat14 sa */
    sa?: (Iivec14|null);

    /** imat14 sb */
    sb?: (Iivec14|null);

    /** imat14 sc */
    sc?: (Iivec14|null);

    /** imat14 sd */
    sd?: (Iivec14|null);
}

/** Represents an imat14. */
export class imat14 implements Iimat14 {

    /**
     * Constructs a new imat14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat14);

    /** imat14 s0. */
    public s0?: (Iivec14|null);

    /** imat14 s1. */
    public s1?: (Iivec14|null);

    /** imat14 s2. */
    public s2?: (Iivec14|null);

    /** imat14 s3. */
    public s3?: (Iivec14|null);

    /** imat14 s4. */
    public s4?: (Iivec14|null);

    /** imat14 s5. */
    public s5?: (Iivec14|null);

    /** imat14 s6. */
    public s6?: (Iivec14|null);

    /** imat14 s7. */
    public s7?: (Iivec14|null);

    /** imat14 s8. */
    public s8?: (Iivec14|null);

    /** imat14 s9. */
    public s9?: (Iivec14|null);

    /** imat14 sa. */
    public sa?: (Iivec14|null);

    /** imat14 sb. */
    public sb?: (Iivec14|null);

    /** imat14 sc. */
    public sc?: (Iivec14|null);

    /** imat14 sd. */
    public sd?: (Iivec14|null);

    /**
     * Creates a new imat14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat14 instance
     */
    public static create(properties?: Iimat14): imat14;

    /**
     * Encodes the specified imat14 message. Does not implicitly {@link imat14.verify|verify} messages.
     * @param message imat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat14 message, length delimited. Does not implicitly {@link imat14.verify|verify} messages.
     * @param message imat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat14;

    /**
     * Decodes an imat14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat14;

    /**
     * Verifies an imat14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat14
     */
    public static fromObject(object: { [k: string]: any }): imat14;

    /**
     * Creates a plain object from an imat14 message. Also converts values to other types if specified.
     * @param message imat14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat14. */
export interface Iumat14 {

    /** umat14 s0 */
    s0?: (Iuvec14|null);

    /** umat14 s1 */
    s1?: (Iuvec14|null);

    /** umat14 s2 */
    s2?: (Iuvec14|null);

    /** umat14 s3 */
    s3?: (Iuvec14|null);

    /** umat14 s4 */
    s4?: (Iuvec14|null);

    /** umat14 s5 */
    s5?: (Iuvec14|null);

    /** umat14 s6 */
    s6?: (Iuvec14|null);

    /** umat14 s7 */
    s7?: (Iuvec14|null);

    /** umat14 s8 */
    s8?: (Iuvec14|null);

    /** umat14 s9 */
    s9?: (Iuvec14|null);

    /** umat14 sa */
    sa?: (Iuvec14|null);

    /** umat14 sb */
    sb?: (Iuvec14|null);

    /** umat14 sc */
    sc?: (Iuvec14|null);

    /** umat14 sd */
    sd?: (Iuvec14|null);
}

/** Represents an umat14. */
export class umat14 implements Iumat14 {

    /**
     * Constructs a new umat14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat14);

    /** umat14 s0. */
    public s0?: (Iuvec14|null);

    /** umat14 s1. */
    public s1?: (Iuvec14|null);

    /** umat14 s2. */
    public s2?: (Iuvec14|null);

    /** umat14 s3. */
    public s3?: (Iuvec14|null);

    /** umat14 s4. */
    public s4?: (Iuvec14|null);

    /** umat14 s5. */
    public s5?: (Iuvec14|null);

    /** umat14 s6. */
    public s6?: (Iuvec14|null);

    /** umat14 s7. */
    public s7?: (Iuvec14|null);

    /** umat14 s8. */
    public s8?: (Iuvec14|null);

    /** umat14 s9. */
    public s9?: (Iuvec14|null);

    /** umat14 sa. */
    public sa?: (Iuvec14|null);

    /** umat14 sb. */
    public sb?: (Iuvec14|null);

    /** umat14 sc. */
    public sc?: (Iuvec14|null);

    /** umat14 sd. */
    public sd?: (Iuvec14|null);

    /**
     * Creates a new umat14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat14 instance
     */
    public static create(properties?: Iumat14): umat14;

    /**
     * Encodes the specified umat14 message. Does not implicitly {@link umat14.verify|verify} messages.
     * @param message umat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat14 message, length delimited. Does not implicitly {@link umat14.verify|verify} messages.
     * @param message umat14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat14;

    /**
     * Decodes an umat14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat14;

    /**
     * Verifies an umat14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat14
     */
    public static fromObject(object: { [k: string]: any }): umat14;

    /**
     * Creates a plain object from an umat14 message. Also converts values to other types if specified.
     * @param message umat14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat15. */
export interface Imat15 {

    /** mat15 s0 */
    s0?: (Ivec15|null);

    /** mat15 s1 */
    s1?: (Ivec15|null);

    /** mat15 s2 */
    s2?: (Ivec15|null);

    /** mat15 s3 */
    s3?: (Ivec15|null);

    /** mat15 s4 */
    s4?: (Ivec15|null);

    /** mat15 s5 */
    s5?: (Ivec15|null);

    /** mat15 s6 */
    s6?: (Ivec15|null);

    /** mat15 s7 */
    s7?: (Ivec15|null);

    /** mat15 s8 */
    s8?: (Ivec15|null);

    /** mat15 s9 */
    s9?: (Ivec15|null);

    /** mat15 sa */
    sa?: (Ivec15|null);

    /** mat15 sb */
    sb?: (Ivec15|null);

    /** mat15 sc */
    sc?: (Ivec15|null);

    /** mat15 sd */
    sd?: (Ivec15|null);

    /** mat15 se */
    se?: (Ivec15|null);
}

/** Represents a mat15. */
export class mat15 implements Imat15 {

    /**
     * Constructs a new mat15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat15);

    /** mat15 s0. */
    public s0?: (Ivec15|null);

    /** mat15 s1. */
    public s1?: (Ivec15|null);

    /** mat15 s2. */
    public s2?: (Ivec15|null);

    /** mat15 s3. */
    public s3?: (Ivec15|null);

    /** mat15 s4. */
    public s4?: (Ivec15|null);

    /** mat15 s5. */
    public s5?: (Ivec15|null);

    /** mat15 s6. */
    public s6?: (Ivec15|null);

    /** mat15 s7. */
    public s7?: (Ivec15|null);

    /** mat15 s8. */
    public s8?: (Ivec15|null);

    /** mat15 s9. */
    public s9?: (Ivec15|null);

    /** mat15 sa. */
    public sa?: (Ivec15|null);

    /** mat15 sb. */
    public sb?: (Ivec15|null);

    /** mat15 sc. */
    public sc?: (Ivec15|null);

    /** mat15 sd. */
    public sd?: (Ivec15|null);

    /** mat15 se. */
    public se?: (Ivec15|null);

    /**
     * Creates a new mat15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat15 instance
     */
    public static create(properties?: Imat15): mat15;

    /**
     * Encodes the specified mat15 message. Does not implicitly {@link mat15.verify|verify} messages.
     * @param message mat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat15 message, length delimited. Does not implicitly {@link mat15.verify|verify} messages.
     * @param message mat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat15;

    /**
     * Decodes a mat15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat15;

    /**
     * Verifies a mat15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat15
     */
    public static fromObject(object: { [k: string]: any }): mat15;

    /**
     * Creates a plain object from a mat15 message. Also converts values to other types if specified.
     * @param message mat15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat15. */
export interface Ifmat15 {

    /** fmat15 s0 */
    s0?: (Ifvec15|null);

    /** fmat15 s1 */
    s1?: (Ifvec15|null);

    /** fmat15 s2 */
    s2?: (Ifvec15|null);

    /** fmat15 s3 */
    s3?: (Ifvec15|null);

    /** fmat15 s4 */
    s4?: (Ifvec15|null);

    /** fmat15 s5 */
    s5?: (Ifvec15|null);

    /** fmat15 s6 */
    s6?: (Ifvec15|null);

    /** fmat15 s7 */
    s7?: (Ifvec15|null);

    /** fmat15 s8 */
    s8?: (Ifvec15|null);

    /** fmat15 s9 */
    s9?: (Ifvec15|null);

    /** fmat15 sa */
    sa?: (Ifvec15|null);

    /** fmat15 sb */
    sb?: (Ifvec15|null);

    /** fmat15 sc */
    sc?: (Ifvec15|null);

    /** fmat15 sd */
    sd?: (Ifvec15|null);

    /** fmat15 se */
    se?: (Ifvec15|null);
}

/** Represents a fmat15. */
export class fmat15 implements Ifmat15 {

    /**
     * Constructs a new fmat15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat15);

    /** fmat15 s0. */
    public s0?: (Ifvec15|null);

    /** fmat15 s1. */
    public s1?: (Ifvec15|null);

    /** fmat15 s2. */
    public s2?: (Ifvec15|null);

    /** fmat15 s3. */
    public s3?: (Ifvec15|null);

    /** fmat15 s4. */
    public s4?: (Ifvec15|null);

    /** fmat15 s5. */
    public s5?: (Ifvec15|null);

    /** fmat15 s6. */
    public s6?: (Ifvec15|null);

    /** fmat15 s7. */
    public s7?: (Ifvec15|null);

    /** fmat15 s8. */
    public s8?: (Ifvec15|null);

    /** fmat15 s9. */
    public s9?: (Ifvec15|null);

    /** fmat15 sa. */
    public sa?: (Ifvec15|null);

    /** fmat15 sb. */
    public sb?: (Ifvec15|null);

    /** fmat15 sc. */
    public sc?: (Ifvec15|null);

    /** fmat15 sd. */
    public sd?: (Ifvec15|null);

    /** fmat15 se. */
    public se?: (Ifvec15|null);

    /**
     * Creates a new fmat15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat15 instance
     */
    public static create(properties?: Ifmat15): fmat15;

    /**
     * Encodes the specified fmat15 message. Does not implicitly {@link fmat15.verify|verify} messages.
     * @param message fmat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat15 message, length delimited. Does not implicitly {@link fmat15.verify|verify} messages.
     * @param message fmat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat15;

    /**
     * Decodes a fmat15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat15;

    /**
     * Verifies a fmat15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat15
     */
    public static fromObject(object: { [k: string]: any }): fmat15;

    /**
     * Creates a plain object from a fmat15 message. Also converts values to other types if specified.
     * @param message fmat15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat15. */
export interface Iimat15 {

    /** imat15 s0 */
    s0?: (Iivec15|null);

    /** imat15 s1 */
    s1?: (Iivec15|null);

    /** imat15 s2 */
    s2?: (Iivec15|null);

    /** imat15 s3 */
    s3?: (Iivec15|null);

    /** imat15 s4 */
    s4?: (Iivec15|null);

    /** imat15 s5 */
    s5?: (Iivec15|null);

    /** imat15 s6 */
    s6?: (Iivec15|null);

    /** imat15 s7 */
    s7?: (Iivec15|null);

    /** imat15 s8 */
    s8?: (Iivec15|null);

    /** imat15 s9 */
    s9?: (Iivec15|null);

    /** imat15 sa */
    sa?: (Iivec15|null);

    /** imat15 sb */
    sb?: (Iivec15|null);

    /** imat15 sc */
    sc?: (Iivec15|null);

    /** imat15 sd */
    sd?: (Iivec15|null);

    /** imat15 se */
    se?: (Iivec15|null);
}

/** Represents an imat15. */
export class imat15 implements Iimat15 {

    /**
     * Constructs a new imat15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat15);

    /** imat15 s0. */
    public s0?: (Iivec15|null);

    /** imat15 s1. */
    public s1?: (Iivec15|null);

    /** imat15 s2. */
    public s2?: (Iivec15|null);

    /** imat15 s3. */
    public s3?: (Iivec15|null);

    /** imat15 s4. */
    public s4?: (Iivec15|null);

    /** imat15 s5. */
    public s5?: (Iivec15|null);

    /** imat15 s6. */
    public s6?: (Iivec15|null);

    /** imat15 s7. */
    public s7?: (Iivec15|null);

    /** imat15 s8. */
    public s8?: (Iivec15|null);

    /** imat15 s9. */
    public s9?: (Iivec15|null);

    /** imat15 sa. */
    public sa?: (Iivec15|null);

    /** imat15 sb. */
    public sb?: (Iivec15|null);

    /** imat15 sc. */
    public sc?: (Iivec15|null);

    /** imat15 sd. */
    public sd?: (Iivec15|null);

    /** imat15 se. */
    public se?: (Iivec15|null);

    /**
     * Creates a new imat15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat15 instance
     */
    public static create(properties?: Iimat15): imat15;

    /**
     * Encodes the specified imat15 message. Does not implicitly {@link imat15.verify|verify} messages.
     * @param message imat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat15 message, length delimited. Does not implicitly {@link imat15.verify|verify} messages.
     * @param message imat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat15;

    /**
     * Decodes an imat15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat15;

    /**
     * Verifies an imat15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat15
     */
    public static fromObject(object: { [k: string]: any }): imat15;

    /**
     * Creates a plain object from an imat15 message. Also converts values to other types if specified.
     * @param message imat15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat15. */
export interface Iumat15 {

    /** umat15 s0 */
    s0?: (Iuvec15|null);

    /** umat15 s1 */
    s1?: (Iuvec15|null);

    /** umat15 s2 */
    s2?: (Iuvec15|null);

    /** umat15 s3 */
    s3?: (Iuvec15|null);

    /** umat15 s4 */
    s4?: (Iuvec15|null);

    /** umat15 s5 */
    s5?: (Iuvec15|null);

    /** umat15 s6 */
    s6?: (Iuvec15|null);

    /** umat15 s7 */
    s7?: (Iuvec15|null);

    /** umat15 s8 */
    s8?: (Iuvec15|null);

    /** umat15 s9 */
    s9?: (Iuvec15|null);

    /** umat15 sa */
    sa?: (Iuvec15|null);

    /** umat15 sb */
    sb?: (Iuvec15|null);

    /** umat15 sc */
    sc?: (Iuvec15|null);

    /** umat15 sd */
    sd?: (Iuvec15|null);

    /** umat15 se */
    se?: (Iuvec15|null);
}

/** Represents an umat15. */
export class umat15 implements Iumat15 {

    /**
     * Constructs a new umat15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat15);

    /** umat15 s0. */
    public s0?: (Iuvec15|null);

    /** umat15 s1. */
    public s1?: (Iuvec15|null);

    /** umat15 s2. */
    public s2?: (Iuvec15|null);

    /** umat15 s3. */
    public s3?: (Iuvec15|null);

    /** umat15 s4. */
    public s4?: (Iuvec15|null);

    /** umat15 s5. */
    public s5?: (Iuvec15|null);

    /** umat15 s6. */
    public s6?: (Iuvec15|null);

    /** umat15 s7. */
    public s7?: (Iuvec15|null);

    /** umat15 s8. */
    public s8?: (Iuvec15|null);

    /** umat15 s9. */
    public s9?: (Iuvec15|null);

    /** umat15 sa. */
    public sa?: (Iuvec15|null);

    /** umat15 sb. */
    public sb?: (Iuvec15|null);

    /** umat15 sc. */
    public sc?: (Iuvec15|null);

    /** umat15 sd. */
    public sd?: (Iuvec15|null);

    /** umat15 se. */
    public se?: (Iuvec15|null);

    /**
     * Creates a new umat15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat15 instance
     */
    public static create(properties?: Iumat15): umat15;

    /**
     * Encodes the specified umat15 message. Does not implicitly {@link umat15.verify|verify} messages.
     * @param message umat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat15 message, length delimited. Does not implicitly {@link umat15.verify|verify} messages.
     * @param message umat15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat15;

    /**
     * Decodes an umat15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat15;

    /**
     * Verifies an umat15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat15
     */
    public static fromObject(object: { [k: string]: any }): umat15;

    /**
     * Creates a plain object from an umat15 message. Also converts values to other types if specified.
     * @param message umat15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a mat16. */
export interface Imat16 {

    /** mat16 s0 */
    s0?: (Ivec16|null);

    /** mat16 s1 */
    s1?: (Ivec16|null);

    /** mat16 s2 */
    s2?: (Ivec16|null);

    /** mat16 s3 */
    s3?: (Ivec16|null);

    /** mat16 s4 */
    s4?: (Ivec16|null);

    /** mat16 s5 */
    s5?: (Ivec16|null);

    /** mat16 s6 */
    s6?: (Ivec16|null);

    /** mat16 s7 */
    s7?: (Ivec16|null);

    /** mat16 s8 */
    s8?: (Ivec16|null);

    /** mat16 s9 */
    s9?: (Ivec16|null);

    /** mat16 sa */
    sa?: (Ivec16|null);

    /** mat16 sb */
    sb?: (Ivec16|null);

    /** mat16 sc */
    sc?: (Ivec16|null);

    /** mat16 sd */
    sd?: (Ivec16|null);

    /** mat16 se */
    se?: (Ivec16|null);

    /** mat16 sf */
    sf?: (Ivec16|null);
}

/** Represents a mat16. */
export class mat16 implements Imat16 {

    /**
     * Constructs a new mat16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Imat16);

    /** mat16 s0. */
    public s0?: (Ivec16|null);

    /** mat16 s1. */
    public s1?: (Ivec16|null);

    /** mat16 s2. */
    public s2?: (Ivec16|null);

    /** mat16 s3. */
    public s3?: (Ivec16|null);

    /** mat16 s4. */
    public s4?: (Ivec16|null);

    /** mat16 s5. */
    public s5?: (Ivec16|null);

    /** mat16 s6. */
    public s6?: (Ivec16|null);

    /** mat16 s7. */
    public s7?: (Ivec16|null);

    /** mat16 s8. */
    public s8?: (Ivec16|null);

    /** mat16 s9. */
    public s9?: (Ivec16|null);

    /** mat16 sa. */
    public sa?: (Ivec16|null);

    /** mat16 sb. */
    public sb?: (Ivec16|null);

    /** mat16 sc. */
    public sc?: (Ivec16|null);

    /** mat16 sd. */
    public sd?: (Ivec16|null);

    /** mat16 se. */
    public se?: (Ivec16|null);

    /** mat16 sf. */
    public sf?: (Ivec16|null);

    /**
     * Creates a new mat16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns mat16 instance
     */
    public static create(properties?: Imat16): mat16;

    /**
     * Encodes the specified mat16 message. Does not implicitly {@link mat16.verify|verify} messages.
     * @param message mat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Imat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified mat16 message, length delimited. Does not implicitly {@link mat16.verify|verify} messages.
     * @param message mat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Imat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a mat16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns mat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): mat16;

    /**
     * Decodes a mat16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns mat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): mat16;

    /**
     * Verifies a mat16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a mat16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns mat16
     */
    public static fromObject(object: { [k: string]: any }): mat16;

    /**
     * Creates a plain object from a mat16 message. Also converts values to other types if specified.
     * @param message mat16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: mat16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this mat16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fmat16. */
export interface Ifmat16 {

    /** fmat16 s0 */
    s0?: (Ifvec16|null);

    /** fmat16 s1 */
    s1?: (Ifvec16|null);

    /** fmat16 s2 */
    s2?: (Ifvec16|null);

    /** fmat16 s3 */
    s3?: (Ifvec16|null);

    /** fmat16 s4 */
    s4?: (Ifvec16|null);

    /** fmat16 s5 */
    s5?: (Ifvec16|null);

    /** fmat16 s6 */
    s6?: (Ifvec16|null);

    /** fmat16 s7 */
    s7?: (Ifvec16|null);

    /** fmat16 s8 */
    s8?: (Ifvec16|null);

    /** fmat16 s9 */
    s9?: (Ifvec16|null);

    /** fmat16 sa */
    sa?: (Ifvec16|null);

    /** fmat16 sb */
    sb?: (Ifvec16|null);

    /** fmat16 sc */
    sc?: (Ifvec16|null);

    /** fmat16 sd */
    sd?: (Ifvec16|null);

    /** fmat16 se */
    se?: (Ifvec16|null);

    /** fmat16 sf */
    sf?: (Ifvec16|null);
}

/** Represents a fmat16. */
export class fmat16 implements Ifmat16 {

    /**
     * Constructs a new fmat16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifmat16);

    /** fmat16 s0. */
    public s0?: (Ifvec16|null);

    /** fmat16 s1. */
    public s1?: (Ifvec16|null);

    /** fmat16 s2. */
    public s2?: (Ifvec16|null);

    /** fmat16 s3. */
    public s3?: (Ifvec16|null);

    /** fmat16 s4. */
    public s4?: (Ifvec16|null);

    /** fmat16 s5. */
    public s5?: (Ifvec16|null);

    /** fmat16 s6. */
    public s6?: (Ifvec16|null);

    /** fmat16 s7. */
    public s7?: (Ifvec16|null);

    /** fmat16 s8. */
    public s8?: (Ifvec16|null);

    /** fmat16 s9. */
    public s9?: (Ifvec16|null);

    /** fmat16 sa. */
    public sa?: (Ifvec16|null);

    /** fmat16 sb. */
    public sb?: (Ifvec16|null);

    /** fmat16 sc. */
    public sc?: (Ifvec16|null);

    /** fmat16 sd. */
    public sd?: (Ifvec16|null);

    /** fmat16 se. */
    public se?: (Ifvec16|null);

    /** fmat16 sf. */
    public sf?: (Ifvec16|null);

    /**
     * Creates a new fmat16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fmat16 instance
     */
    public static create(properties?: Ifmat16): fmat16;

    /**
     * Encodes the specified fmat16 message. Does not implicitly {@link fmat16.verify|verify} messages.
     * @param message fmat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifmat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fmat16 message, length delimited. Does not implicitly {@link fmat16.verify|verify} messages.
     * @param message fmat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifmat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fmat16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fmat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fmat16;

    /**
     * Decodes a fmat16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fmat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fmat16;

    /**
     * Verifies a fmat16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fmat16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fmat16
     */
    public static fromObject(object: { [k: string]: any }): fmat16;

    /**
     * Creates a plain object from a fmat16 message. Also converts values to other types if specified.
     * @param message fmat16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fmat16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fmat16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an imat16. */
export interface Iimat16 {

    /** imat16 s0 */
    s0?: (Iivec16|null);

    /** imat16 s1 */
    s1?: (Iivec16|null);

    /** imat16 s2 */
    s2?: (Iivec16|null);

    /** imat16 s3 */
    s3?: (Iivec16|null);

    /** imat16 s4 */
    s4?: (Iivec16|null);

    /** imat16 s5 */
    s5?: (Iivec16|null);

    /** imat16 s6 */
    s6?: (Iivec16|null);

    /** imat16 s7 */
    s7?: (Iivec16|null);

    /** imat16 s8 */
    s8?: (Iivec16|null);

    /** imat16 s9 */
    s9?: (Iivec16|null);

    /** imat16 sa */
    sa?: (Iivec16|null);

    /** imat16 sb */
    sb?: (Iivec16|null);

    /** imat16 sc */
    sc?: (Iivec16|null);

    /** imat16 sd */
    sd?: (Iivec16|null);

    /** imat16 se */
    se?: (Iivec16|null);

    /** imat16 sf */
    sf?: (Iivec16|null);
}

/** Represents an imat16. */
export class imat16 implements Iimat16 {

    /**
     * Constructs a new imat16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iimat16);

    /** imat16 s0. */
    public s0?: (Iivec16|null);

    /** imat16 s1. */
    public s1?: (Iivec16|null);

    /** imat16 s2. */
    public s2?: (Iivec16|null);

    /** imat16 s3. */
    public s3?: (Iivec16|null);

    /** imat16 s4. */
    public s4?: (Iivec16|null);

    /** imat16 s5. */
    public s5?: (Iivec16|null);

    /** imat16 s6. */
    public s6?: (Iivec16|null);

    /** imat16 s7. */
    public s7?: (Iivec16|null);

    /** imat16 s8. */
    public s8?: (Iivec16|null);

    /** imat16 s9. */
    public s9?: (Iivec16|null);

    /** imat16 sa. */
    public sa?: (Iivec16|null);

    /** imat16 sb. */
    public sb?: (Iivec16|null);

    /** imat16 sc. */
    public sc?: (Iivec16|null);

    /** imat16 sd. */
    public sd?: (Iivec16|null);

    /** imat16 se. */
    public se?: (Iivec16|null);

    /** imat16 sf. */
    public sf?: (Iivec16|null);

    /**
     * Creates a new imat16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns imat16 instance
     */
    public static create(properties?: Iimat16): imat16;

    /**
     * Encodes the specified imat16 message. Does not implicitly {@link imat16.verify|verify} messages.
     * @param message imat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iimat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified imat16 message, length delimited. Does not implicitly {@link imat16.verify|verify} messages.
     * @param message imat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iimat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an imat16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns imat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): imat16;

    /**
     * Decodes an imat16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns imat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): imat16;

    /**
     * Verifies an imat16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an imat16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns imat16
     */
    public static fromObject(object: { [k: string]: any }): imat16;

    /**
     * Creates a plain object from an imat16 message. Also converts values to other types if specified.
     * @param message imat16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: imat16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this imat16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an umat16. */
export interface Iumat16 {

    /** umat16 s0 */
    s0?: (Iuvec16|null);

    /** umat16 s1 */
    s1?: (Iuvec16|null);

    /** umat16 s2 */
    s2?: (Iuvec16|null);

    /** umat16 s3 */
    s3?: (Iuvec16|null);

    /** umat16 s4 */
    s4?: (Iuvec16|null);

    /** umat16 s5 */
    s5?: (Iuvec16|null);

    /** umat16 s6 */
    s6?: (Iuvec16|null);

    /** umat16 s7 */
    s7?: (Iuvec16|null);

    /** umat16 s8 */
    s8?: (Iuvec16|null);

    /** umat16 s9 */
    s9?: (Iuvec16|null);

    /** umat16 sa */
    sa?: (Iuvec16|null);

    /** umat16 sb */
    sb?: (Iuvec16|null);

    /** umat16 sc */
    sc?: (Iuvec16|null);

    /** umat16 sd */
    sd?: (Iuvec16|null);

    /** umat16 se */
    se?: (Iuvec16|null);

    /** umat16 sf */
    sf?: (Iuvec16|null);
}

/** Represents an umat16. */
export class umat16 implements Iumat16 {

    /**
     * Constructs a new umat16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iumat16);

    /** umat16 s0. */
    public s0?: (Iuvec16|null);

    /** umat16 s1. */
    public s1?: (Iuvec16|null);

    /** umat16 s2. */
    public s2?: (Iuvec16|null);

    /** umat16 s3. */
    public s3?: (Iuvec16|null);

    /** umat16 s4. */
    public s4?: (Iuvec16|null);

    /** umat16 s5. */
    public s5?: (Iuvec16|null);

    /** umat16 s6. */
    public s6?: (Iuvec16|null);

    /** umat16 s7. */
    public s7?: (Iuvec16|null);

    /** umat16 s8. */
    public s8?: (Iuvec16|null);

    /** umat16 s9. */
    public s9?: (Iuvec16|null);

    /** umat16 sa. */
    public sa?: (Iuvec16|null);

    /** umat16 sb. */
    public sb?: (Iuvec16|null);

    /** umat16 sc. */
    public sc?: (Iuvec16|null);

    /** umat16 sd. */
    public sd?: (Iuvec16|null);

    /** umat16 se. */
    public se?: (Iuvec16|null);

    /** umat16 sf. */
    public sf?: (Iuvec16|null);

    /**
     * Creates a new umat16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns umat16 instance
     */
    public static create(properties?: Iumat16): umat16;

    /**
     * Encodes the specified umat16 message. Does not implicitly {@link umat16.verify|verify} messages.
     * @param message umat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iumat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified umat16 message, length delimited. Does not implicitly {@link umat16.verify|verify} messages.
     * @param message umat16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iumat16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an umat16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns umat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): umat16;

    /**
     * Decodes an umat16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns umat16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): umat16;

    /**
     * Verifies an umat16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an umat16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns umat16
     */
    public static fromObject(object: { [k: string]: any }): umat16;

    /**
     * Creates a plain object from an umat16 message. Also converts values to other types if specified.
     * @param message umat16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: umat16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this umat16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec. */
export interface Ivec {

    /** vec v */
    v?: (number[]|null);
}

/** Represents a vec. */
export class vec implements Ivec {

    /**
     * Constructs a new vec.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec);

    /** vec v. */
    public v: number[];

    /**
     * Creates a new vec instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec instance
     */
    public static create(properties?: Ivec): vec;

    /**
     * Encodes the specified vec message. Does not implicitly {@link vec.verify|verify} messages.
     * @param message vec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec message, length delimited. Does not implicitly {@link vec.verify|verify} messages.
     * @param message vec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec;

    /**
     * Decodes a vec message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec;

    /**
     * Verifies a vec message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec
     */
    public static fromObject(object: { [k: string]: any }): vec;

    /**
     * Creates a plain object from a vec message. Also converts values to other types if specified.
     * @param message vec
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec. */
export interface Ifvec {

    /** fvec v */
    v?: (number[]|null);
}

/** Represents a fvec. */
export class fvec implements Ifvec {

    /**
     * Constructs a new fvec.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec);

    /** fvec v. */
    public v: number[];

    /**
     * Creates a new fvec instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec instance
     */
    public static create(properties?: Ifvec): fvec;

    /**
     * Encodes the specified fvec message. Does not implicitly {@link fvec.verify|verify} messages.
     * @param message fvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec message, length delimited. Does not implicitly {@link fvec.verify|verify} messages.
     * @param message fvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec;

    /**
     * Decodes a fvec message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec;

    /**
     * Verifies a fvec message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec
     */
    public static fromObject(object: { [k: string]: any }): fvec;

    /**
     * Creates a plain object from a fvec message. Also converts values to other types if specified.
     * @param message fvec
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec. */
export interface Iivec {

    /** ivec v */
    v?: (number[]|null);
}

/** Represents an ivec. */
export class ivec implements Iivec {

    /**
     * Constructs a new ivec.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec);

    /** ivec v. */
    public v: number[];

    /**
     * Creates a new ivec instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec instance
     */
    public static create(properties?: Iivec): ivec;

    /**
     * Encodes the specified ivec message. Does not implicitly {@link ivec.verify|verify} messages.
     * @param message ivec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec message, length delimited. Does not implicitly {@link ivec.verify|verify} messages.
     * @param message ivec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec;

    /**
     * Decodes an ivec message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec;

    /**
     * Verifies an ivec message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec
     */
    public static fromObject(object: { [k: string]: any }): ivec;

    /**
     * Creates a plain object from an ivec message. Also converts values to other types if specified.
     * @param message ivec
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec. */
export interface Iuvec {

    /** uvec v */
    v?: (number[]|null);
}

/** Represents an uvec. */
export class uvec implements Iuvec {

    /**
     * Constructs a new uvec.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec);

    /** uvec v. */
    public v: number[];

    /**
     * Creates a new uvec instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec instance
     */
    public static create(properties?: Iuvec): uvec;

    /**
     * Encodes the specified uvec message. Does not implicitly {@link uvec.verify|verify} messages.
     * @param message uvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec message, length delimited. Does not implicitly {@link uvec.verify|verify} messages.
     * @param message uvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec;

    /**
     * Decodes an uvec message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec;

    /**
     * Verifies an uvec message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec
     */
    public static fromObject(object: { [k: string]: any }): uvec;

    /**
     * Creates a plain object from an uvec message. Also converts values to other types if specified.
     * @param message uvec
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a cvec. */
export interface Icvec {

    /** cvec v */
    v?: (Uint8Array|null);
}

/** Represents a cvec. */
export class cvec implements Icvec {

    /**
     * Constructs a new cvec.
     * @param [properties] Properties to set
     */
    constructor(properties?: Icvec);

    /** cvec v. */
    public v: Uint8Array;

    /**
     * Creates a new cvec instance using the specified properties.
     * @param [properties] Properties to set
     * @returns cvec instance
     */
    public static create(properties?: Icvec): cvec;

    /**
     * Encodes the specified cvec message. Does not implicitly {@link cvec.verify|verify} messages.
     * @param message cvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Icvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified cvec message, length delimited. Does not implicitly {@link cvec.verify|verify} messages.
     * @param message cvec message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Icvec, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a cvec message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns cvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cvec;

    /**
     * Decodes a cvec message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns cvec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cvec;

    /**
     * Verifies a cvec message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a cvec message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns cvec
     */
    public static fromObject(object: { [k: string]: any }): cvec;

    /**
     * Creates a plain object from a cvec message. Also converts values to other types if specified.
     * @param message cvec
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: cvec, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this cvec to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec2. */
export interface Ivec2 {

    /** vec2 x */
    x?: (number|null);

    /** vec2 y */
    y?: (number|null);
}

/** Represents a vec2. */
export class vec2 implements Ivec2 {

    /**
     * Constructs a new vec2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec2);

    /** vec2 x. */
    public x: number;

    /** vec2 y. */
    public y: number;

    /**
     * Creates a new vec2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec2 instance
     */
    public static create(properties?: Ivec2): vec2;

    /**
     * Encodes the specified vec2 message. Does not implicitly {@link vec2.verify|verify} messages.
     * @param message vec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec2 message, length delimited. Does not implicitly {@link vec2.verify|verify} messages.
     * @param message vec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec2;

    /**
     * Decodes a vec2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec2;

    /**
     * Verifies a vec2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec2
     */
    public static fromObject(object: { [k: string]: any }): vec2;

    /**
     * Creates a plain object from a vec2 message. Also converts values to other types if specified.
     * @param message vec2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec2. */
export interface Ifvec2 {

    /** fvec2 x */
    x?: (number|null);

    /** fvec2 y */
    y?: (number|null);
}

/** Represents a fvec2. */
export class fvec2 implements Ifvec2 {

    /**
     * Constructs a new fvec2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec2);

    /** fvec2 x. */
    public x: number;

    /** fvec2 y. */
    public y: number;

    /**
     * Creates a new fvec2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec2 instance
     */
    public static create(properties?: Ifvec2): fvec2;

    /**
     * Encodes the specified fvec2 message. Does not implicitly {@link fvec2.verify|verify} messages.
     * @param message fvec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec2 message, length delimited. Does not implicitly {@link fvec2.verify|verify} messages.
     * @param message fvec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec2;

    /**
     * Decodes a fvec2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec2;

    /**
     * Verifies a fvec2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec2
     */
    public static fromObject(object: { [k: string]: any }): fvec2;

    /**
     * Creates a plain object from a fvec2 message. Also converts values to other types if specified.
     * @param message fvec2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec2. */
export interface Iivec2 {

    /** ivec2 x */
    x?: (number|null);

    /** ivec2 y */
    y?: (number|null);
}

/** Represents an ivec2. */
export class ivec2 implements Iivec2 {

    /**
     * Constructs a new ivec2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec2);

    /** ivec2 x. */
    public x: number;

    /** ivec2 y. */
    public y: number;

    /**
     * Creates a new ivec2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec2 instance
     */
    public static create(properties?: Iivec2): ivec2;

    /**
     * Encodes the specified ivec2 message. Does not implicitly {@link ivec2.verify|verify} messages.
     * @param message ivec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec2 message, length delimited. Does not implicitly {@link ivec2.verify|verify} messages.
     * @param message ivec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec2;

    /**
     * Decodes an ivec2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec2;

    /**
     * Verifies an ivec2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec2
     */
    public static fromObject(object: { [k: string]: any }): ivec2;

    /**
     * Creates a plain object from an ivec2 message. Also converts values to other types if specified.
     * @param message ivec2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec2. */
export interface Iuvec2 {

    /** uvec2 x */
    x?: (number|null);

    /** uvec2 y */
    y?: (number|null);
}

/** Represents an uvec2. */
export class uvec2 implements Iuvec2 {

    /**
     * Constructs a new uvec2.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec2);

    /** uvec2 x. */
    public x: number;

    /** uvec2 y. */
    public y: number;

    /**
     * Creates a new uvec2 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec2 instance
     */
    public static create(properties?: Iuvec2): uvec2;

    /**
     * Encodes the specified uvec2 message. Does not implicitly {@link uvec2.verify|verify} messages.
     * @param message uvec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec2 message, length delimited. Does not implicitly {@link uvec2.verify|verify} messages.
     * @param message uvec2 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec2, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec2 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec2;

    /**
     * Decodes an uvec2 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec2
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec2;

    /**
     * Verifies an uvec2 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec2 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec2
     */
    public static fromObject(object: { [k: string]: any }): uvec2;

    /**
     * Creates a plain object from an uvec2 message. Also converts values to other types if specified.
     * @param message uvec2
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec2, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec2 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec3. */
export interface Ivec3 {

    /** vec3 x */
    x?: (number|null);

    /** vec3 y */
    y?: (number|null);

    /** vec3 z */
    z?: (number|null);
}

/** Represents a vec3. */
export class vec3 implements Ivec3 {

    /**
     * Constructs a new vec3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec3);

    /** vec3 x. */
    public x: number;

    /** vec3 y. */
    public y: number;

    /** vec3 z. */
    public z: number;

    /**
     * Creates a new vec3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec3 instance
     */
    public static create(properties?: Ivec3): vec3;

    /**
     * Encodes the specified vec3 message. Does not implicitly {@link vec3.verify|verify} messages.
     * @param message vec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec3 message, length delimited. Does not implicitly {@link vec3.verify|verify} messages.
     * @param message vec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec3;

    /**
     * Decodes a vec3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec3;

    /**
     * Verifies a vec3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec3
     */
    public static fromObject(object: { [k: string]: any }): vec3;

    /**
     * Creates a plain object from a vec3 message. Also converts values to other types if specified.
     * @param message vec3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec3. */
export interface Ifvec3 {

    /** fvec3 x */
    x?: (number|null);

    /** fvec3 y */
    y?: (number|null);

    /** fvec3 z */
    z?: (number|null);
}

/** Represents a fvec3. */
export class fvec3 implements Ifvec3 {

    /**
     * Constructs a new fvec3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec3);

    /** fvec3 x. */
    public x: number;

    /** fvec3 y. */
    public y: number;

    /** fvec3 z. */
    public z: number;

    /**
     * Creates a new fvec3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec3 instance
     */
    public static create(properties?: Ifvec3): fvec3;

    /**
     * Encodes the specified fvec3 message. Does not implicitly {@link fvec3.verify|verify} messages.
     * @param message fvec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec3 message, length delimited. Does not implicitly {@link fvec3.verify|verify} messages.
     * @param message fvec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec3;

    /**
     * Decodes a fvec3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec3;

    /**
     * Verifies a fvec3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec3
     */
    public static fromObject(object: { [k: string]: any }): fvec3;

    /**
     * Creates a plain object from a fvec3 message. Also converts values to other types if specified.
     * @param message fvec3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec3. */
export interface Iivec3 {

    /** ivec3 x */
    x?: (number|null);

    /** ivec3 y */
    y?: (number|null);

    /** ivec3 z */
    z?: (number|null);
}

/** Represents an ivec3. */
export class ivec3 implements Iivec3 {

    /**
     * Constructs a new ivec3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec3);

    /** ivec3 x. */
    public x: number;

    /** ivec3 y. */
    public y: number;

    /** ivec3 z. */
    public z: number;

    /**
     * Creates a new ivec3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec3 instance
     */
    public static create(properties?: Iivec3): ivec3;

    /**
     * Encodes the specified ivec3 message. Does not implicitly {@link ivec3.verify|verify} messages.
     * @param message ivec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec3 message, length delimited. Does not implicitly {@link ivec3.verify|verify} messages.
     * @param message ivec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec3;

    /**
     * Decodes an ivec3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec3;

    /**
     * Verifies an ivec3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec3
     */
    public static fromObject(object: { [k: string]: any }): ivec3;

    /**
     * Creates a plain object from an ivec3 message. Also converts values to other types if specified.
     * @param message ivec3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec3. */
export interface Iuvec3 {

    /** uvec3 x */
    x?: (number|null);

    /** uvec3 y */
    y?: (number|null);

    /** uvec3 z */
    z?: (number|null);
}

/** Represents an uvec3. */
export class uvec3 implements Iuvec3 {

    /**
     * Constructs a new uvec3.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec3);

    /** uvec3 x. */
    public x: number;

    /** uvec3 y. */
    public y: number;

    /** uvec3 z. */
    public z: number;

    /**
     * Creates a new uvec3 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec3 instance
     */
    public static create(properties?: Iuvec3): uvec3;

    /**
     * Encodes the specified uvec3 message. Does not implicitly {@link uvec3.verify|verify} messages.
     * @param message uvec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec3 message, length delimited. Does not implicitly {@link uvec3.verify|verify} messages.
     * @param message uvec3 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec3, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec3 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec3;

    /**
     * Decodes an uvec3 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec3
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec3;

    /**
     * Verifies an uvec3 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec3 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec3
     */
    public static fromObject(object: { [k: string]: any }): uvec3;

    /**
     * Creates a plain object from an uvec3 message. Also converts values to other types if specified.
     * @param message uvec3
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec3, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec3 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec4. */
export interface Ivec4 {

    /** vec4 x */
    x?: (number|null);

    /** vec4 y */
    y?: (number|null);

    /** vec4 z */
    z?: (number|null);

    /** vec4 t */
    t?: (number|null);
}

/** Represents a vec4. */
export class vec4 implements Ivec4 {

    /**
     * Constructs a new vec4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec4);

    /** vec4 x. */
    public x: number;

    /** vec4 y. */
    public y: number;

    /** vec4 z. */
    public z: number;

    /** vec4 t. */
    public t: number;

    /**
     * Creates a new vec4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec4 instance
     */
    public static create(properties?: Ivec4): vec4;

    /**
     * Encodes the specified vec4 message. Does not implicitly {@link vec4.verify|verify} messages.
     * @param message vec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec4 message, length delimited. Does not implicitly {@link vec4.verify|verify} messages.
     * @param message vec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec4;

    /**
     * Decodes a vec4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec4;

    /**
     * Verifies a vec4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec4
     */
    public static fromObject(object: { [k: string]: any }): vec4;

    /**
     * Creates a plain object from a vec4 message. Also converts values to other types if specified.
     * @param message vec4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec4. */
export interface Ifvec4 {

    /** fvec4 x */
    x?: (number|null);

    /** fvec4 y */
    y?: (number|null);

    /** fvec4 z */
    z?: (number|null);

    /** fvec4 t */
    t?: (number|null);
}

/** Represents a fvec4. */
export class fvec4 implements Ifvec4 {

    /**
     * Constructs a new fvec4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec4);

    /** fvec4 x. */
    public x: number;

    /** fvec4 y. */
    public y: number;

    /** fvec4 z. */
    public z: number;

    /** fvec4 t. */
    public t: number;

    /**
     * Creates a new fvec4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec4 instance
     */
    public static create(properties?: Ifvec4): fvec4;

    /**
     * Encodes the specified fvec4 message. Does not implicitly {@link fvec4.verify|verify} messages.
     * @param message fvec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec4 message, length delimited. Does not implicitly {@link fvec4.verify|verify} messages.
     * @param message fvec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec4;

    /**
     * Decodes a fvec4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec4;

    /**
     * Verifies a fvec4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec4
     */
    public static fromObject(object: { [k: string]: any }): fvec4;

    /**
     * Creates a plain object from a fvec4 message. Also converts values to other types if specified.
     * @param message fvec4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec4. */
export interface Iivec4 {

    /** ivec4 x */
    x?: (number|null);

    /** ivec4 y */
    y?: (number|null);

    /** ivec4 z */
    z?: (number|null);

    /** ivec4 t */
    t?: (number|null);
}

/** Represents an ivec4. */
export class ivec4 implements Iivec4 {

    /**
     * Constructs a new ivec4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec4);

    /** ivec4 x. */
    public x: number;

    /** ivec4 y. */
    public y: number;

    /** ivec4 z. */
    public z: number;

    /** ivec4 t. */
    public t: number;

    /**
     * Creates a new ivec4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec4 instance
     */
    public static create(properties?: Iivec4): ivec4;

    /**
     * Encodes the specified ivec4 message. Does not implicitly {@link ivec4.verify|verify} messages.
     * @param message ivec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec4 message, length delimited. Does not implicitly {@link ivec4.verify|verify} messages.
     * @param message ivec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec4;

    /**
     * Decodes an ivec4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec4;

    /**
     * Verifies an ivec4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec4
     */
    public static fromObject(object: { [k: string]: any }): ivec4;

    /**
     * Creates a plain object from an ivec4 message. Also converts values to other types if specified.
     * @param message ivec4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec4. */
export interface Iuvec4 {

    /** uvec4 x */
    x?: (number|null);

    /** uvec4 y */
    y?: (number|null);

    /** uvec4 z */
    z?: (number|null);

    /** uvec4 t */
    t?: (number|null);
}

/** Represents an uvec4. */
export class uvec4 implements Iuvec4 {

    /**
     * Constructs a new uvec4.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec4);

    /** uvec4 x. */
    public x: number;

    /** uvec4 y. */
    public y: number;

    /** uvec4 z. */
    public z: number;

    /** uvec4 t. */
    public t: number;

    /**
     * Creates a new uvec4 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec4 instance
     */
    public static create(properties?: Iuvec4): uvec4;

    /**
     * Encodes the specified uvec4 message. Does not implicitly {@link uvec4.verify|verify} messages.
     * @param message uvec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec4 message, length delimited. Does not implicitly {@link uvec4.verify|verify} messages.
     * @param message uvec4 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec4, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec4 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec4;

    /**
     * Decodes an uvec4 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec4
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec4;

    /**
     * Verifies an uvec4 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec4 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec4
     */
    public static fromObject(object: { [k: string]: any }): uvec4;

    /**
     * Creates a plain object from an uvec4 message. Also converts values to other types if specified.
     * @param message uvec4
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec4, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec4 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec5. */
export interface Ivec5 {

    /** vec5 s0 */
    s0?: (number|null);

    /** vec5 s1 */
    s1?: (number|null);

    /** vec5 s2 */
    s2?: (number|null);

    /** vec5 s3 */
    s3?: (number|null);

    /** vec5 s4 */
    s4?: (number|null);
}

/** Represents a vec5. */
export class vec5 implements Ivec5 {

    /**
     * Constructs a new vec5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec5);

    /** vec5 s0. */
    public s0: number;

    /** vec5 s1. */
    public s1: number;

    /** vec5 s2. */
    public s2: number;

    /** vec5 s3. */
    public s3: number;

    /** vec5 s4. */
    public s4: number;

    /**
     * Creates a new vec5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec5 instance
     */
    public static create(properties?: Ivec5): vec5;

    /**
     * Encodes the specified vec5 message. Does not implicitly {@link vec5.verify|verify} messages.
     * @param message vec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec5 message, length delimited. Does not implicitly {@link vec5.verify|verify} messages.
     * @param message vec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec5;

    /**
     * Decodes a vec5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec5;

    /**
     * Verifies a vec5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec5
     */
    public static fromObject(object: { [k: string]: any }): vec5;

    /**
     * Creates a plain object from a vec5 message. Also converts values to other types if specified.
     * @param message vec5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec5. */
export interface Ifvec5 {

    /** fvec5 s0 */
    s0?: (number|null);

    /** fvec5 s1 */
    s1?: (number|null);

    /** fvec5 s2 */
    s2?: (number|null);

    /** fvec5 s3 */
    s3?: (number|null);

    /** fvec5 s4 */
    s4?: (number|null);
}

/** Represents a fvec5. */
export class fvec5 implements Ifvec5 {

    /**
     * Constructs a new fvec5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec5);

    /** fvec5 s0. */
    public s0: number;

    /** fvec5 s1. */
    public s1: number;

    /** fvec5 s2. */
    public s2: number;

    /** fvec5 s3. */
    public s3: number;

    /** fvec5 s4. */
    public s4: number;

    /**
     * Creates a new fvec5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec5 instance
     */
    public static create(properties?: Ifvec5): fvec5;

    /**
     * Encodes the specified fvec5 message. Does not implicitly {@link fvec5.verify|verify} messages.
     * @param message fvec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec5 message, length delimited. Does not implicitly {@link fvec5.verify|verify} messages.
     * @param message fvec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec5;

    /**
     * Decodes a fvec5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec5;

    /**
     * Verifies a fvec5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec5
     */
    public static fromObject(object: { [k: string]: any }): fvec5;

    /**
     * Creates a plain object from a fvec5 message. Also converts values to other types if specified.
     * @param message fvec5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec5. */
export interface Iivec5 {

    /** ivec5 s0 */
    s0?: (number|null);

    /** ivec5 s1 */
    s1?: (number|null);

    /** ivec5 s2 */
    s2?: (number|null);

    /** ivec5 s3 */
    s3?: (number|null);

    /** ivec5 s4 */
    s4?: (number|null);
}

/** Represents an ivec5. */
export class ivec5 implements Iivec5 {

    /**
     * Constructs a new ivec5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec5);

    /** ivec5 s0. */
    public s0: number;

    /** ivec5 s1. */
    public s1: number;

    /** ivec5 s2. */
    public s2: number;

    /** ivec5 s3. */
    public s3: number;

    /** ivec5 s4. */
    public s4: number;

    /**
     * Creates a new ivec5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec5 instance
     */
    public static create(properties?: Iivec5): ivec5;

    /**
     * Encodes the specified ivec5 message. Does not implicitly {@link ivec5.verify|verify} messages.
     * @param message ivec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec5 message, length delimited. Does not implicitly {@link ivec5.verify|verify} messages.
     * @param message ivec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec5;

    /**
     * Decodes an ivec5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec5;

    /**
     * Verifies an ivec5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec5
     */
    public static fromObject(object: { [k: string]: any }): ivec5;

    /**
     * Creates a plain object from an ivec5 message. Also converts values to other types if specified.
     * @param message ivec5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec5. */
export interface Iuvec5 {

    /** uvec5 s0 */
    s0?: (number|null);

    /** uvec5 s1 */
    s1?: (number|null);

    /** uvec5 s2 */
    s2?: (number|null);

    /** uvec5 s3 */
    s3?: (number|null);

    /** uvec5 s4 */
    s4?: (number|null);
}

/** Represents an uvec5. */
export class uvec5 implements Iuvec5 {

    /**
     * Constructs a new uvec5.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec5);

    /** uvec5 s0. */
    public s0: number;

    /** uvec5 s1. */
    public s1: number;

    /** uvec5 s2. */
    public s2: number;

    /** uvec5 s3. */
    public s3: number;

    /** uvec5 s4. */
    public s4: number;

    /**
     * Creates a new uvec5 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec5 instance
     */
    public static create(properties?: Iuvec5): uvec5;

    /**
     * Encodes the specified uvec5 message. Does not implicitly {@link uvec5.verify|verify} messages.
     * @param message uvec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec5 message, length delimited. Does not implicitly {@link uvec5.verify|verify} messages.
     * @param message uvec5 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec5, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec5 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec5;

    /**
     * Decodes an uvec5 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec5
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec5;

    /**
     * Verifies an uvec5 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec5 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec5
     */
    public static fromObject(object: { [k: string]: any }): uvec5;

    /**
     * Creates a plain object from an uvec5 message. Also converts values to other types if specified.
     * @param message uvec5
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec5, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec5 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec6. */
export interface Ivec6 {

    /** vec6 s0 */
    s0?: (number|null);

    /** vec6 s1 */
    s1?: (number|null);

    /** vec6 s2 */
    s2?: (number|null);

    /** vec6 s3 */
    s3?: (number|null);

    /** vec6 s4 */
    s4?: (number|null);

    /** vec6 s5 */
    s5?: (number|null);
}

/** Represents a vec6. */
export class vec6 implements Ivec6 {

    /**
     * Constructs a new vec6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec6);

    /** vec6 s0. */
    public s0: number;

    /** vec6 s1. */
    public s1: number;

    /** vec6 s2. */
    public s2: number;

    /** vec6 s3. */
    public s3: number;

    /** vec6 s4. */
    public s4: number;

    /** vec6 s5. */
    public s5: number;

    /**
     * Creates a new vec6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec6 instance
     */
    public static create(properties?: Ivec6): vec6;

    /**
     * Encodes the specified vec6 message. Does not implicitly {@link vec6.verify|verify} messages.
     * @param message vec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec6 message, length delimited. Does not implicitly {@link vec6.verify|verify} messages.
     * @param message vec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec6;

    /**
     * Decodes a vec6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec6;

    /**
     * Verifies a vec6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec6
     */
    public static fromObject(object: { [k: string]: any }): vec6;

    /**
     * Creates a plain object from a vec6 message. Also converts values to other types if specified.
     * @param message vec6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec6. */
export interface Ifvec6 {

    /** fvec6 s0 */
    s0?: (number|null);

    /** fvec6 s1 */
    s1?: (number|null);

    /** fvec6 s2 */
    s2?: (number|null);

    /** fvec6 s3 */
    s3?: (number|null);

    /** fvec6 s4 */
    s4?: (number|null);

    /** fvec6 s5 */
    s5?: (number|null);
}

/** Represents a fvec6. */
export class fvec6 implements Ifvec6 {

    /**
     * Constructs a new fvec6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec6);

    /** fvec6 s0. */
    public s0: number;

    /** fvec6 s1. */
    public s1: number;

    /** fvec6 s2. */
    public s2: number;

    /** fvec6 s3. */
    public s3: number;

    /** fvec6 s4. */
    public s4: number;

    /** fvec6 s5. */
    public s5: number;

    /**
     * Creates a new fvec6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec6 instance
     */
    public static create(properties?: Ifvec6): fvec6;

    /**
     * Encodes the specified fvec6 message. Does not implicitly {@link fvec6.verify|verify} messages.
     * @param message fvec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec6 message, length delimited. Does not implicitly {@link fvec6.verify|verify} messages.
     * @param message fvec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec6;

    /**
     * Decodes a fvec6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec6;

    /**
     * Verifies a fvec6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec6
     */
    public static fromObject(object: { [k: string]: any }): fvec6;

    /**
     * Creates a plain object from a fvec6 message. Also converts values to other types if specified.
     * @param message fvec6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec6. */
export interface Iivec6 {

    /** ivec6 s0 */
    s0?: (number|null);

    /** ivec6 s1 */
    s1?: (number|null);

    /** ivec6 s2 */
    s2?: (number|null);

    /** ivec6 s3 */
    s3?: (number|null);

    /** ivec6 s4 */
    s4?: (number|null);

    /** ivec6 s5 */
    s5?: (number|null);
}

/** Represents an ivec6. */
export class ivec6 implements Iivec6 {

    /**
     * Constructs a new ivec6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec6);

    /** ivec6 s0. */
    public s0: number;

    /** ivec6 s1. */
    public s1: number;

    /** ivec6 s2. */
    public s2: number;

    /** ivec6 s3. */
    public s3: number;

    /** ivec6 s4. */
    public s4: number;

    /** ivec6 s5. */
    public s5: number;

    /**
     * Creates a new ivec6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec6 instance
     */
    public static create(properties?: Iivec6): ivec6;

    /**
     * Encodes the specified ivec6 message. Does not implicitly {@link ivec6.verify|verify} messages.
     * @param message ivec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec6 message, length delimited. Does not implicitly {@link ivec6.verify|verify} messages.
     * @param message ivec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec6;

    /**
     * Decodes an ivec6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec6;

    /**
     * Verifies an ivec6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec6
     */
    public static fromObject(object: { [k: string]: any }): ivec6;

    /**
     * Creates a plain object from an ivec6 message. Also converts values to other types if specified.
     * @param message ivec6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec6. */
export interface Iuvec6 {

    /** uvec6 s0 */
    s0?: (number|null);

    /** uvec6 s1 */
    s1?: (number|null);

    /** uvec6 s2 */
    s2?: (number|null);

    /** uvec6 s3 */
    s3?: (number|null);

    /** uvec6 s4 */
    s4?: (number|null);

    /** uvec6 s5 */
    s5?: (number|null);
}

/** Represents an uvec6. */
export class uvec6 implements Iuvec6 {

    /**
     * Constructs a new uvec6.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec6);

    /** uvec6 s0. */
    public s0: number;

    /** uvec6 s1. */
    public s1: number;

    /** uvec6 s2. */
    public s2: number;

    /** uvec6 s3. */
    public s3: number;

    /** uvec6 s4. */
    public s4: number;

    /** uvec6 s5. */
    public s5: number;

    /**
     * Creates a new uvec6 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec6 instance
     */
    public static create(properties?: Iuvec6): uvec6;

    /**
     * Encodes the specified uvec6 message. Does not implicitly {@link uvec6.verify|verify} messages.
     * @param message uvec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec6 message, length delimited. Does not implicitly {@link uvec6.verify|verify} messages.
     * @param message uvec6 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec6, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec6 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec6;

    /**
     * Decodes an uvec6 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec6
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec6;

    /**
     * Verifies an uvec6 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec6 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec6
     */
    public static fromObject(object: { [k: string]: any }): uvec6;

    /**
     * Creates a plain object from an uvec6 message. Also converts values to other types if specified.
     * @param message uvec6
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec6, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec6 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec7. */
export interface Ivec7 {

    /** vec7 s0 */
    s0?: (number|null);

    /** vec7 s1 */
    s1?: (number|null);

    /** vec7 s2 */
    s2?: (number|null);

    /** vec7 s3 */
    s3?: (number|null);

    /** vec7 s4 */
    s4?: (number|null);

    /** vec7 s5 */
    s5?: (number|null);

    /** vec7 s6 */
    s6?: (number|null);
}

/** Represents a vec7. */
export class vec7 implements Ivec7 {

    /**
     * Constructs a new vec7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec7);

    /** vec7 s0. */
    public s0: number;

    /** vec7 s1. */
    public s1: number;

    /** vec7 s2. */
    public s2: number;

    /** vec7 s3. */
    public s3: number;

    /** vec7 s4. */
    public s4: number;

    /** vec7 s5. */
    public s5: number;

    /** vec7 s6. */
    public s6: number;

    /**
     * Creates a new vec7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec7 instance
     */
    public static create(properties?: Ivec7): vec7;

    /**
     * Encodes the specified vec7 message. Does not implicitly {@link vec7.verify|verify} messages.
     * @param message vec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec7 message, length delimited. Does not implicitly {@link vec7.verify|verify} messages.
     * @param message vec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec7;

    /**
     * Decodes a vec7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec7;

    /**
     * Verifies a vec7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec7
     */
    public static fromObject(object: { [k: string]: any }): vec7;

    /**
     * Creates a plain object from a vec7 message. Also converts values to other types if specified.
     * @param message vec7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec7. */
export interface Ifvec7 {

    /** fvec7 s0 */
    s0?: (number|null);

    /** fvec7 s1 */
    s1?: (number|null);

    /** fvec7 s2 */
    s2?: (number|null);

    /** fvec7 s3 */
    s3?: (number|null);

    /** fvec7 s4 */
    s4?: (number|null);

    /** fvec7 s5 */
    s5?: (number|null);

    /** fvec7 s6 */
    s6?: (number|null);
}

/** Represents a fvec7. */
export class fvec7 implements Ifvec7 {

    /**
     * Constructs a new fvec7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec7);

    /** fvec7 s0. */
    public s0: number;

    /** fvec7 s1. */
    public s1: number;

    /** fvec7 s2. */
    public s2: number;

    /** fvec7 s3. */
    public s3: number;

    /** fvec7 s4. */
    public s4: number;

    /** fvec7 s5. */
    public s5: number;

    /** fvec7 s6. */
    public s6: number;

    /**
     * Creates a new fvec7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec7 instance
     */
    public static create(properties?: Ifvec7): fvec7;

    /**
     * Encodes the specified fvec7 message. Does not implicitly {@link fvec7.verify|verify} messages.
     * @param message fvec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec7 message, length delimited. Does not implicitly {@link fvec7.verify|verify} messages.
     * @param message fvec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec7;

    /**
     * Decodes a fvec7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec7;

    /**
     * Verifies a fvec7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec7
     */
    public static fromObject(object: { [k: string]: any }): fvec7;

    /**
     * Creates a plain object from a fvec7 message. Also converts values to other types if specified.
     * @param message fvec7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec7. */
export interface Iivec7 {

    /** ivec7 s0 */
    s0?: (number|null);

    /** ivec7 s1 */
    s1?: (number|null);

    /** ivec7 s2 */
    s2?: (number|null);

    /** ivec7 s3 */
    s3?: (number|null);

    /** ivec7 s4 */
    s4?: (number|null);

    /** ivec7 s5 */
    s5?: (number|null);

    /** ivec7 s6 */
    s6?: (number|null);
}

/** Represents an ivec7. */
export class ivec7 implements Iivec7 {

    /**
     * Constructs a new ivec7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec7);

    /** ivec7 s0. */
    public s0: number;

    /** ivec7 s1. */
    public s1: number;

    /** ivec7 s2. */
    public s2: number;

    /** ivec7 s3. */
    public s3: number;

    /** ivec7 s4. */
    public s4: number;

    /** ivec7 s5. */
    public s5: number;

    /** ivec7 s6. */
    public s6: number;

    /**
     * Creates a new ivec7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec7 instance
     */
    public static create(properties?: Iivec7): ivec7;

    /**
     * Encodes the specified ivec7 message. Does not implicitly {@link ivec7.verify|verify} messages.
     * @param message ivec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec7 message, length delimited. Does not implicitly {@link ivec7.verify|verify} messages.
     * @param message ivec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec7;

    /**
     * Decodes an ivec7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec7;

    /**
     * Verifies an ivec7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec7
     */
    public static fromObject(object: { [k: string]: any }): ivec7;

    /**
     * Creates a plain object from an ivec7 message. Also converts values to other types if specified.
     * @param message ivec7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec7. */
export interface Iuvec7 {

    /** uvec7 s0 */
    s0?: (number|null);

    /** uvec7 s1 */
    s1?: (number|null);

    /** uvec7 s2 */
    s2?: (number|null);

    /** uvec7 s3 */
    s3?: (number|null);

    /** uvec7 s4 */
    s4?: (number|null);

    /** uvec7 s5 */
    s5?: (number|null);

    /** uvec7 s6 */
    s6?: (number|null);
}

/** Represents an uvec7. */
export class uvec7 implements Iuvec7 {

    /**
     * Constructs a new uvec7.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec7);

    /** uvec7 s0. */
    public s0: number;

    /** uvec7 s1. */
    public s1: number;

    /** uvec7 s2. */
    public s2: number;

    /** uvec7 s3. */
    public s3: number;

    /** uvec7 s4. */
    public s4: number;

    /** uvec7 s5. */
    public s5: number;

    /** uvec7 s6. */
    public s6: number;

    /**
     * Creates a new uvec7 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec7 instance
     */
    public static create(properties?: Iuvec7): uvec7;

    /**
     * Encodes the specified uvec7 message. Does not implicitly {@link uvec7.verify|verify} messages.
     * @param message uvec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec7 message, length delimited. Does not implicitly {@link uvec7.verify|verify} messages.
     * @param message uvec7 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec7, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec7 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec7;

    /**
     * Decodes an uvec7 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec7
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec7;

    /**
     * Verifies an uvec7 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec7 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec7
     */
    public static fromObject(object: { [k: string]: any }): uvec7;

    /**
     * Creates a plain object from an uvec7 message. Also converts values to other types if specified.
     * @param message uvec7
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec7, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec7 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec8. */
export interface Ivec8 {

    /** vec8 s0 */
    s0?: (number|null);

    /** vec8 s1 */
    s1?: (number|null);

    /** vec8 s2 */
    s2?: (number|null);

    /** vec8 s3 */
    s3?: (number|null);

    /** vec8 s4 */
    s4?: (number|null);

    /** vec8 s5 */
    s5?: (number|null);

    /** vec8 s6 */
    s6?: (number|null);

    /** vec8 s7 */
    s7?: (number|null);
}

/** Represents a vec8. */
export class vec8 implements Ivec8 {

    /**
     * Constructs a new vec8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec8);

    /** vec8 s0. */
    public s0: number;

    /** vec8 s1. */
    public s1: number;

    /** vec8 s2. */
    public s2: number;

    /** vec8 s3. */
    public s3: number;

    /** vec8 s4. */
    public s4: number;

    /** vec8 s5. */
    public s5: number;

    /** vec8 s6. */
    public s6: number;

    /** vec8 s7. */
    public s7: number;

    /**
     * Creates a new vec8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec8 instance
     */
    public static create(properties?: Ivec8): vec8;

    /**
     * Encodes the specified vec8 message. Does not implicitly {@link vec8.verify|verify} messages.
     * @param message vec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec8 message, length delimited. Does not implicitly {@link vec8.verify|verify} messages.
     * @param message vec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec8;

    /**
     * Decodes a vec8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec8;

    /**
     * Verifies a vec8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec8
     */
    public static fromObject(object: { [k: string]: any }): vec8;

    /**
     * Creates a plain object from a vec8 message. Also converts values to other types if specified.
     * @param message vec8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec8. */
export interface Ifvec8 {

    /** fvec8 s0 */
    s0?: (number|null);

    /** fvec8 s1 */
    s1?: (number|null);

    /** fvec8 s2 */
    s2?: (number|null);

    /** fvec8 s3 */
    s3?: (number|null);

    /** fvec8 s4 */
    s4?: (number|null);

    /** fvec8 s5 */
    s5?: (number|null);

    /** fvec8 s6 */
    s6?: (number|null);

    /** fvec8 s7 */
    s7?: (number|null);
}

/** Represents a fvec8. */
export class fvec8 implements Ifvec8 {

    /**
     * Constructs a new fvec8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec8);

    /** fvec8 s0. */
    public s0: number;

    /** fvec8 s1. */
    public s1: number;

    /** fvec8 s2. */
    public s2: number;

    /** fvec8 s3. */
    public s3: number;

    /** fvec8 s4. */
    public s4: number;

    /** fvec8 s5. */
    public s5: number;

    /** fvec8 s6. */
    public s6: number;

    /** fvec8 s7. */
    public s7: number;

    /**
     * Creates a new fvec8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec8 instance
     */
    public static create(properties?: Ifvec8): fvec8;

    /**
     * Encodes the specified fvec8 message. Does not implicitly {@link fvec8.verify|verify} messages.
     * @param message fvec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec8 message, length delimited. Does not implicitly {@link fvec8.verify|verify} messages.
     * @param message fvec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec8;

    /**
     * Decodes a fvec8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec8;

    /**
     * Verifies a fvec8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec8
     */
    public static fromObject(object: { [k: string]: any }): fvec8;

    /**
     * Creates a plain object from a fvec8 message. Also converts values to other types if specified.
     * @param message fvec8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec8. */
export interface Iivec8 {

    /** ivec8 s0 */
    s0?: (number|null);

    /** ivec8 s1 */
    s1?: (number|null);

    /** ivec8 s2 */
    s2?: (number|null);

    /** ivec8 s3 */
    s3?: (number|null);

    /** ivec8 s4 */
    s4?: (number|null);

    /** ivec8 s5 */
    s5?: (number|null);

    /** ivec8 s6 */
    s6?: (number|null);

    /** ivec8 s7 */
    s7?: (number|null);
}

/** Represents an ivec8. */
export class ivec8 implements Iivec8 {

    /**
     * Constructs a new ivec8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec8);

    /** ivec8 s0. */
    public s0: number;

    /** ivec8 s1. */
    public s1: number;

    /** ivec8 s2. */
    public s2: number;

    /** ivec8 s3. */
    public s3: number;

    /** ivec8 s4. */
    public s4: number;

    /** ivec8 s5. */
    public s5: number;

    /** ivec8 s6. */
    public s6: number;

    /** ivec8 s7. */
    public s7: number;

    /**
     * Creates a new ivec8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec8 instance
     */
    public static create(properties?: Iivec8): ivec8;

    /**
     * Encodes the specified ivec8 message. Does not implicitly {@link ivec8.verify|verify} messages.
     * @param message ivec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec8 message, length delimited. Does not implicitly {@link ivec8.verify|verify} messages.
     * @param message ivec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec8;

    /**
     * Decodes an ivec8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec8;

    /**
     * Verifies an ivec8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec8
     */
    public static fromObject(object: { [k: string]: any }): ivec8;

    /**
     * Creates a plain object from an ivec8 message. Also converts values to other types if specified.
     * @param message ivec8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec8. */
export interface Iuvec8 {

    /** uvec8 s0 */
    s0?: (number|null);

    /** uvec8 s1 */
    s1?: (number|null);

    /** uvec8 s2 */
    s2?: (number|null);

    /** uvec8 s3 */
    s3?: (number|null);

    /** uvec8 s4 */
    s4?: (number|null);

    /** uvec8 s5 */
    s5?: (number|null);

    /** uvec8 s6 */
    s6?: (number|null);

    /** uvec8 s7 */
    s7?: (number|null);
}

/** Represents an uvec8. */
export class uvec8 implements Iuvec8 {

    /**
     * Constructs a new uvec8.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec8);

    /** uvec8 s0. */
    public s0: number;

    /** uvec8 s1. */
    public s1: number;

    /** uvec8 s2. */
    public s2: number;

    /** uvec8 s3. */
    public s3: number;

    /** uvec8 s4. */
    public s4: number;

    /** uvec8 s5. */
    public s5: number;

    /** uvec8 s6. */
    public s6: number;

    /** uvec8 s7. */
    public s7: number;

    /**
     * Creates a new uvec8 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec8 instance
     */
    public static create(properties?: Iuvec8): uvec8;

    /**
     * Encodes the specified uvec8 message. Does not implicitly {@link uvec8.verify|verify} messages.
     * @param message uvec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec8 message, length delimited. Does not implicitly {@link uvec8.verify|verify} messages.
     * @param message uvec8 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec8, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec8 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec8;

    /**
     * Decodes an uvec8 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec8
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec8;

    /**
     * Verifies an uvec8 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec8 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec8
     */
    public static fromObject(object: { [k: string]: any }): uvec8;

    /**
     * Creates a plain object from an uvec8 message. Also converts values to other types if specified.
     * @param message uvec8
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec8, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec8 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec9. */
export interface Ivec9 {

    /** vec9 s0 */
    s0?: (number|null);

    /** vec9 s1 */
    s1?: (number|null);

    /** vec9 s2 */
    s2?: (number|null);

    /** vec9 s3 */
    s3?: (number|null);

    /** vec9 s4 */
    s4?: (number|null);

    /** vec9 s5 */
    s5?: (number|null);

    /** vec9 s6 */
    s6?: (number|null);

    /** vec9 s7 */
    s7?: (number|null);

    /** vec9 s8 */
    s8?: (number|null);
}

/** Represents a vec9. */
export class vec9 implements Ivec9 {

    /**
     * Constructs a new vec9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec9);

    /** vec9 s0. */
    public s0: number;

    /** vec9 s1. */
    public s1: number;

    /** vec9 s2. */
    public s2: number;

    /** vec9 s3. */
    public s3: number;

    /** vec9 s4. */
    public s4: number;

    /** vec9 s5. */
    public s5: number;

    /** vec9 s6. */
    public s6: number;

    /** vec9 s7. */
    public s7: number;

    /** vec9 s8. */
    public s8: number;

    /**
     * Creates a new vec9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec9 instance
     */
    public static create(properties?: Ivec9): vec9;

    /**
     * Encodes the specified vec9 message. Does not implicitly {@link vec9.verify|verify} messages.
     * @param message vec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec9 message, length delimited. Does not implicitly {@link vec9.verify|verify} messages.
     * @param message vec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec9;

    /**
     * Decodes a vec9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec9;

    /**
     * Verifies a vec9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec9
     */
    public static fromObject(object: { [k: string]: any }): vec9;

    /**
     * Creates a plain object from a vec9 message. Also converts values to other types if specified.
     * @param message vec9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec9. */
export interface Ifvec9 {

    /** fvec9 s0 */
    s0?: (number|null);

    /** fvec9 s1 */
    s1?: (number|null);

    /** fvec9 s2 */
    s2?: (number|null);

    /** fvec9 s3 */
    s3?: (number|null);

    /** fvec9 s4 */
    s4?: (number|null);

    /** fvec9 s5 */
    s5?: (number|null);

    /** fvec9 s6 */
    s6?: (number|null);

    /** fvec9 s7 */
    s7?: (number|null);

    /** fvec9 s8 */
    s8?: (number|null);
}

/** Represents a fvec9. */
export class fvec9 implements Ifvec9 {

    /**
     * Constructs a new fvec9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec9);

    /** fvec9 s0. */
    public s0: number;

    /** fvec9 s1. */
    public s1: number;

    /** fvec9 s2. */
    public s2: number;

    /** fvec9 s3. */
    public s3: number;

    /** fvec9 s4. */
    public s4: number;

    /** fvec9 s5. */
    public s5: number;

    /** fvec9 s6. */
    public s6: number;

    /** fvec9 s7. */
    public s7: number;

    /** fvec9 s8. */
    public s8: number;

    /**
     * Creates a new fvec9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec9 instance
     */
    public static create(properties?: Ifvec9): fvec9;

    /**
     * Encodes the specified fvec9 message. Does not implicitly {@link fvec9.verify|verify} messages.
     * @param message fvec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec9 message, length delimited. Does not implicitly {@link fvec9.verify|verify} messages.
     * @param message fvec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec9;

    /**
     * Decodes a fvec9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec9;

    /**
     * Verifies a fvec9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec9
     */
    public static fromObject(object: { [k: string]: any }): fvec9;

    /**
     * Creates a plain object from a fvec9 message. Also converts values to other types if specified.
     * @param message fvec9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec9. */
export interface Iivec9 {

    /** ivec9 s0 */
    s0?: (number|null);

    /** ivec9 s1 */
    s1?: (number|null);

    /** ivec9 s2 */
    s2?: (number|null);

    /** ivec9 s3 */
    s3?: (number|null);

    /** ivec9 s4 */
    s4?: (number|null);

    /** ivec9 s5 */
    s5?: (number|null);

    /** ivec9 s6 */
    s6?: (number|null);

    /** ivec9 s7 */
    s7?: (number|null);

    /** ivec9 s8 */
    s8?: (number|null);
}

/** Represents an ivec9. */
export class ivec9 implements Iivec9 {

    /**
     * Constructs a new ivec9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec9);

    /** ivec9 s0. */
    public s0: number;

    /** ivec9 s1. */
    public s1: number;

    /** ivec9 s2. */
    public s2: number;

    /** ivec9 s3. */
    public s3: number;

    /** ivec9 s4. */
    public s4: number;

    /** ivec9 s5. */
    public s5: number;

    /** ivec9 s6. */
    public s6: number;

    /** ivec9 s7. */
    public s7: number;

    /** ivec9 s8. */
    public s8: number;

    /**
     * Creates a new ivec9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec9 instance
     */
    public static create(properties?: Iivec9): ivec9;

    /**
     * Encodes the specified ivec9 message. Does not implicitly {@link ivec9.verify|verify} messages.
     * @param message ivec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec9 message, length delimited. Does not implicitly {@link ivec9.verify|verify} messages.
     * @param message ivec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec9;

    /**
     * Decodes an ivec9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec9;

    /**
     * Verifies an ivec9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec9
     */
    public static fromObject(object: { [k: string]: any }): ivec9;

    /**
     * Creates a plain object from an ivec9 message. Also converts values to other types if specified.
     * @param message ivec9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec9. */
export interface Iuvec9 {

    /** uvec9 s0 */
    s0?: (number|null);

    /** uvec9 s1 */
    s1?: (number|null);

    /** uvec9 s2 */
    s2?: (number|null);

    /** uvec9 s3 */
    s3?: (number|null);

    /** uvec9 s4 */
    s4?: (number|null);

    /** uvec9 s5 */
    s5?: (number|null);

    /** uvec9 s6 */
    s6?: (number|null);

    /** uvec9 s7 */
    s7?: (number|null);

    /** uvec9 s8 */
    s8?: (number|null);
}

/** Represents an uvec9. */
export class uvec9 implements Iuvec9 {

    /**
     * Constructs a new uvec9.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec9);

    /** uvec9 s0. */
    public s0: number;

    /** uvec9 s1. */
    public s1: number;

    /** uvec9 s2. */
    public s2: number;

    /** uvec9 s3. */
    public s3: number;

    /** uvec9 s4. */
    public s4: number;

    /** uvec9 s5. */
    public s5: number;

    /** uvec9 s6. */
    public s6: number;

    /** uvec9 s7. */
    public s7: number;

    /** uvec9 s8. */
    public s8: number;

    /**
     * Creates a new uvec9 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec9 instance
     */
    public static create(properties?: Iuvec9): uvec9;

    /**
     * Encodes the specified uvec9 message. Does not implicitly {@link uvec9.verify|verify} messages.
     * @param message uvec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec9 message, length delimited. Does not implicitly {@link uvec9.verify|verify} messages.
     * @param message uvec9 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec9, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec9 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec9;

    /**
     * Decodes an uvec9 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec9
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec9;

    /**
     * Verifies an uvec9 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec9 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec9
     */
    public static fromObject(object: { [k: string]: any }): uvec9;

    /**
     * Creates a plain object from an uvec9 message. Also converts values to other types if specified.
     * @param message uvec9
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec9, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec9 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec10. */
export interface Ivec10 {

    /** vec10 s0 */
    s0?: (number|null);

    /** vec10 s1 */
    s1?: (number|null);

    /** vec10 s2 */
    s2?: (number|null);

    /** vec10 s3 */
    s3?: (number|null);

    /** vec10 s4 */
    s4?: (number|null);

    /** vec10 s5 */
    s5?: (number|null);

    /** vec10 s6 */
    s6?: (number|null);

    /** vec10 s7 */
    s7?: (number|null);

    /** vec10 s8 */
    s8?: (number|null);

    /** vec10 s9 */
    s9?: (number|null);
}

/** Represents a vec10. */
export class vec10 implements Ivec10 {

    /**
     * Constructs a new vec10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec10);

    /** vec10 s0. */
    public s0: number;

    /** vec10 s1. */
    public s1: number;

    /** vec10 s2. */
    public s2: number;

    /** vec10 s3. */
    public s3: number;

    /** vec10 s4. */
    public s4: number;

    /** vec10 s5. */
    public s5: number;

    /** vec10 s6. */
    public s6: number;

    /** vec10 s7. */
    public s7: number;

    /** vec10 s8. */
    public s8: number;

    /** vec10 s9. */
    public s9: number;

    /**
     * Creates a new vec10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec10 instance
     */
    public static create(properties?: Ivec10): vec10;

    /**
     * Encodes the specified vec10 message. Does not implicitly {@link vec10.verify|verify} messages.
     * @param message vec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec10 message, length delimited. Does not implicitly {@link vec10.verify|verify} messages.
     * @param message vec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec10;

    /**
     * Decodes a vec10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec10;

    /**
     * Verifies a vec10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec10
     */
    public static fromObject(object: { [k: string]: any }): vec10;

    /**
     * Creates a plain object from a vec10 message. Also converts values to other types if specified.
     * @param message vec10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec10. */
export interface Ifvec10 {

    /** fvec10 s0 */
    s0?: (number|null);

    /** fvec10 s1 */
    s1?: (number|null);

    /** fvec10 s2 */
    s2?: (number|null);

    /** fvec10 s3 */
    s3?: (number|null);

    /** fvec10 s4 */
    s4?: (number|null);

    /** fvec10 s5 */
    s5?: (number|null);

    /** fvec10 s6 */
    s6?: (number|null);

    /** fvec10 s7 */
    s7?: (number|null);

    /** fvec10 s8 */
    s8?: (number|null);

    /** fvec10 s9 */
    s9?: (number|null);
}

/** Represents a fvec10. */
export class fvec10 implements Ifvec10 {

    /**
     * Constructs a new fvec10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec10);

    /** fvec10 s0. */
    public s0: number;

    /** fvec10 s1. */
    public s1: number;

    /** fvec10 s2. */
    public s2: number;

    /** fvec10 s3. */
    public s3: number;

    /** fvec10 s4. */
    public s4: number;

    /** fvec10 s5. */
    public s5: number;

    /** fvec10 s6. */
    public s6: number;

    /** fvec10 s7. */
    public s7: number;

    /** fvec10 s8. */
    public s8: number;

    /** fvec10 s9. */
    public s9: number;

    /**
     * Creates a new fvec10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec10 instance
     */
    public static create(properties?: Ifvec10): fvec10;

    /**
     * Encodes the specified fvec10 message. Does not implicitly {@link fvec10.verify|verify} messages.
     * @param message fvec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec10 message, length delimited. Does not implicitly {@link fvec10.verify|verify} messages.
     * @param message fvec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec10;

    /**
     * Decodes a fvec10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec10;

    /**
     * Verifies a fvec10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec10
     */
    public static fromObject(object: { [k: string]: any }): fvec10;

    /**
     * Creates a plain object from a fvec10 message. Also converts values to other types if specified.
     * @param message fvec10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec10. */
export interface Iivec10 {

    /** ivec10 s0 */
    s0?: (number|null);

    /** ivec10 s1 */
    s1?: (number|null);

    /** ivec10 s2 */
    s2?: (number|null);

    /** ivec10 s3 */
    s3?: (number|null);

    /** ivec10 s4 */
    s4?: (number|null);

    /** ivec10 s5 */
    s5?: (number|null);

    /** ivec10 s6 */
    s6?: (number|null);

    /** ivec10 s7 */
    s7?: (number|null);

    /** ivec10 s8 */
    s8?: (number|null);

    /** ivec10 s9 */
    s9?: (number|null);
}

/** Represents an ivec10. */
export class ivec10 implements Iivec10 {

    /**
     * Constructs a new ivec10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec10);

    /** ivec10 s0. */
    public s0: number;

    /** ivec10 s1. */
    public s1: number;

    /** ivec10 s2. */
    public s2: number;

    /** ivec10 s3. */
    public s3: number;

    /** ivec10 s4. */
    public s4: number;

    /** ivec10 s5. */
    public s5: number;

    /** ivec10 s6. */
    public s6: number;

    /** ivec10 s7. */
    public s7: number;

    /** ivec10 s8. */
    public s8: number;

    /** ivec10 s9. */
    public s9: number;

    /**
     * Creates a new ivec10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec10 instance
     */
    public static create(properties?: Iivec10): ivec10;

    /**
     * Encodes the specified ivec10 message. Does not implicitly {@link ivec10.verify|verify} messages.
     * @param message ivec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec10 message, length delimited. Does not implicitly {@link ivec10.verify|verify} messages.
     * @param message ivec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec10;

    /**
     * Decodes an ivec10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec10;

    /**
     * Verifies an ivec10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec10
     */
    public static fromObject(object: { [k: string]: any }): ivec10;

    /**
     * Creates a plain object from an ivec10 message. Also converts values to other types if specified.
     * @param message ivec10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec10. */
export interface Iuvec10 {

    /** uvec10 s0 */
    s0?: (number|null);

    /** uvec10 s1 */
    s1?: (number|null);

    /** uvec10 s2 */
    s2?: (number|null);

    /** uvec10 s3 */
    s3?: (number|null);

    /** uvec10 s4 */
    s4?: (number|null);

    /** uvec10 s5 */
    s5?: (number|null);

    /** uvec10 s6 */
    s6?: (number|null);

    /** uvec10 s7 */
    s7?: (number|null);

    /** uvec10 s8 */
    s8?: (number|null);

    /** uvec10 s9 */
    s9?: (number|null);
}

/** Represents an uvec10. */
export class uvec10 implements Iuvec10 {

    /**
     * Constructs a new uvec10.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec10);

    /** uvec10 s0. */
    public s0: number;

    /** uvec10 s1. */
    public s1: number;

    /** uvec10 s2. */
    public s2: number;

    /** uvec10 s3. */
    public s3: number;

    /** uvec10 s4. */
    public s4: number;

    /** uvec10 s5. */
    public s5: number;

    /** uvec10 s6. */
    public s6: number;

    /** uvec10 s7. */
    public s7: number;

    /** uvec10 s8. */
    public s8: number;

    /** uvec10 s9. */
    public s9: number;

    /**
     * Creates a new uvec10 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec10 instance
     */
    public static create(properties?: Iuvec10): uvec10;

    /**
     * Encodes the specified uvec10 message. Does not implicitly {@link uvec10.verify|verify} messages.
     * @param message uvec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec10 message, length delimited. Does not implicitly {@link uvec10.verify|verify} messages.
     * @param message uvec10 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec10, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec10 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec10;

    /**
     * Decodes an uvec10 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec10
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec10;

    /**
     * Verifies an uvec10 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec10 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec10
     */
    public static fromObject(object: { [k: string]: any }): uvec10;

    /**
     * Creates a plain object from an uvec10 message. Also converts values to other types if specified.
     * @param message uvec10
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec10, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec10 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec11. */
export interface Ivec11 {

    /** vec11 s0 */
    s0?: (number|null);

    /** vec11 s1 */
    s1?: (number|null);

    /** vec11 s2 */
    s2?: (number|null);

    /** vec11 s3 */
    s3?: (number|null);

    /** vec11 s4 */
    s4?: (number|null);

    /** vec11 s5 */
    s5?: (number|null);

    /** vec11 s6 */
    s6?: (number|null);

    /** vec11 s7 */
    s7?: (number|null);

    /** vec11 s8 */
    s8?: (number|null);

    /** vec11 s9 */
    s9?: (number|null);

    /** vec11 sa */
    sa?: (number|null);
}

/** Represents a vec11. */
export class vec11 implements Ivec11 {

    /**
     * Constructs a new vec11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec11);

    /** vec11 s0. */
    public s0: number;

    /** vec11 s1. */
    public s1: number;

    /** vec11 s2. */
    public s2: number;

    /** vec11 s3. */
    public s3: number;

    /** vec11 s4. */
    public s4: number;

    /** vec11 s5. */
    public s5: number;

    /** vec11 s6. */
    public s6: number;

    /** vec11 s7. */
    public s7: number;

    /** vec11 s8. */
    public s8: number;

    /** vec11 s9. */
    public s9: number;

    /** vec11 sa. */
    public sa: number;

    /**
     * Creates a new vec11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec11 instance
     */
    public static create(properties?: Ivec11): vec11;

    /**
     * Encodes the specified vec11 message. Does not implicitly {@link vec11.verify|verify} messages.
     * @param message vec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec11 message, length delimited. Does not implicitly {@link vec11.verify|verify} messages.
     * @param message vec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec11;

    /**
     * Decodes a vec11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec11;

    /**
     * Verifies a vec11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec11
     */
    public static fromObject(object: { [k: string]: any }): vec11;

    /**
     * Creates a plain object from a vec11 message. Also converts values to other types if specified.
     * @param message vec11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec11. */
export interface Ifvec11 {

    /** fvec11 s0 */
    s0?: (number|null);

    /** fvec11 s1 */
    s1?: (number|null);

    /** fvec11 s2 */
    s2?: (number|null);

    /** fvec11 s3 */
    s3?: (number|null);

    /** fvec11 s4 */
    s4?: (number|null);

    /** fvec11 s5 */
    s5?: (number|null);

    /** fvec11 s6 */
    s6?: (number|null);

    /** fvec11 s7 */
    s7?: (number|null);

    /** fvec11 s8 */
    s8?: (number|null);

    /** fvec11 s9 */
    s9?: (number|null);

    /** fvec11 sa */
    sa?: (number|null);
}

/** Represents a fvec11. */
export class fvec11 implements Ifvec11 {

    /**
     * Constructs a new fvec11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec11);

    /** fvec11 s0. */
    public s0: number;

    /** fvec11 s1. */
    public s1: number;

    /** fvec11 s2. */
    public s2: number;

    /** fvec11 s3. */
    public s3: number;

    /** fvec11 s4. */
    public s4: number;

    /** fvec11 s5. */
    public s5: number;

    /** fvec11 s6. */
    public s6: number;

    /** fvec11 s7. */
    public s7: number;

    /** fvec11 s8. */
    public s8: number;

    /** fvec11 s9. */
    public s9: number;

    /** fvec11 sa. */
    public sa: number;

    /**
     * Creates a new fvec11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec11 instance
     */
    public static create(properties?: Ifvec11): fvec11;

    /**
     * Encodes the specified fvec11 message. Does not implicitly {@link fvec11.verify|verify} messages.
     * @param message fvec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec11 message, length delimited. Does not implicitly {@link fvec11.verify|verify} messages.
     * @param message fvec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec11;

    /**
     * Decodes a fvec11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec11;

    /**
     * Verifies a fvec11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec11
     */
    public static fromObject(object: { [k: string]: any }): fvec11;

    /**
     * Creates a plain object from a fvec11 message. Also converts values to other types if specified.
     * @param message fvec11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec11. */
export interface Iivec11 {

    /** ivec11 s0 */
    s0?: (number|null);

    /** ivec11 s1 */
    s1?: (number|null);

    /** ivec11 s2 */
    s2?: (number|null);

    /** ivec11 s3 */
    s3?: (number|null);

    /** ivec11 s4 */
    s4?: (number|null);

    /** ivec11 s5 */
    s5?: (number|null);

    /** ivec11 s6 */
    s6?: (number|null);

    /** ivec11 s7 */
    s7?: (number|null);

    /** ivec11 s8 */
    s8?: (number|null);

    /** ivec11 s9 */
    s9?: (number|null);

    /** ivec11 sa */
    sa?: (number|null);
}

/** Represents an ivec11. */
export class ivec11 implements Iivec11 {

    /**
     * Constructs a new ivec11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec11);

    /** ivec11 s0. */
    public s0: number;

    /** ivec11 s1. */
    public s1: number;

    /** ivec11 s2. */
    public s2: number;

    /** ivec11 s3. */
    public s3: number;

    /** ivec11 s4. */
    public s4: number;

    /** ivec11 s5. */
    public s5: number;

    /** ivec11 s6. */
    public s6: number;

    /** ivec11 s7. */
    public s7: number;

    /** ivec11 s8. */
    public s8: number;

    /** ivec11 s9. */
    public s9: number;

    /** ivec11 sa. */
    public sa: number;

    /**
     * Creates a new ivec11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec11 instance
     */
    public static create(properties?: Iivec11): ivec11;

    /**
     * Encodes the specified ivec11 message. Does not implicitly {@link ivec11.verify|verify} messages.
     * @param message ivec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec11 message, length delimited. Does not implicitly {@link ivec11.verify|verify} messages.
     * @param message ivec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec11;

    /**
     * Decodes an ivec11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec11;

    /**
     * Verifies an ivec11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec11
     */
    public static fromObject(object: { [k: string]: any }): ivec11;

    /**
     * Creates a plain object from an ivec11 message. Also converts values to other types if specified.
     * @param message ivec11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec11. */
export interface Iuvec11 {

    /** uvec11 s0 */
    s0?: (number|null);

    /** uvec11 s1 */
    s1?: (number|null);

    /** uvec11 s2 */
    s2?: (number|null);

    /** uvec11 s3 */
    s3?: (number|null);

    /** uvec11 s4 */
    s4?: (number|null);

    /** uvec11 s5 */
    s5?: (number|null);

    /** uvec11 s6 */
    s6?: (number|null);

    /** uvec11 s7 */
    s7?: (number|null);

    /** uvec11 s8 */
    s8?: (number|null);

    /** uvec11 s9 */
    s9?: (number|null);

    /** uvec11 sa */
    sa?: (number|null);
}

/** Represents an uvec11. */
export class uvec11 implements Iuvec11 {

    /**
     * Constructs a new uvec11.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec11);

    /** uvec11 s0. */
    public s0: number;

    /** uvec11 s1. */
    public s1: number;

    /** uvec11 s2. */
    public s2: number;

    /** uvec11 s3. */
    public s3: number;

    /** uvec11 s4. */
    public s4: number;

    /** uvec11 s5. */
    public s5: number;

    /** uvec11 s6. */
    public s6: number;

    /** uvec11 s7. */
    public s7: number;

    /** uvec11 s8. */
    public s8: number;

    /** uvec11 s9. */
    public s9: number;

    /** uvec11 sa. */
    public sa: number;

    /**
     * Creates a new uvec11 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec11 instance
     */
    public static create(properties?: Iuvec11): uvec11;

    /**
     * Encodes the specified uvec11 message. Does not implicitly {@link uvec11.verify|verify} messages.
     * @param message uvec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec11 message, length delimited. Does not implicitly {@link uvec11.verify|verify} messages.
     * @param message uvec11 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec11, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec11 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec11;

    /**
     * Decodes an uvec11 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec11
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec11;

    /**
     * Verifies an uvec11 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec11 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec11
     */
    public static fromObject(object: { [k: string]: any }): uvec11;

    /**
     * Creates a plain object from an uvec11 message. Also converts values to other types if specified.
     * @param message uvec11
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec11, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec11 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec12. */
export interface Ivec12 {

    /** vec12 s0 */
    s0?: (number|null);

    /** vec12 s1 */
    s1?: (number|null);

    /** vec12 s2 */
    s2?: (number|null);

    /** vec12 s3 */
    s3?: (number|null);

    /** vec12 s4 */
    s4?: (number|null);

    /** vec12 s5 */
    s5?: (number|null);

    /** vec12 s6 */
    s6?: (number|null);

    /** vec12 s7 */
    s7?: (number|null);

    /** vec12 s8 */
    s8?: (number|null);

    /** vec12 s9 */
    s9?: (number|null);

    /** vec12 sa */
    sa?: (number|null);

    /** vec12 sb */
    sb?: (number|null);
}

/** Represents a vec12. */
export class vec12 implements Ivec12 {

    /**
     * Constructs a new vec12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec12);

    /** vec12 s0. */
    public s0: number;

    /** vec12 s1. */
    public s1: number;

    /** vec12 s2. */
    public s2: number;

    /** vec12 s3. */
    public s3: number;

    /** vec12 s4. */
    public s4: number;

    /** vec12 s5. */
    public s5: number;

    /** vec12 s6. */
    public s6: number;

    /** vec12 s7. */
    public s7: number;

    /** vec12 s8. */
    public s8: number;

    /** vec12 s9. */
    public s9: number;

    /** vec12 sa. */
    public sa: number;

    /** vec12 sb. */
    public sb: number;

    /**
     * Creates a new vec12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec12 instance
     */
    public static create(properties?: Ivec12): vec12;

    /**
     * Encodes the specified vec12 message. Does not implicitly {@link vec12.verify|verify} messages.
     * @param message vec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec12 message, length delimited. Does not implicitly {@link vec12.verify|verify} messages.
     * @param message vec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec12;

    /**
     * Decodes a vec12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec12;

    /**
     * Verifies a vec12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec12
     */
    public static fromObject(object: { [k: string]: any }): vec12;

    /**
     * Creates a plain object from a vec12 message. Also converts values to other types if specified.
     * @param message vec12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec12. */
export interface Ifvec12 {

    /** fvec12 s0 */
    s0?: (number|null);

    /** fvec12 s1 */
    s1?: (number|null);

    /** fvec12 s2 */
    s2?: (number|null);

    /** fvec12 s3 */
    s3?: (number|null);

    /** fvec12 s4 */
    s4?: (number|null);

    /** fvec12 s5 */
    s5?: (number|null);

    /** fvec12 s6 */
    s6?: (number|null);

    /** fvec12 s7 */
    s7?: (number|null);

    /** fvec12 s8 */
    s8?: (number|null);

    /** fvec12 s9 */
    s9?: (number|null);

    /** fvec12 sa */
    sa?: (number|null);

    /** fvec12 sb */
    sb?: (number|null);
}

/** Represents a fvec12. */
export class fvec12 implements Ifvec12 {

    /**
     * Constructs a new fvec12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec12);

    /** fvec12 s0. */
    public s0: number;

    /** fvec12 s1. */
    public s1: number;

    /** fvec12 s2. */
    public s2: number;

    /** fvec12 s3. */
    public s3: number;

    /** fvec12 s4. */
    public s4: number;

    /** fvec12 s5. */
    public s5: number;

    /** fvec12 s6. */
    public s6: number;

    /** fvec12 s7. */
    public s7: number;

    /** fvec12 s8. */
    public s8: number;

    /** fvec12 s9. */
    public s9: number;

    /** fvec12 sa. */
    public sa: number;

    /** fvec12 sb. */
    public sb: number;

    /**
     * Creates a new fvec12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec12 instance
     */
    public static create(properties?: Ifvec12): fvec12;

    /**
     * Encodes the specified fvec12 message. Does not implicitly {@link fvec12.verify|verify} messages.
     * @param message fvec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec12 message, length delimited. Does not implicitly {@link fvec12.verify|verify} messages.
     * @param message fvec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec12;

    /**
     * Decodes a fvec12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec12;

    /**
     * Verifies a fvec12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec12
     */
    public static fromObject(object: { [k: string]: any }): fvec12;

    /**
     * Creates a plain object from a fvec12 message. Also converts values to other types if specified.
     * @param message fvec12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec12. */
export interface Iivec12 {

    /** ivec12 s0 */
    s0?: (number|null);

    /** ivec12 s1 */
    s1?: (number|null);

    /** ivec12 s2 */
    s2?: (number|null);

    /** ivec12 s3 */
    s3?: (number|null);

    /** ivec12 s4 */
    s4?: (number|null);

    /** ivec12 s5 */
    s5?: (number|null);

    /** ivec12 s6 */
    s6?: (number|null);

    /** ivec12 s7 */
    s7?: (number|null);

    /** ivec12 s8 */
    s8?: (number|null);

    /** ivec12 s9 */
    s9?: (number|null);

    /** ivec12 sa */
    sa?: (number|null);

    /** ivec12 sb */
    sb?: (number|null);
}

/** Represents an ivec12. */
export class ivec12 implements Iivec12 {

    /**
     * Constructs a new ivec12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec12);

    /** ivec12 s0. */
    public s0: number;

    /** ivec12 s1. */
    public s1: number;

    /** ivec12 s2. */
    public s2: number;

    /** ivec12 s3. */
    public s3: number;

    /** ivec12 s4. */
    public s4: number;

    /** ivec12 s5. */
    public s5: number;

    /** ivec12 s6. */
    public s6: number;

    /** ivec12 s7. */
    public s7: number;

    /** ivec12 s8. */
    public s8: number;

    /** ivec12 s9. */
    public s9: number;

    /** ivec12 sa. */
    public sa: number;

    /** ivec12 sb. */
    public sb: number;

    /**
     * Creates a new ivec12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec12 instance
     */
    public static create(properties?: Iivec12): ivec12;

    /**
     * Encodes the specified ivec12 message. Does not implicitly {@link ivec12.verify|verify} messages.
     * @param message ivec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec12 message, length delimited. Does not implicitly {@link ivec12.verify|verify} messages.
     * @param message ivec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec12;

    /**
     * Decodes an ivec12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec12;

    /**
     * Verifies an ivec12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec12
     */
    public static fromObject(object: { [k: string]: any }): ivec12;

    /**
     * Creates a plain object from an ivec12 message. Also converts values to other types if specified.
     * @param message ivec12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec12. */
export interface Iuvec12 {

    /** uvec12 s0 */
    s0?: (number|null);

    /** uvec12 s1 */
    s1?: (number|null);

    /** uvec12 s2 */
    s2?: (number|null);

    /** uvec12 s3 */
    s3?: (number|null);

    /** uvec12 s4 */
    s4?: (number|null);

    /** uvec12 s5 */
    s5?: (number|null);

    /** uvec12 s6 */
    s6?: (number|null);

    /** uvec12 s7 */
    s7?: (number|null);

    /** uvec12 s8 */
    s8?: (number|null);

    /** uvec12 s9 */
    s9?: (number|null);

    /** uvec12 sa */
    sa?: (number|null);

    /** uvec12 sb */
    sb?: (number|null);
}

/** Represents an uvec12. */
export class uvec12 implements Iuvec12 {

    /**
     * Constructs a new uvec12.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec12);

    /** uvec12 s0. */
    public s0: number;

    /** uvec12 s1. */
    public s1: number;

    /** uvec12 s2. */
    public s2: number;

    /** uvec12 s3. */
    public s3: number;

    /** uvec12 s4. */
    public s4: number;

    /** uvec12 s5. */
    public s5: number;

    /** uvec12 s6. */
    public s6: number;

    /** uvec12 s7. */
    public s7: number;

    /** uvec12 s8. */
    public s8: number;

    /** uvec12 s9. */
    public s9: number;

    /** uvec12 sa. */
    public sa: number;

    /** uvec12 sb. */
    public sb: number;

    /**
     * Creates a new uvec12 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec12 instance
     */
    public static create(properties?: Iuvec12): uvec12;

    /**
     * Encodes the specified uvec12 message. Does not implicitly {@link uvec12.verify|verify} messages.
     * @param message uvec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec12 message, length delimited. Does not implicitly {@link uvec12.verify|verify} messages.
     * @param message uvec12 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec12, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec12 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec12;

    /**
     * Decodes an uvec12 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec12
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec12;

    /**
     * Verifies an uvec12 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec12 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec12
     */
    public static fromObject(object: { [k: string]: any }): uvec12;

    /**
     * Creates a plain object from an uvec12 message. Also converts values to other types if specified.
     * @param message uvec12
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec12, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec12 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec13. */
export interface Ivec13 {

    /** vec13 s0 */
    s0?: (number|null);

    /** vec13 s1 */
    s1?: (number|null);

    /** vec13 s2 */
    s2?: (number|null);

    /** vec13 s3 */
    s3?: (number|null);

    /** vec13 s4 */
    s4?: (number|null);

    /** vec13 s5 */
    s5?: (number|null);

    /** vec13 s6 */
    s6?: (number|null);

    /** vec13 s7 */
    s7?: (number|null);

    /** vec13 s8 */
    s8?: (number|null);

    /** vec13 s9 */
    s9?: (number|null);

    /** vec13 sa */
    sa?: (number|null);

    /** vec13 sb */
    sb?: (number|null);

    /** vec13 sc */
    sc?: (number|null);
}

/** Represents a vec13. */
export class vec13 implements Ivec13 {

    /**
     * Constructs a new vec13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec13);

    /** vec13 s0. */
    public s0: number;

    /** vec13 s1. */
    public s1: number;

    /** vec13 s2. */
    public s2: number;

    /** vec13 s3. */
    public s3: number;

    /** vec13 s4. */
    public s4: number;

    /** vec13 s5. */
    public s5: number;

    /** vec13 s6. */
    public s6: number;

    /** vec13 s7. */
    public s7: number;

    /** vec13 s8. */
    public s8: number;

    /** vec13 s9. */
    public s9: number;

    /** vec13 sa. */
    public sa: number;

    /** vec13 sb. */
    public sb: number;

    /** vec13 sc. */
    public sc: number;

    /**
     * Creates a new vec13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec13 instance
     */
    public static create(properties?: Ivec13): vec13;

    /**
     * Encodes the specified vec13 message. Does not implicitly {@link vec13.verify|verify} messages.
     * @param message vec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec13 message, length delimited. Does not implicitly {@link vec13.verify|verify} messages.
     * @param message vec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec13;

    /**
     * Decodes a vec13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec13;

    /**
     * Verifies a vec13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec13
     */
    public static fromObject(object: { [k: string]: any }): vec13;

    /**
     * Creates a plain object from a vec13 message. Also converts values to other types if specified.
     * @param message vec13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec13. */
export interface Ifvec13 {

    /** fvec13 s0 */
    s0?: (number|null);

    /** fvec13 s1 */
    s1?: (number|null);

    /** fvec13 s2 */
    s2?: (number|null);

    /** fvec13 s3 */
    s3?: (number|null);

    /** fvec13 s4 */
    s4?: (number|null);

    /** fvec13 s5 */
    s5?: (number|null);

    /** fvec13 s6 */
    s6?: (number|null);

    /** fvec13 s7 */
    s7?: (number|null);

    /** fvec13 s8 */
    s8?: (number|null);

    /** fvec13 s9 */
    s9?: (number|null);

    /** fvec13 sa */
    sa?: (number|null);

    /** fvec13 sb */
    sb?: (number|null);

    /** fvec13 sc */
    sc?: (number|null);
}

/** Represents a fvec13. */
export class fvec13 implements Ifvec13 {

    /**
     * Constructs a new fvec13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec13);

    /** fvec13 s0. */
    public s0: number;

    /** fvec13 s1. */
    public s1: number;

    /** fvec13 s2. */
    public s2: number;

    /** fvec13 s3. */
    public s3: number;

    /** fvec13 s4. */
    public s4: number;

    /** fvec13 s5. */
    public s5: number;

    /** fvec13 s6. */
    public s6: number;

    /** fvec13 s7. */
    public s7: number;

    /** fvec13 s8. */
    public s8: number;

    /** fvec13 s9. */
    public s9: number;

    /** fvec13 sa. */
    public sa: number;

    /** fvec13 sb. */
    public sb: number;

    /** fvec13 sc. */
    public sc: number;

    /**
     * Creates a new fvec13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec13 instance
     */
    public static create(properties?: Ifvec13): fvec13;

    /**
     * Encodes the specified fvec13 message. Does not implicitly {@link fvec13.verify|verify} messages.
     * @param message fvec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec13 message, length delimited. Does not implicitly {@link fvec13.verify|verify} messages.
     * @param message fvec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec13;

    /**
     * Decodes a fvec13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec13;

    /**
     * Verifies a fvec13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec13
     */
    public static fromObject(object: { [k: string]: any }): fvec13;

    /**
     * Creates a plain object from a fvec13 message. Also converts values to other types if specified.
     * @param message fvec13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec13. */
export interface Iivec13 {

    /** ivec13 s0 */
    s0?: (number|null);

    /** ivec13 s1 */
    s1?: (number|null);

    /** ivec13 s2 */
    s2?: (number|null);

    /** ivec13 s3 */
    s3?: (number|null);

    /** ivec13 s4 */
    s4?: (number|null);

    /** ivec13 s5 */
    s5?: (number|null);

    /** ivec13 s6 */
    s6?: (number|null);

    /** ivec13 s7 */
    s7?: (number|null);

    /** ivec13 s8 */
    s8?: (number|null);

    /** ivec13 s9 */
    s9?: (number|null);

    /** ivec13 sa */
    sa?: (number|null);

    /** ivec13 sb */
    sb?: (number|null);

    /** ivec13 sc */
    sc?: (number|null);
}

/** Represents an ivec13. */
export class ivec13 implements Iivec13 {

    /**
     * Constructs a new ivec13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec13);

    /** ivec13 s0. */
    public s0: number;

    /** ivec13 s1. */
    public s1: number;

    /** ivec13 s2. */
    public s2: number;

    /** ivec13 s3. */
    public s3: number;

    /** ivec13 s4. */
    public s4: number;

    /** ivec13 s5. */
    public s5: number;

    /** ivec13 s6. */
    public s6: number;

    /** ivec13 s7. */
    public s7: number;

    /** ivec13 s8. */
    public s8: number;

    /** ivec13 s9. */
    public s9: number;

    /** ivec13 sa. */
    public sa: number;

    /** ivec13 sb. */
    public sb: number;

    /** ivec13 sc. */
    public sc: number;

    /**
     * Creates a new ivec13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec13 instance
     */
    public static create(properties?: Iivec13): ivec13;

    /**
     * Encodes the specified ivec13 message. Does not implicitly {@link ivec13.verify|verify} messages.
     * @param message ivec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec13 message, length delimited. Does not implicitly {@link ivec13.verify|verify} messages.
     * @param message ivec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec13;

    /**
     * Decodes an ivec13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec13;

    /**
     * Verifies an ivec13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec13
     */
    public static fromObject(object: { [k: string]: any }): ivec13;

    /**
     * Creates a plain object from an ivec13 message. Also converts values to other types if specified.
     * @param message ivec13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec13. */
export interface Iuvec13 {

    /** uvec13 s0 */
    s0?: (number|null);

    /** uvec13 s1 */
    s1?: (number|null);

    /** uvec13 s2 */
    s2?: (number|null);

    /** uvec13 s3 */
    s3?: (number|null);

    /** uvec13 s4 */
    s4?: (number|null);

    /** uvec13 s5 */
    s5?: (number|null);

    /** uvec13 s6 */
    s6?: (number|null);

    /** uvec13 s7 */
    s7?: (number|null);

    /** uvec13 s8 */
    s8?: (number|null);

    /** uvec13 s9 */
    s9?: (number|null);

    /** uvec13 sa */
    sa?: (number|null);

    /** uvec13 sb */
    sb?: (number|null);

    /** uvec13 sc */
    sc?: (number|null);
}

/** Represents an uvec13. */
export class uvec13 implements Iuvec13 {

    /**
     * Constructs a new uvec13.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec13);

    /** uvec13 s0. */
    public s0: number;

    /** uvec13 s1. */
    public s1: number;

    /** uvec13 s2. */
    public s2: number;

    /** uvec13 s3. */
    public s3: number;

    /** uvec13 s4. */
    public s4: number;

    /** uvec13 s5. */
    public s5: number;

    /** uvec13 s6. */
    public s6: number;

    /** uvec13 s7. */
    public s7: number;

    /** uvec13 s8. */
    public s8: number;

    /** uvec13 s9. */
    public s9: number;

    /** uvec13 sa. */
    public sa: number;

    /** uvec13 sb. */
    public sb: number;

    /** uvec13 sc. */
    public sc: number;

    /**
     * Creates a new uvec13 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec13 instance
     */
    public static create(properties?: Iuvec13): uvec13;

    /**
     * Encodes the specified uvec13 message. Does not implicitly {@link uvec13.verify|verify} messages.
     * @param message uvec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec13 message, length delimited. Does not implicitly {@link uvec13.verify|verify} messages.
     * @param message uvec13 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec13, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec13 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec13;

    /**
     * Decodes an uvec13 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec13
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec13;

    /**
     * Verifies an uvec13 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec13 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec13
     */
    public static fromObject(object: { [k: string]: any }): uvec13;

    /**
     * Creates a plain object from an uvec13 message. Also converts values to other types if specified.
     * @param message uvec13
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec13, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec13 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec14. */
export interface Ivec14 {

    /** vec14 s0 */
    s0?: (number|null);

    /** vec14 s1 */
    s1?: (number|null);

    /** vec14 s2 */
    s2?: (number|null);

    /** vec14 s3 */
    s3?: (number|null);

    /** vec14 s4 */
    s4?: (number|null);

    /** vec14 s5 */
    s5?: (number|null);

    /** vec14 s6 */
    s6?: (number|null);

    /** vec14 s7 */
    s7?: (number|null);

    /** vec14 s8 */
    s8?: (number|null);

    /** vec14 s9 */
    s9?: (number|null);

    /** vec14 sa */
    sa?: (number|null);

    /** vec14 sb */
    sb?: (number|null);

    /** vec14 sc */
    sc?: (number|null);

    /** vec14 sd */
    sd?: (number|null);
}

/** Represents a vec14. */
export class vec14 implements Ivec14 {

    /**
     * Constructs a new vec14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec14);

    /** vec14 s0. */
    public s0: number;

    /** vec14 s1. */
    public s1: number;

    /** vec14 s2. */
    public s2: number;

    /** vec14 s3. */
    public s3: number;

    /** vec14 s4. */
    public s4: number;

    /** vec14 s5. */
    public s5: number;

    /** vec14 s6. */
    public s6: number;

    /** vec14 s7. */
    public s7: number;

    /** vec14 s8. */
    public s8: number;

    /** vec14 s9. */
    public s9: number;

    /** vec14 sa. */
    public sa: number;

    /** vec14 sb. */
    public sb: number;

    /** vec14 sc. */
    public sc: number;

    /** vec14 sd. */
    public sd: number;

    /**
     * Creates a new vec14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec14 instance
     */
    public static create(properties?: Ivec14): vec14;

    /**
     * Encodes the specified vec14 message. Does not implicitly {@link vec14.verify|verify} messages.
     * @param message vec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec14 message, length delimited. Does not implicitly {@link vec14.verify|verify} messages.
     * @param message vec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec14;

    /**
     * Decodes a vec14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec14;

    /**
     * Verifies a vec14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec14
     */
    public static fromObject(object: { [k: string]: any }): vec14;

    /**
     * Creates a plain object from a vec14 message. Also converts values to other types if specified.
     * @param message vec14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec14. */
export interface Ifvec14 {

    /** fvec14 s0 */
    s0?: (number|null);

    /** fvec14 s1 */
    s1?: (number|null);

    /** fvec14 s2 */
    s2?: (number|null);

    /** fvec14 s3 */
    s3?: (number|null);

    /** fvec14 s4 */
    s4?: (number|null);

    /** fvec14 s5 */
    s5?: (number|null);

    /** fvec14 s6 */
    s6?: (number|null);

    /** fvec14 s7 */
    s7?: (number|null);

    /** fvec14 s8 */
    s8?: (number|null);

    /** fvec14 s9 */
    s9?: (number|null);

    /** fvec14 sa */
    sa?: (number|null);

    /** fvec14 sb */
    sb?: (number|null);

    /** fvec14 sc */
    sc?: (number|null);

    /** fvec14 sd */
    sd?: (number|null);
}

/** Represents a fvec14. */
export class fvec14 implements Ifvec14 {

    /**
     * Constructs a new fvec14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec14);

    /** fvec14 s0. */
    public s0: number;

    /** fvec14 s1. */
    public s1: number;

    /** fvec14 s2. */
    public s2: number;

    /** fvec14 s3. */
    public s3: number;

    /** fvec14 s4. */
    public s4: number;

    /** fvec14 s5. */
    public s5: number;

    /** fvec14 s6. */
    public s6: number;

    /** fvec14 s7. */
    public s7: number;

    /** fvec14 s8. */
    public s8: number;

    /** fvec14 s9. */
    public s9: number;

    /** fvec14 sa. */
    public sa: number;

    /** fvec14 sb. */
    public sb: number;

    /** fvec14 sc. */
    public sc: number;

    /** fvec14 sd. */
    public sd: number;

    /**
     * Creates a new fvec14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec14 instance
     */
    public static create(properties?: Ifvec14): fvec14;

    /**
     * Encodes the specified fvec14 message. Does not implicitly {@link fvec14.verify|verify} messages.
     * @param message fvec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec14 message, length delimited. Does not implicitly {@link fvec14.verify|verify} messages.
     * @param message fvec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec14;

    /**
     * Decodes a fvec14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec14;

    /**
     * Verifies a fvec14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec14
     */
    public static fromObject(object: { [k: string]: any }): fvec14;

    /**
     * Creates a plain object from a fvec14 message. Also converts values to other types if specified.
     * @param message fvec14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec14. */
export interface Iivec14 {

    /** ivec14 s0 */
    s0?: (number|null);

    /** ivec14 s1 */
    s1?: (number|null);

    /** ivec14 s2 */
    s2?: (number|null);

    /** ivec14 s3 */
    s3?: (number|null);

    /** ivec14 s4 */
    s4?: (number|null);

    /** ivec14 s5 */
    s5?: (number|null);

    /** ivec14 s6 */
    s6?: (number|null);

    /** ivec14 s7 */
    s7?: (number|null);

    /** ivec14 s8 */
    s8?: (number|null);

    /** ivec14 s9 */
    s9?: (number|null);

    /** ivec14 sa */
    sa?: (number|null);

    /** ivec14 sb */
    sb?: (number|null);

    /** ivec14 sc */
    sc?: (number|null);

    /** ivec14 sd */
    sd?: (number|null);
}

/** Represents an ivec14. */
export class ivec14 implements Iivec14 {

    /**
     * Constructs a new ivec14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec14);

    /** ivec14 s0. */
    public s0: number;

    /** ivec14 s1. */
    public s1: number;

    /** ivec14 s2. */
    public s2: number;

    /** ivec14 s3. */
    public s3: number;

    /** ivec14 s4. */
    public s4: number;

    /** ivec14 s5. */
    public s5: number;

    /** ivec14 s6. */
    public s6: number;

    /** ivec14 s7. */
    public s7: number;

    /** ivec14 s8. */
    public s8: number;

    /** ivec14 s9. */
    public s9: number;

    /** ivec14 sa. */
    public sa: number;

    /** ivec14 sb. */
    public sb: number;

    /** ivec14 sc. */
    public sc: number;

    /** ivec14 sd. */
    public sd: number;

    /**
     * Creates a new ivec14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec14 instance
     */
    public static create(properties?: Iivec14): ivec14;

    /**
     * Encodes the specified ivec14 message. Does not implicitly {@link ivec14.verify|verify} messages.
     * @param message ivec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec14 message, length delimited. Does not implicitly {@link ivec14.verify|verify} messages.
     * @param message ivec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec14;

    /**
     * Decodes an ivec14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec14;

    /**
     * Verifies an ivec14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec14
     */
    public static fromObject(object: { [k: string]: any }): ivec14;

    /**
     * Creates a plain object from an ivec14 message. Also converts values to other types if specified.
     * @param message ivec14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec14. */
export interface Iuvec14 {

    /** uvec14 s0 */
    s0?: (number|null);

    /** uvec14 s1 */
    s1?: (number|null);

    /** uvec14 s2 */
    s2?: (number|null);

    /** uvec14 s3 */
    s3?: (number|null);

    /** uvec14 s4 */
    s4?: (number|null);

    /** uvec14 s5 */
    s5?: (number|null);

    /** uvec14 s6 */
    s6?: (number|null);

    /** uvec14 s7 */
    s7?: (number|null);

    /** uvec14 s8 */
    s8?: (number|null);

    /** uvec14 s9 */
    s9?: (number|null);

    /** uvec14 sa */
    sa?: (number|null);

    /** uvec14 sb */
    sb?: (number|null);

    /** uvec14 sc */
    sc?: (number|null);

    /** uvec14 sd */
    sd?: (number|null);
}

/** Represents an uvec14. */
export class uvec14 implements Iuvec14 {

    /**
     * Constructs a new uvec14.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec14);

    /** uvec14 s0. */
    public s0: number;

    /** uvec14 s1. */
    public s1: number;

    /** uvec14 s2. */
    public s2: number;

    /** uvec14 s3. */
    public s3: number;

    /** uvec14 s4. */
    public s4: number;

    /** uvec14 s5. */
    public s5: number;

    /** uvec14 s6. */
    public s6: number;

    /** uvec14 s7. */
    public s7: number;

    /** uvec14 s8. */
    public s8: number;

    /** uvec14 s9. */
    public s9: number;

    /** uvec14 sa. */
    public sa: number;

    /** uvec14 sb. */
    public sb: number;

    /** uvec14 sc. */
    public sc: number;

    /** uvec14 sd. */
    public sd: number;

    /**
     * Creates a new uvec14 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec14 instance
     */
    public static create(properties?: Iuvec14): uvec14;

    /**
     * Encodes the specified uvec14 message. Does not implicitly {@link uvec14.verify|verify} messages.
     * @param message uvec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec14 message, length delimited. Does not implicitly {@link uvec14.verify|verify} messages.
     * @param message uvec14 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec14, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec14 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec14;

    /**
     * Decodes an uvec14 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec14
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec14;

    /**
     * Verifies an uvec14 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec14 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec14
     */
    public static fromObject(object: { [k: string]: any }): uvec14;

    /**
     * Creates a plain object from an uvec14 message. Also converts values to other types if specified.
     * @param message uvec14
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec14, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec14 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec15. */
export interface Ivec15 {

    /** vec15 s0 */
    s0?: (number|null);

    /** vec15 s1 */
    s1?: (number|null);

    /** vec15 s2 */
    s2?: (number|null);

    /** vec15 s3 */
    s3?: (number|null);

    /** vec15 s4 */
    s4?: (number|null);

    /** vec15 s5 */
    s5?: (number|null);

    /** vec15 s6 */
    s6?: (number|null);

    /** vec15 s7 */
    s7?: (number|null);

    /** vec15 s8 */
    s8?: (number|null);

    /** vec15 s9 */
    s9?: (number|null);

    /** vec15 sa */
    sa?: (number|null);

    /** vec15 sb */
    sb?: (number|null);

    /** vec15 sc */
    sc?: (number|null);

    /** vec15 sd */
    sd?: (number|null);

    /** vec15 se */
    se?: (number|null);
}

/** Represents a vec15. */
export class vec15 implements Ivec15 {

    /**
     * Constructs a new vec15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec15);

    /** vec15 s0. */
    public s0: number;

    /** vec15 s1. */
    public s1: number;

    /** vec15 s2. */
    public s2: number;

    /** vec15 s3. */
    public s3: number;

    /** vec15 s4. */
    public s4: number;

    /** vec15 s5. */
    public s5: number;

    /** vec15 s6. */
    public s6: number;

    /** vec15 s7. */
    public s7: number;

    /** vec15 s8. */
    public s8: number;

    /** vec15 s9. */
    public s9: number;

    /** vec15 sa. */
    public sa: number;

    /** vec15 sb. */
    public sb: number;

    /** vec15 sc. */
    public sc: number;

    /** vec15 sd. */
    public sd: number;

    /** vec15 se. */
    public se: number;

    /**
     * Creates a new vec15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec15 instance
     */
    public static create(properties?: Ivec15): vec15;

    /**
     * Encodes the specified vec15 message. Does not implicitly {@link vec15.verify|verify} messages.
     * @param message vec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec15 message, length delimited. Does not implicitly {@link vec15.verify|verify} messages.
     * @param message vec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec15;

    /**
     * Decodes a vec15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec15;

    /**
     * Verifies a vec15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec15
     */
    public static fromObject(object: { [k: string]: any }): vec15;

    /**
     * Creates a plain object from a vec15 message. Also converts values to other types if specified.
     * @param message vec15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec15. */
export interface Ifvec15 {

    /** fvec15 s0 */
    s0?: (number|null);

    /** fvec15 s1 */
    s1?: (number|null);

    /** fvec15 s2 */
    s2?: (number|null);

    /** fvec15 s3 */
    s3?: (number|null);

    /** fvec15 s4 */
    s4?: (number|null);

    /** fvec15 s5 */
    s5?: (number|null);

    /** fvec15 s6 */
    s6?: (number|null);

    /** fvec15 s7 */
    s7?: (number|null);

    /** fvec15 s8 */
    s8?: (number|null);

    /** fvec15 s9 */
    s9?: (number|null);

    /** fvec15 sa */
    sa?: (number|null);

    /** fvec15 sb */
    sb?: (number|null);

    /** fvec15 sc */
    sc?: (number|null);

    /** fvec15 sd */
    sd?: (number|null);

    /** fvec15 se */
    se?: (number|null);
}

/** Represents a fvec15. */
export class fvec15 implements Ifvec15 {

    /**
     * Constructs a new fvec15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec15);

    /** fvec15 s0. */
    public s0: number;

    /** fvec15 s1. */
    public s1: number;

    /** fvec15 s2. */
    public s2: number;

    /** fvec15 s3. */
    public s3: number;

    /** fvec15 s4. */
    public s4: number;

    /** fvec15 s5. */
    public s5: number;

    /** fvec15 s6. */
    public s6: number;

    /** fvec15 s7. */
    public s7: number;

    /** fvec15 s8. */
    public s8: number;

    /** fvec15 s9. */
    public s9: number;

    /** fvec15 sa. */
    public sa: number;

    /** fvec15 sb. */
    public sb: number;

    /** fvec15 sc. */
    public sc: number;

    /** fvec15 sd. */
    public sd: number;

    /** fvec15 se. */
    public se: number;

    /**
     * Creates a new fvec15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec15 instance
     */
    public static create(properties?: Ifvec15): fvec15;

    /**
     * Encodes the specified fvec15 message. Does not implicitly {@link fvec15.verify|verify} messages.
     * @param message fvec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec15 message, length delimited. Does not implicitly {@link fvec15.verify|verify} messages.
     * @param message fvec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec15;

    /**
     * Decodes a fvec15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec15;

    /**
     * Verifies a fvec15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec15
     */
    public static fromObject(object: { [k: string]: any }): fvec15;

    /**
     * Creates a plain object from a fvec15 message. Also converts values to other types if specified.
     * @param message fvec15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec15. */
export interface Iivec15 {

    /** ivec15 s0 */
    s0?: (number|null);

    /** ivec15 s1 */
    s1?: (number|null);

    /** ivec15 s2 */
    s2?: (number|null);

    /** ivec15 s3 */
    s3?: (number|null);

    /** ivec15 s4 */
    s4?: (number|null);

    /** ivec15 s5 */
    s5?: (number|null);

    /** ivec15 s6 */
    s6?: (number|null);

    /** ivec15 s7 */
    s7?: (number|null);

    /** ivec15 s8 */
    s8?: (number|null);

    /** ivec15 s9 */
    s9?: (number|null);

    /** ivec15 sa */
    sa?: (number|null);

    /** ivec15 sb */
    sb?: (number|null);

    /** ivec15 sc */
    sc?: (number|null);

    /** ivec15 sd */
    sd?: (number|null);

    /** ivec15 se */
    se?: (number|null);
}

/** Represents an ivec15. */
export class ivec15 implements Iivec15 {

    /**
     * Constructs a new ivec15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec15);

    /** ivec15 s0. */
    public s0: number;

    /** ivec15 s1. */
    public s1: number;

    /** ivec15 s2. */
    public s2: number;

    /** ivec15 s3. */
    public s3: number;

    /** ivec15 s4. */
    public s4: number;

    /** ivec15 s5. */
    public s5: number;

    /** ivec15 s6. */
    public s6: number;

    /** ivec15 s7. */
    public s7: number;

    /** ivec15 s8. */
    public s8: number;

    /** ivec15 s9. */
    public s9: number;

    /** ivec15 sa. */
    public sa: number;

    /** ivec15 sb. */
    public sb: number;

    /** ivec15 sc. */
    public sc: number;

    /** ivec15 sd. */
    public sd: number;

    /** ivec15 se. */
    public se: number;

    /**
     * Creates a new ivec15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec15 instance
     */
    public static create(properties?: Iivec15): ivec15;

    /**
     * Encodes the specified ivec15 message. Does not implicitly {@link ivec15.verify|verify} messages.
     * @param message ivec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec15 message, length delimited. Does not implicitly {@link ivec15.verify|verify} messages.
     * @param message ivec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec15;

    /**
     * Decodes an ivec15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec15;

    /**
     * Verifies an ivec15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec15
     */
    public static fromObject(object: { [k: string]: any }): ivec15;

    /**
     * Creates a plain object from an ivec15 message. Also converts values to other types if specified.
     * @param message ivec15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec15. */
export interface Iuvec15 {

    /** uvec15 s0 */
    s0?: (number|null);

    /** uvec15 s1 */
    s1?: (number|null);

    /** uvec15 s2 */
    s2?: (number|null);

    /** uvec15 s3 */
    s3?: (number|null);

    /** uvec15 s4 */
    s4?: (number|null);

    /** uvec15 s5 */
    s5?: (number|null);

    /** uvec15 s6 */
    s6?: (number|null);

    /** uvec15 s7 */
    s7?: (number|null);

    /** uvec15 s8 */
    s8?: (number|null);

    /** uvec15 s9 */
    s9?: (number|null);

    /** uvec15 sa */
    sa?: (number|null);

    /** uvec15 sb */
    sb?: (number|null);

    /** uvec15 sc */
    sc?: (number|null);

    /** uvec15 sd */
    sd?: (number|null);

    /** uvec15 se */
    se?: (number|null);
}

/** Represents an uvec15. */
export class uvec15 implements Iuvec15 {

    /**
     * Constructs a new uvec15.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec15);

    /** uvec15 s0. */
    public s0: number;

    /** uvec15 s1. */
    public s1: number;

    /** uvec15 s2. */
    public s2: number;

    /** uvec15 s3. */
    public s3: number;

    /** uvec15 s4. */
    public s4: number;

    /** uvec15 s5. */
    public s5: number;

    /** uvec15 s6. */
    public s6: number;

    /** uvec15 s7. */
    public s7: number;

    /** uvec15 s8. */
    public s8: number;

    /** uvec15 s9. */
    public s9: number;

    /** uvec15 sa. */
    public sa: number;

    /** uvec15 sb. */
    public sb: number;

    /** uvec15 sc. */
    public sc: number;

    /** uvec15 sd. */
    public sd: number;

    /** uvec15 se. */
    public se: number;

    /**
     * Creates a new uvec15 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec15 instance
     */
    public static create(properties?: Iuvec15): uvec15;

    /**
     * Encodes the specified uvec15 message. Does not implicitly {@link uvec15.verify|verify} messages.
     * @param message uvec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec15 message, length delimited. Does not implicitly {@link uvec15.verify|verify} messages.
     * @param message uvec15 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec15, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec15 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec15;

    /**
     * Decodes an uvec15 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec15
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec15;

    /**
     * Verifies an uvec15 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec15 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec15
     */
    public static fromObject(object: { [k: string]: any }): uvec15;

    /**
     * Creates a plain object from an uvec15 message. Also converts values to other types if specified.
     * @param message uvec15
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec15, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec15 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a vec16. */
export interface Ivec16 {

    /** vec16 s0 */
    s0?: (number|null);

    /** vec16 s1 */
    s1?: (number|null);

    /** vec16 s2 */
    s2?: (number|null);

    /** vec16 s3 */
    s3?: (number|null);

    /** vec16 s4 */
    s4?: (number|null);

    /** vec16 s5 */
    s5?: (number|null);

    /** vec16 s6 */
    s6?: (number|null);

    /** vec16 s7 */
    s7?: (number|null);

    /** vec16 s8 */
    s8?: (number|null);

    /** vec16 s9 */
    s9?: (number|null);

    /** vec16 sa */
    sa?: (number|null);

    /** vec16 sb */
    sb?: (number|null);

    /** vec16 sc */
    sc?: (number|null);

    /** vec16 sd */
    sd?: (number|null);

    /** vec16 se */
    se?: (number|null);

    /** vec16 sf */
    sf?: (number|null);
}

/** Represents a vec16. */
export class vec16 implements Ivec16 {

    /**
     * Constructs a new vec16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ivec16);

    /** vec16 s0. */
    public s0: number;

    /** vec16 s1. */
    public s1: number;

    /** vec16 s2. */
    public s2: number;

    /** vec16 s3. */
    public s3: number;

    /** vec16 s4. */
    public s4: number;

    /** vec16 s5. */
    public s5: number;

    /** vec16 s6. */
    public s6: number;

    /** vec16 s7. */
    public s7: number;

    /** vec16 s8. */
    public s8: number;

    /** vec16 s9. */
    public s9: number;

    /** vec16 sa. */
    public sa: number;

    /** vec16 sb. */
    public sb: number;

    /** vec16 sc. */
    public sc: number;

    /** vec16 sd. */
    public sd: number;

    /** vec16 se. */
    public se: number;

    /** vec16 sf. */
    public sf: number;

    /**
     * Creates a new vec16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns vec16 instance
     */
    public static create(properties?: Ivec16): vec16;

    /**
     * Encodes the specified vec16 message. Does not implicitly {@link vec16.verify|verify} messages.
     * @param message vec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ivec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified vec16 message, length delimited. Does not implicitly {@link vec16.verify|verify} messages.
     * @param message vec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ivec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a vec16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns vec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): vec16;

    /**
     * Decodes a vec16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns vec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): vec16;

    /**
     * Verifies a vec16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a vec16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns vec16
     */
    public static fromObject(object: { [k: string]: any }): vec16;

    /**
     * Creates a plain object from a vec16 message. Also converts values to other types if specified.
     * @param message vec16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: vec16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this vec16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of a fvec16. */
export interface Ifvec16 {

    /** fvec16 s0 */
    s0?: (number|null);

    /** fvec16 s1 */
    s1?: (number|null);

    /** fvec16 s2 */
    s2?: (number|null);

    /** fvec16 s3 */
    s3?: (number|null);

    /** fvec16 s4 */
    s4?: (number|null);

    /** fvec16 s5 */
    s5?: (number|null);

    /** fvec16 s6 */
    s6?: (number|null);

    /** fvec16 s7 */
    s7?: (number|null);

    /** fvec16 s8 */
    s8?: (number|null);

    /** fvec16 s9 */
    s9?: (number|null);

    /** fvec16 sa */
    sa?: (number|null);

    /** fvec16 sb */
    sb?: (number|null);

    /** fvec16 sc */
    sc?: (number|null);

    /** fvec16 sd */
    sd?: (number|null);

    /** fvec16 se */
    se?: (number|null);

    /** fvec16 sf */
    sf?: (number|null);
}

/** Represents a fvec16. */
export class fvec16 implements Ifvec16 {

    /**
     * Constructs a new fvec16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Ifvec16);

    /** fvec16 s0. */
    public s0: number;

    /** fvec16 s1. */
    public s1: number;

    /** fvec16 s2. */
    public s2: number;

    /** fvec16 s3. */
    public s3: number;

    /** fvec16 s4. */
    public s4: number;

    /** fvec16 s5. */
    public s5: number;

    /** fvec16 s6. */
    public s6: number;

    /** fvec16 s7. */
    public s7: number;

    /** fvec16 s8. */
    public s8: number;

    /** fvec16 s9. */
    public s9: number;

    /** fvec16 sa. */
    public sa: number;

    /** fvec16 sb. */
    public sb: number;

    /** fvec16 sc. */
    public sc: number;

    /** fvec16 sd. */
    public sd: number;

    /** fvec16 se. */
    public se: number;

    /** fvec16 sf. */
    public sf: number;

    /**
     * Creates a new fvec16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns fvec16 instance
     */
    public static create(properties?: Ifvec16): fvec16;

    /**
     * Encodes the specified fvec16 message. Does not implicitly {@link fvec16.verify|verify} messages.
     * @param message fvec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Ifvec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified fvec16 message, length delimited. Does not implicitly {@link fvec16.verify|verify} messages.
     * @param message fvec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Ifvec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes a fvec16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns fvec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): fvec16;

    /**
     * Decodes a fvec16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns fvec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): fvec16;

    /**
     * Verifies a fvec16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates a fvec16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns fvec16
     */
    public static fromObject(object: { [k: string]: any }): fvec16;

    /**
     * Creates a plain object from a fvec16 message. Also converts values to other types if specified.
     * @param message fvec16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: fvec16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this fvec16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an ivec16. */
export interface Iivec16 {

    /** ivec16 s0 */
    s0?: (number|null);

    /** ivec16 s1 */
    s1?: (number|null);

    /** ivec16 s2 */
    s2?: (number|null);

    /** ivec16 s3 */
    s3?: (number|null);

    /** ivec16 s4 */
    s4?: (number|null);

    /** ivec16 s5 */
    s5?: (number|null);

    /** ivec16 s6 */
    s6?: (number|null);

    /** ivec16 s7 */
    s7?: (number|null);

    /** ivec16 s8 */
    s8?: (number|null);

    /** ivec16 s9 */
    s9?: (number|null);

    /** ivec16 sa */
    sa?: (number|null);

    /** ivec16 sb */
    sb?: (number|null);

    /** ivec16 sc */
    sc?: (number|null);

    /** ivec16 sd */
    sd?: (number|null);

    /** ivec16 se */
    se?: (number|null);

    /** ivec16 sf */
    sf?: (number|null);
}

/** Represents an ivec16. */
export class ivec16 implements Iivec16 {

    /**
     * Constructs a new ivec16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iivec16);

    /** ivec16 s0. */
    public s0: number;

    /** ivec16 s1. */
    public s1: number;

    /** ivec16 s2. */
    public s2: number;

    /** ivec16 s3. */
    public s3: number;

    /** ivec16 s4. */
    public s4: number;

    /** ivec16 s5. */
    public s5: number;

    /** ivec16 s6. */
    public s6: number;

    /** ivec16 s7. */
    public s7: number;

    /** ivec16 s8. */
    public s8: number;

    /** ivec16 s9. */
    public s9: number;

    /** ivec16 sa. */
    public sa: number;

    /** ivec16 sb. */
    public sb: number;

    /** ivec16 sc. */
    public sc: number;

    /** ivec16 sd. */
    public sd: number;

    /** ivec16 se. */
    public se: number;

    /** ivec16 sf. */
    public sf: number;

    /**
     * Creates a new ivec16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns ivec16 instance
     */
    public static create(properties?: Iivec16): ivec16;

    /**
     * Encodes the specified ivec16 message. Does not implicitly {@link ivec16.verify|verify} messages.
     * @param message ivec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iivec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified ivec16 message, length delimited. Does not implicitly {@link ivec16.verify|verify} messages.
     * @param message ivec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iivec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an ivec16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns ivec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): ivec16;

    /**
     * Decodes an ivec16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns ivec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): ivec16;

    /**
     * Verifies an ivec16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an ivec16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns ivec16
     */
    public static fromObject(object: { [k: string]: any }): ivec16;

    /**
     * Creates a plain object from an ivec16 message. Also converts values to other types if specified.
     * @param message ivec16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: ivec16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this ivec16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Properties of an uvec16. */
export interface Iuvec16 {

    /** uvec16 s0 */
    s0?: (number|null);

    /** uvec16 s1 */
    s1?: (number|null);

    /** uvec16 s2 */
    s2?: (number|null);

    /** uvec16 s3 */
    s3?: (number|null);

    /** uvec16 s4 */
    s4?: (number|null);

    /** uvec16 s5 */
    s5?: (number|null);

    /** uvec16 s6 */
    s6?: (number|null);

    /** uvec16 s7 */
    s7?: (number|null);

    /** uvec16 s8 */
    s8?: (number|null);

    /** uvec16 s9 */
    s9?: (number|null);

    /** uvec16 sa */
    sa?: (number|null);

    /** uvec16 sb */
    sb?: (number|null);

    /** uvec16 sc */
    sc?: (number|null);

    /** uvec16 sd */
    sd?: (number|null);

    /** uvec16 se */
    se?: (number|null);

    /** uvec16 sf */
    sf?: (number|null);
}

/** Represents an uvec16. */
export class uvec16 implements Iuvec16 {

    /**
     * Constructs a new uvec16.
     * @param [properties] Properties to set
     */
    constructor(properties?: Iuvec16);

    /** uvec16 s0. */
    public s0: number;

    /** uvec16 s1. */
    public s1: number;

    /** uvec16 s2. */
    public s2: number;

    /** uvec16 s3. */
    public s3: number;

    /** uvec16 s4. */
    public s4: number;

    /** uvec16 s5. */
    public s5: number;

    /** uvec16 s6. */
    public s6: number;

    /** uvec16 s7. */
    public s7: number;

    /** uvec16 s8. */
    public s8: number;

    /** uvec16 s9. */
    public s9: number;

    /** uvec16 sa. */
    public sa: number;

    /** uvec16 sb. */
    public sb: number;

    /** uvec16 sc. */
    public sc: number;

    /** uvec16 sd. */
    public sd: number;

    /** uvec16 se. */
    public se: number;

    /** uvec16 sf. */
    public sf: number;

    /**
     * Creates a new uvec16 instance using the specified properties.
     * @param [properties] Properties to set
     * @returns uvec16 instance
     */
    public static create(properties?: Iuvec16): uvec16;

    /**
     * Encodes the specified uvec16 message. Does not implicitly {@link uvec16.verify|verify} messages.
     * @param message uvec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encode(message: Iuvec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Encodes the specified uvec16 message, length delimited. Does not implicitly {@link uvec16.verify|verify} messages.
     * @param message uvec16 message or plain object to encode
     * @param [writer] Writer to encode to
     * @returns Writer
     */
    public static encodeDelimited(message: Iuvec16, writer?: $protobuf.Writer): $protobuf.Writer;

    /**
     * Decodes an uvec16 message from the specified reader or buffer.
     * @param reader Reader or buffer to decode from
     * @param [length] Message length if known beforehand
     * @returns uvec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): uvec16;

    /**
     * Decodes an uvec16 message from the specified reader or buffer, length delimited.
     * @param reader Reader or buffer to decode from
     * @returns uvec16
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): uvec16;

    /**
     * Verifies an uvec16 message.
     * @param message Plain object to verify
     * @returns `null` if valid, otherwise the reason why it is not
     */
    public static verify(message: { [k: string]: any }): (string|null);

    /**
     * Creates an uvec16 message from a plain object. Also converts values to their respective internal types.
     * @param object Plain object
     * @returns uvec16
     */
    public static fromObject(object: { [k: string]: any }): uvec16;

    /**
     * Creates a plain object from an uvec16 message. Also converts values to other types if specified.
     * @param message uvec16
     * @param [options] Conversion options
     * @returns Plain object
     */
    public static toObject(message: uvec16, options?: $protobuf.IConversionOptions): { [k: string]: any };

    /**
     * Converts this uvec16 to JSON.
     * @returns JSON object
     */
    public toJSON(): { [k: string]: any };
}

/** Namespace message. */
export namespace message {

    /** Namespace behaviour. */
    namespace behaviour {

        /** Properties of a Behaviour. */
        interface IBehaviour {

            /** Behaviour state */
            state?: (message.behaviour.Behaviour.State|null);
        }

        /** Represents a Behaviour. */
        class Behaviour implements IBehaviour {

            /**
             * Constructs a new Behaviour.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IBehaviour);

            /** Behaviour state. */
            public state: message.behaviour.Behaviour.State;

            /**
             * Creates a new Behaviour instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Behaviour instance
             */
            public static create(properties?: message.behaviour.IBehaviour): message.behaviour.Behaviour;

            /**
             * Encodes the specified Behaviour message. Does not implicitly {@link message.behaviour.Behaviour.verify|verify} messages.
             * @param message Behaviour message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IBehaviour, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Behaviour message, length delimited. Does not implicitly {@link message.behaviour.Behaviour.verify|verify} messages.
             * @param message Behaviour message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IBehaviour, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Behaviour message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Behaviour
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Behaviour;

            /**
             * Decodes a Behaviour message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Behaviour
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Behaviour;

            /**
             * Verifies a Behaviour message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Behaviour message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Behaviour
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.Behaviour;

            /**
             * Creates a plain object from a Behaviour message. Also converts values to other types if specified.
             * @param message Behaviour
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.Behaviour, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Behaviour to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Behaviour {

            /** State enum. */
            enum State {
                UNKNOWN = 0,
                INIT = 1,
                SEARCH_FOR_BALL = 2,
                SEARCH_FOR_GOALS = 3,
                WALK_TO_BALL = 4,
                PICKED_UP = 5,
                INITIAL = 6,
                READY = 7,
                SET = 8,
                TIMEOUT = 9,
                FINISHED = 10,
                PENALISED = 11,
                GOALIE_WALK = 12,
                MOVE_TO_CENTRE = 13,
                LOCALISING = 14
            }
        }

        /** Properties of a FieldTarget. */
        interface IFieldTarget {

            /** FieldTarget target */
            target?: (message.behaviour.FieldTarget.Target|null);
        }

        /** Represents a FieldTarget. */
        class FieldTarget implements IFieldTarget {

            /**
             * Constructs a new FieldTarget.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IFieldTarget);

            /** FieldTarget target. */
            public target: message.behaviour.FieldTarget.Target;

            /**
             * Creates a new FieldTarget instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldTarget instance
             */
            public static create(properties?: message.behaviour.IFieldTarget): message.behaviour.FieldTarget;

            /**
             * Encodes the specified FieldTarget message. Does not implicitly {@link message.behaviour.FieldTarget.verify|verify} messages.
             * @param message FieldTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IFieldTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldTarget message, length delimited. Does not implicitly {@link message.behaviour.FieldTarget.verify|verify} messages.
             * @param message FieldTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IFieldTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldTarget message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.FieldTarget;

            /**
             * Decodes a FieldTarget message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.FieldTarget;

            /**
             * Verifies a FieldTarget message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldTarget message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldTarget
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.FieldTarget;

            /**
             * Creates a plain object from a FieldTarget message. Also converts values to other types if specified.
             * @param message FieldTarget
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.FieldTarget, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldTarget to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldTarget {

            /** Target enum. */
            enum Target {
                SELF = 0,
                BALL = 1,
                GOAL = 2
            }
        }

        /** Properties of a FixedWalkFinished. */
        interface IFixedWalkFinished {
        }

        /** Represents a FixedWalkFinished. */
        class FixedWalkFinished implements IFixedWalkFinished {

            /**
             * Constructs a new FixedWalkFinished.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IFixedWalkFinished);

            /**
             * Creates a new FixedWalkFinished instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FixedWalkFinished instance
             */
            public static create(properties?: message.behaviour.IFixedWalkFinished): message.behaviour.FixedWalkFinished;

            /**
             * Encodes the specified FixedWalkFinished message. Does not implicitly {@link message.behaviour.FixedWalkFinished.verify|verify} messages.
             * @param message FixedWalkFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IFixedWalkFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FixedWalkFinished message, length delimited. Does not implicitly {@link message.behaviour.FixedWalkFinished.verify|verify} messages.
             * @param message FixedWalkFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IFixedWalkFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FixedWalkFinished message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FixedWalkFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.FixedWalkFinished;

            /**
             * Decodes a FixedWalkFinished message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FixedWalkFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.FixedWalkFinished;

            /**
             * Verifies a FixedWalkFinished message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FixedWalkFinished message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FixedWalkFinished
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.FixedWalkFinished;

            /**
             * Creates a plain object from a FixedWalkFinished message. Also converts values to other types if specified.
             * @param message FixedWalkFinished
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.FixedWalkFinished, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FixedWalkFinished to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a WalkConfigSaved. */
        interface IWalkConfigSaved {
        }

        /** Represents a WalkConfigSaved. */
        class WalkConfigSaved implements IWalkConfigSaved {

            /**
             * Constructs a new WalkConfigSaved.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IWalkConfigSaved);

            /**
             * Creates a new WalkConfigSaved instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkConfigSaved instance
             */
            public static create(properties?: message.behaviour.IWalkConfigSaved): message.behaviour.WalkConfigSaved;

            /**
             * Encodes the specified WalkConfigSaved message. Does not implicitly {@link message.behaviour.WalkConfigSaved.verify|verify} messages.
             * @param message WalkConfigSaved message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IWalkConfigSaved, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkConfigSaved message, length delimited. Does not implicitly {@link message.behaviour.WalkConfigSaved.verify|verify} messages.
             * @param message WalkConfigSaved message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IWalkConfigSaved, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkConfigSaved message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkConfigSaved
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.WalkConfigSaved;

            /**
             * Decodes a WalkConfigSaved message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkConfigSaved
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.WalkConfigSaved;

            /**
             * Verifies a WalkConfigSaved message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkConfigSaved message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkConfigSaved
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.WalkConfigSaved;

            /**
             * Creates a plain object from a WalkConfigSaved message. Also converts values to other types if specified.
             * @param message WalkConfigSaved
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.WalkConfigSaved, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkConfigSaved to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a CancelFixedWalk. */
        interface ICancelFixedWalk {
        }

        /** Represents a CancelFixedWalk. */
        class CancelFixedWalk implements ICancelFixedWalk {

            /**
             * Constructs a new CancelFixedWalk.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.ICancelFixedWalk);

            /**
             * Creates a new CancelFixedWalk instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CancelFixedWalk instance
             */
            public static create(properties?: message.behaviour.ICancelFixedWalk): message.behaviour.CancelFixedWalk;

            /**
             * Encodes the specified CancelFixedWalk message. Does not implicitly {@link message.behaviour.CancelFixedWalk.verify|verify} messages.
             * @param message CancelFixedWalk message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.ICancelFixedWalk, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CancelFixedWalk message, length delimited. Does not implicitly {@link message.behaviour.CancelFixedWalk.verify|verify} messages.
             * @param message CancelFixedWalk message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.ICancelFixedWalk, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CancelFixedWalk message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CancelFixedWalk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.CancelFixedWalk;

            /**
             * Decodes a CancelFixedWalk message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CancelFixedWalk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.CancelFixedWalk;

            /**
             * Verifies a CancelFixedWalk message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CancelFixedWalk message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CancelFixedWalk
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.CancelFixedWalk;

            /**
             * Creates a plain object from a CancelFixedWalk message. Also converts values to other types if specified.
             * @param message CancelFixedWalk
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.CancelFixedWalk, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CancelFixedWalk to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a WalkOptimiserCommand. */
        interface IWalkOptimiserCommand {

            /** WalkOptimiserCommand walkConfig */
            walkConfig?: (string|null);
        }

        /** Represents a WalkOptimiserCommand. */
        class WalkOptimiserCommand implements IWalkOptimiserCommand {

            /**
             * Constructs a new WalkOptimiserCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IWalkOptimiserCommand);

            /** WalkOptimiserCommand walkConfig. */
            public walkConfig: string;

            /**
             * Creates a new WalkOptimiserCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkOptimiserCommand instance
             */
            public static create(properties?: message.behaviour.IWalkOptimiserCommand): message.behaviour.WalkOptimiserCommand;

            /**
             * Encodes the specified WalkOptimiserCommand message. Does not implicitly {@link message.behaviour.WalkOptimiserCommand.verify|verify} messages.
             * @param message WalkOptimiserCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IWalkOptimiserCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkOptimiserCommand message, length delimited. Does not implicitly {@link message.behaviour.WalkOptimiserCommand.verify|verify} messages.
             * @param message WalkOptimiserCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IWalkOptimiserCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkOptimiserCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkOptimiserCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.WalkOptimiserCommand;

            /**
             * Decodes a WalkOptimiserCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkOptimiserCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.WalkOptimiserCommand;

            /**
             * Verifies a WalkOptimiserCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkOptimiserCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkOptimiserCommand
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.WalkOptimiserCommand;

            /**
             * Creates a plain object from a WalkOptimiserCommand message. Also converts values to other types if specified.
             * @param message WalkOptimiserCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.WalkOptimiserCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkOptimiserCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FixedWalkCommand. */
        interface IFixedWalkCommand {

            /** FixedWalkCommand segments */
            segments?: (message.behaviour.FixedWalkCommand.IWalkSegment[]|null);
        }

        /** Represents a FixedWalkCommand. */
        class FixedWalkCommand implements IFixedWalkCommand {

            /**
             * Constructs a new FixedWalkCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IFixedWalkCommand);

            /** FixedWalkCommand segments. */
            public segments: message.behaviour.FixedWalkCommand.IWalkSegment[];

            /**
             * Creates a new FixedWalkCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FixedWalkCommand instance
             */
            public static create(properties?: message.behaviour.IFixedWalkCommand): message.behaviour.FixedWalkCommand;

            /**
             * Encodes the specified FixedWalkCommand message. Does not implicitly {@link message.behaviour.FixedWalkCommand.verify|verify} messages.
             * @param message FixedWalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IFixedWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FixedWalkCommand message, length delimited. Does not implicitly {@link message.behaviour.FixedWalkCommand.verify|verify} messages.
             * @param message FixedWalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IFixedWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FixedWalkCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FixedWalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.FixedWalkCommand;

            /**
             * Decodes a FixedWalkCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FixedWalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.FixedWalkCommand;

            /**
             * Verifies a FixedWalkCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FixedWalkCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FixedWalkCommand
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.FixedWalkCommand;

            /**
             * Creates a plain object from a FixedWalkCommand message. Also converts values to other types if specified.
             * @param message FixedWalkCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.FixedWalkCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FixedWalkCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FixedWalkCommand {

            /** Properties of a WalkSegment. */
            interface IWalkSegment {

                /** WalkSegment direction */
                direction?: (Ivec2|null);

                /** WalkSegment curvePeriod */
                curvePeriod?: (number|null);

                /** WalkSegment normalisedVelocity */
                normalisedVelocity?: (number|null);

                /** WalkSegment normalisedAngularVelocity */
                normalisedAngularVelocity?: (number|null);

                /** WalkSegment duration */
                duration?: (google.protobuf.IDuration|null);
            }

            /** Represents a WalkSegment. */
            class WalkSegment implements IWalkSegment {

                /**
                 * Constructs a new WalkSegment.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.FixedWalkCommand.IWalkSegment);

                /** WalkSegment direction. */
                public direction?: (Ivec2|null);

                /** WalkSegment curvePeriod. */
                public curvePeriod: number;

                /** WalkSegment normalisedVelocity. */
                public normalisedVelocity: number;

                /** WalkSegment normalisedAngularVelocity. */
                public normalisedAngularVelocity: number;

                /** WalkSegment duration. */
                public duration?: (google.protobuf.IDuration|null);

                /**
                 * Creates a new WalkSegment instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns WalkSegment instance
                 */
                public static create(properties?: message.behaviour.FixedWalkCommand.IWalkSegment): message.behaviour.FixedWalkCommand.WalkSegment;

                /**
                 * Encodes the specified WalkSegment message. Does not implicitly {@link message.behaviour.FixedWalkCommand.WalkSegment.verify|verify} messages.
                 * @param message WalkSegment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.FixedWalkCommand.IWalkSegment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified WalkSegment message, length delimited. Does not implicitly {@link message.behaviour.FixedWalkCommand.WalkSegment.verify|verify} messages.
                 * @param message WalkSegment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.FixedWalkCommand.IWalkSegment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a WalkSegment message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns WalkSegment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.FixedWalkCommand.WalkSegment;

                /**
                 * Decodes a WalkSegment message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns WalkSegment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.FixedWalkCommand.WalkSegment;

                /**
                 * Verifies a WalkSegment message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a WalkSegment message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns WalkSegment
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.FixedWalkCommand.WalkSegment;

                /**
                 * Creates a plain object from a WalkSegment message. Also converts values to other types if specified.
                 * @param message WalkSegment
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.FixedWalkCommand.WalkSegment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this WalkSegment to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a KickPlan. */
        interface IKickPlan {

            /** KickPlan target */
            target?: (Ivec2|null);

            /** KickPlan kickType */
            kickType?: (message.behaviour.KickPlan.KickType|null);
        }

        /** Represents a KickPlan. */
        class KickPlan implements IKickPlan {

            /**
             * Constructs a new KickPlan.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IKickPlan);

            /** KickPlan target. */
            public target?: (Ivec2|null);

            /** KickPlan kickType. */
            public kickType: message.behaviour.KickPlan.KickType;

            /**
             * Creates a new KickPlan instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickPlan instance
             */
            public static create(properties?: message.behaviour.IKickPlan): message.behaviour.KickPlan;

            /**
             * Encodes the specified KickPlan message. Does not implicitly {@link message.behaviour.KickPlan.verify|verify} messages.
             * @param message KickPlan message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IKickPlan, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickPlan message, length delimited. Does not implicitly {@link message.behaviour.KickPlan.verify|verify} messages.
             * @param message KickPlan message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IKickPlan, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickPlan message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickPlan
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.KickPlan;

            /**
             * Decodes a KickPlan message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickPlan
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.KickPlan;

            /**
             * Verifies a KickPlan message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickPlan message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickPlan
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.KickPlan;

            /**
             * Creates a plain object from a KickPlan message. Also converts values to other types if specified.
             * @param message KickPlan
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.KickPlan, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickPlan to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace KickPlan {

            /** KickType enum. */
            enum KickType {
                SCRIPTED = 0,
                IK_KICK = 1
            }
        }

        /** Properties of a WantsToKick. */
        interface IWantsToKick {

            /** WantsToKick kick */
            kick?: (boolean|null);
        }

        /** Represents a WantsToKick. */
        class WantsToKick implements IWantsToKick {

            /**
             * Constructs a new WantsToKick.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IWantsToKick);

            /** WantsToKick kick. */
            public kick: boolean;

            /**
             * Creates a new WantsToKick instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WantsToKick instance
             */
            public static create(properties?: message.behaviour.IWantsToKick): message.behaviour.WantsToKick;

            /**
             * Encodes the specified WantsToKick message. Does not implicitly {@link message.behaviour.WantsToKick.verify|verify} messages.
             * @param message WantsToKick message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IWantsToKick, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WantsToKick message, length delimited. Does not implicitly {@link message.behaviour.WantsToKick.verify|verify} messages.
             * @param message WantsToKick message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IWantsToKick, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WantsToKick message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WantsToKick
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.WantsToKick;

            /**
             * Decodes a WantsToKick message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WantsToKick
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.WantsToKick;

            /**
             * Verifies a WantsToKick message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WantsToKick message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WantsToKick
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.WantsToKick;

            /**
             * Creates a plain object from a WantsToKick message. Also converts values to other types if specified.
             * @param message WantsToKick
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.WantsToKick, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WantsToKick to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Look. */
        interface ILook {
        }

        /** Represents a Look. */
        class Look implements ILook {

            /**
             * Constructs a new Look.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.ILook);

            /**
             * Creates a new Look instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Look instance
             */
            public static create(properties?: message.behaviour.ILook): message.behaviour.Look;

            /**
             * Encodes the specified Look message. Does not implicitly {@link message.behaviour.Look.verify|verify} messages.
             * @param message Look message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.ILook, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Look message, length delimited. Does not implicitly {@link message.behaviour.Look.verify|verify} messages.
             * @param message Look message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.ILook, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Look message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Look
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Look;

            /**
             * Decodes a Look message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Look
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Look;

            /**
             * Verifies a Look message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Look message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Look
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.Look;

            /**
             * Creates a plain object from a Look message. Also converts values to other types if specified.
             * @param message Look
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.Look, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Look to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Look {

            /** Properties of a Fixation. */
            interface IFixation {

                /** Fixation angle */
                angle?: (Ivec2|null);

                /** Fixation arcSize */
                arcSize?: (Ivec2|null);
            }

            /** Represents a Fixation. */
            class Fixation implements IFixation {

                /**
                 * Constructs a new Fixation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Look.IFixation);

                /** Fixation angle. */
                public angle?: (Ivec2|null);

                /** Fixation arcSize. */
                public arcSize?: (Ivec2|null);

                /**
                 * Creates a new Fixation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Fixation instance
                 */
                public static create(properties?: message.behaviour.Look.IFixation): message.behaviour.Look.Fixation;

                /**
                 * Encodes the specified Fixation message. Does not implicitly {@link message.behaviour.Look.Fixation.verify|verify} messages.
                 * @param message Fixation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Look.IFixation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Fixation message, length delimited. Does not implicitly {@link message.behaviour.Look.Fixation.verify|verify} messages.
                 * @param message Fixation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Look.IFixation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Fixation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Fixation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Look.Fixation;

                /**
                 * Decodes a Fixation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Fixation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Look.Fixation;

                /**
                 * Verifies a Fixation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Fixation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Fixation
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Look.Fixation;

                /**
                 * Creates a plain object from a Fixation message. Also converts values to other types if specified.
                 * @param message Fixation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Look.Fixation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Fixation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Saccade. */
            interface ISaccade {

                /** Saccade dwellTime */
                dwellTime?: (google.protobuf.IDuration|null);

                /** Saccade angle */
                angle?: (Ivec2|null);

                /** Saccade arcSize */
                arcSize?: (Ivec2|null);
            }

            /** Represents a Saccade. */
            class Saccade implements ISaccade {

                /**
                 * Constructs a new Saccade.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Look.ISaccade);

                /** Saccade dwellTime. */
                public dwellTime?: (google.protobuf.IDuration|null);

                /** Saccade angle. */
                public angle?: (Ivec2|null);

                /** Saccade arcSize. */
                public arcSize?: (Ivec2|null);

                /**
                 * Creates a new Saccade instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Saccade instance
                 */
                public static create(properties?: message.behaviour.Look.ISaccade): message.behaviour.Look.Saccade;

                /**
                 * Encodes the specified Saccade message. Does not implicitly {@link message.behaviour.Look.Saccade.verify|verify} messages.
                 * @param message Saccade message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Look.ISaccade, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Saccade message, length delimited. Does not implicitly {@link message.behaviour.Look.Saccade.verify|verify} messages.
                 * @param message Saccade message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Look.ISaccade, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Saccade message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Saccade
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Look.Saccade;

                /**
                 * Decodes a Saccade message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Saccade
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Look.Saccade;

                /**
                 * Verifies a Saccade message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Saccade message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Saccade
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Look.Saccade;

                /**
                 * Creates a plain object from a Saccade message. Also converts values to other types if specified.
                 * @param message Saccade
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Look.Saccade, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Saccade to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Pan. */
            interface IPan {

                /** Pan angle */
                angle?: (Ivec2|null);

                /** Pan arcSize */
                arcSize?: (Ivec2|null);
            }

            /** Represents a Pan. */
            class Pan implements IPan {

                /**
                 * Constructs a new Pan.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Look.IPan);

                /** Pan angle. */
                public angle?: (Ivec2|null);

                /** Pan arcSize. */
                public arcSize?: (Ivec2|null);

                /**
                 * Creates a new Pan instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Pan instance
                 */
                public static create(properties?: message.behaviour.Look.IPan): message.behaviour.Look.Pan;

                /**
                 * Encodes the specified Pan message. Does not implicitly {@link message.behaviour.Look.Pan.verify|verify} messages.
                 * @param message Pan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Look.IPan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Pan message, length delimited. Does not implicitly {@link message.behaviour.Look.Pan.verify|verify} messages.
                 * @param message Pan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Look.IPan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Pan message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Pan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Look.Pan;

                /**
                 * Decodes a Pan message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Pan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Look.Pan;

                /**
                 * Verifies a Pan message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Pan message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Pan
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Look.Pan;

                /**
                 * Creates a plain object from a Pan message. Also converts values to other types if specified.
                 * @param message Pan
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Look.Pan, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Pan to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a PanSelection. */
            interface IPanSelection {

                /** PanSelection lookAtGoalInsteadOfBall */
                lookAtGoalInsteadOfBall?: (boolean|null);
            }

            /** Represents a PanSelection. */
            class PanSelection implements IPanSelection {

                /**
                 * Constructs a new PanSelection.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Look.IPanSelection);

                /** PanSelection lookAtGoalInsteadOfBall. */
                public lookAtGoalInsteadOfBall: boolean;

                /**
                 * Creates a new PanSelection instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PanSelection instance
                 */
                public static create(properties?: message.behaviour.Look.IPanSelection): message.behaviour.Look.PanSelection;

                /**
                 * Encodes the specified PanSelection message. Does not implicitly {@link message.behaviour.Look.PanSelection.verify|verify} messages.
                 * @param message PanSelection message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Look.IPanSelection, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PanSelection message, length delimited. Does not implicitly {@link message.behaviour.Look.PanSelection.verify|verify} messages.
                 * @param message PanSelection message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Look.IPanSelection, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PanSelection message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PanSelection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Look.PanSelection;

                /**
                 * Decodes a PanSelection message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PanSelection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Look.PanSelection;

                /**
                 * Verifies a PanSelection message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PanSelection message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PanSelection
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Look.PanSelection;

                /**
                 * Creates a plain object from a PanSelection message. Also converts values to other types if specified.
                 * @param message PanSelection
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Look.PanSelection, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PanSelection to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a MotionCommand. */
        interface IMotionCommand {

            /** MotionCommand type */
            type?: (message.behaviour.MotionCommand.Type|null);

            /** MotionCommand goalState */
            goalState?: (Ivec3|null);

            /** MotionCommand kickTarget */
            kickTarget?: (Ivec2|null);

            /** MotionCommand walkCommand */
            walkCommand?: (Ivec3|null);
        }

        /** Represents a MotionCommand. */
        class MotionCommand implements IMotionCommand {

            /**
             * Constructs a new MotionCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IMotionCommand);

            /** MotionCommand type. */
            public type: message.behaviour.MotionCommand.Type;

            /** MotionCommand goalState. */
            public goalState?: (Ivec3|null);

            /** MotionCommand kickTarget. */
            public kickTarget?: (Ivec2|null);

            /** MotionCommand walkCommand. */
            public walkCommand?: (Ivec3|null);

            /**
             * Creates a new MotionCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MotionCommand instance
             */
            public static create(properties?: message.behaviour.IMotionCommand): message.behaviour.MotionCommand;

            /**
             * Encodes the specified MotionCommand message. Does not implicitly {@link message.behaviour.MotionCommand.verify|verify} messages.
             * @param message MotionCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IMotionCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MotionCommand message, length delimited. Does not implicitly {@link message.behaviour.MotionCommand.verify|verify} messages.
             * @param message MotionCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IMotionCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MotionCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MotionCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.MotionCommand;

            /**
             * Decodes a MotionCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MotionCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.MotionCommand;

            /**
             * Verifies a MotionCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MotionCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MotionCommand
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.MotionCommand;

            /**
             * Creates a plain object from a MotionCommand message. Also converts values to other types if specified.
             * @param message MotionCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.MotionCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MotionCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace MotionCommand {

            /** Type enum. */
            enum Type {
                StandStill = 0,
                WalkToState = 1,
                BallApproach = 2,
                DirectCommand = 3
            }
        }

        /** Properties of a Nod. */
        interface INod {

            /** Nod value */
            value?: (boolean|null);
        }

        /** Represents a Nod. */
        class Nod implements INod {

            /**
             * Constructs a new Nod.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.INod);

            /** Nod value. */
            public value: boolean;

            /**
             * Creates a new Nod instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Nod instance
             */
            public static create(properties?: message.behaviour.INod): message.behaviour.Nod;

            /**
             * Encodes the specified Nod message. Does not implicitly {@link message.behaviour.Nod.verify|verify} messages.
             * @param message Nod message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.INod, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Nod message, length delimited. Does not implicitly {@link message.behaviour.Nod.verify|verify} messages.
             * @param message Nod message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.INod, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Nod message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Nod
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Nod;

            /**
             * Decodes a Nod message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Nod
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Nod;

            /**
             * Verifies a Nod message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Nod message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Nod
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.Nod;

            /**
             * Creates a plain object from a Nod message. Also converts values to other types if specified.
             * @param message Nod
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.Nod, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Nod to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServoCommand. */
        interface IServoCommand {

            /** ServoCommand source */
            source?: (number|Long|null);

            /** ServoCommand time */
            time?: (google.protobuf.ITimestamp|null);

            /** ServoCommand id */
            id?: (number|null);

            /** ServoCommand position */
            position?: (number|null);

            /** ServoCommand gain */
            gain?: (number|null);

            /** ServoCommand torque */
            torque?: (number|null);
        }

        /** Represents a ServoCommand. */
        class ServoCommand implements IServoCommand {

            /**
             * Constructs a new ServoCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IServoCommand);

            /** ServoCommand source. */
            public source: (number|Long);

            /** ServoCommand time. */
            public time?: (google.protobuf.ITimestamp|null);

            /** ServoCommand id. */
            public id: number;

            /** ServoCommand position. */
            public position: number;

            /** ServoCommand gain. */
            public gain: number;

            /** ServoCommand torque. */
            public torque: number;

            /**
             * Creates a new ServoCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServoCommand instance
             */
            public static create(properties?: message.behaviour.IServoCommand): message.behaviour.ServoCommand;

            /**
             * Encodes the specified ServoCommand message. Does not implicitly {@link message.behaviour.ServoCommand.verify|verify} messages.
             * @param message ServoCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IServoCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServoCommand message, length delimited. Does not implicitly {@link message.behaviour.ServoCommand.verify|verify} messages.
             * @param message ServoCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IServoCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServoCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServoCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.ServoCommand;

            /**
             * Decodes a ServoCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServoCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.ServoCommand;

            /**
             * Verifies a ServoCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServoCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServoCommand
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.ServoCommand;

            /**
             * Creates a plain object from a ServoCommand message. Also converts values to other types if specified.
             * @param message ServoCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.ServoCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServoCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SoccerObjectPriority. */
        interface ISoccerObjectPriority {

            /** SoccerObjectPriority ball */
            ball?: (number|null);

            /** SoccerObjectPriority goal */
            goal?: (number|null);

            /** SoccerObjectPriority line */
            line?: (number|null);

            /** SoccerObjectPriority searchType */
            searchType?: (message.behaviour.SoccerObjectPriority.SearchType|null);
        }

        /** Represents a SoccerObjectPriority. */
        class SoccerObjectPriority implements ISoccerObjectPriority {

            /**
             * Constructs a new SoccerObjectPriority.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.ISoccerObjectPriority);

            /** SoccerObjectPriority ball. */
            public ball: number;

            /** SoccerObjectPriority goal. */
            public goal: number;

            /** SoccerObjectPriority line. */
            public line: number;

            /** SoccerObjectPriority searchType. */
            public searchType: message.behaviour.SoccerObjectPriority.SearchType;

            /**
             * Creates a new SoccerObjectPriority instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SoccerObjectPriority instance
             */
            public static create(properties?: message.behaviour.ISoccerObjectPriority): message.behaviour.SoccerObjectPriority;

            /**
             * Encodes the specified SoccerObjectPriority message. Does not implicitly {@link message.behaviour.SoccerObjectPriority.verify|verify} messages.
             * @param message SoccerObjectPriority message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.ISoccerObjectPriority, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SoccerObjectPriority message, length delimited. Does not implicitly {@link message.behaviour.SoccerObjectPriority.verify|verify} messages.
             * @param message SoccerObjectPriority message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.ISoccerObjectPriority, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SoccerObjectPriority message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SoccerObjectPriority
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.SoccerObjectPriority;

            /**
             * Decodes a SoccerObjectPriority message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SoccerObjectPriority
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.SoccerObjectPriority;

            /**
             * Verifies a SoccerObjectPriority message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SoccerObjectPriority message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SoccerObjectPriority
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.SoccerObjectPriority;

            /**
             * Creates a plain object from a SoccerObjectPriority message. Also converts values to other types if specified.
             * @param message SoccerObjectPriority
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.SoccerObjectPriority, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SoccerObjectPriority to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace SoccerObjectPriority {

            /** SearchType enum. */
            enum SearchType {
                LOST = 0,
                FIND_ADDITIONAL_OBJECTS = 1,
                GOAL_SEARCH = 2,
                GOAL_LEFT = 3,
                GOAL_RIGHT = 4,
                GROUND_LEFT = 5,
                GROUND_RIGHT = 6,
                OTHE = 7
            }
        }

        /** Properties of a Subsumption. */
        interface ISubsumption {

            /** Subsumption actionRegister */
            actionRegister?: (message.behaviour.Subsumption.IActionRegister[]|null);

            /** Subsumption actionStateChange */
            actionStateChange?: (message.behaviour.Subsumption.IActionStateChange[]|null);

            /** Subsumption actionPriorityChange */
            actionPriorityChange?: (message.behaviour.Subsumption.IActionPriorites[]|null);
        }

        /** Represents a Subsumption. */
        class Subsumption implements ISubsumption {

            /**
             * Constructs a new Subsumption.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.ISubsumption);

            /** Subsumption actionRegister. */
            public actionRegister: message.behaviour.Subsumption.IActionRegister[];

            /** Subsumption actionStateChange. */
            public actionStateChange: message.behaviour.Subsumption.IActionStateChange[];

            /** Subsumption actionPriorityChange. */
            public actionPriorityChange: message.behaviour.Subsumption.IActionPriorites[];

            /**
             * Creates a new Subsumption instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Subsumption instance
             */
            public static create(properties?: message.behaviour.ISubsumption): message.behaviour.Subsumption;

            /**
             * Encodes the specified Subsumption message. Does not implicitly {@link message.behaviour.Subsumption.verify|verify} messages.
             * @param message Subsumption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.ISubsumption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Subsumption message, length delimited. Does not implicitly {@link message.behaviour.Subsumption.verify|verify} messages.
             * @param message Subsumption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.ISubsumption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Subsumption message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Subsumption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Subsumption;

            /**
             * Decodes a Subsumption message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Subsumption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Subsumption;

            /**
             * Verifies a Subsumption message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Subsumption message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Subsumption
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.Subsumption;

            /**
             * Creates a plain object from a Subsumption message. Also converts values to other types if specified.
             * @param message Subsumption
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.Subsumption, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Subsumption to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Subsumption {

            /** Properties of a LimbSet. */
            interface ILimbSet {

                /** LimbSet priority */
                priority?: (number|null);

                /** LimbSet limbs */
                limbs?: (number[]|null);
            }

            /** Represents a LimbSet. */
            class LimbSet implements ILimbSet {

                /**
                 * Constructs a new LimbSet.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Subsumption.ILimbSet);

                /** LimbSet priority. */
                public priority: number;

                /** LimbSet limbs. */
                public limbs: number[];

                /**
                 * Creates a new LimbSet instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LimbSet instance
                 */
                public static create(properties?: message.behaviour.Subsumption.ILimbSet): message.behaviour.Subsumption.LimbSet;

                /**
                 * Encodes the specified LimbSet message. Does not implicitly {@link message.behaviour.Subsumption.LimbSet.verify|verify} messages.
                 * @param message LimbSet message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Subsumption.ILimbSet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LimbSet message, length delimited. Does not implicitly {@link message.behaviour.Subsumption.LimbSet.verify|verify} messages.
                 * @param message LimbSet message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Subsumption.ILimbSet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LimbSet message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LimbSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Subsumption.LimbSet;

                /**
                 * Decodes a LimbSet message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LimbSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Subsumption.LimbSet;

                /**
                 * Verifies a LimbSet message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LimbSet message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LimbSet
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Subsumption.LimbSet;

                /**
                 * Creates a plain object from a LimbSet message. Also converts values to other types if specified.
                 * @param message LimbSet
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Subsumption.LimbSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LimbSet to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an ActionRegister. */
            interface IActionRegister {

                /** ActionRegister id */
                id?: (number|null);

                /** ActionRegister name */
                name?: (string|null);

                /** ActionRegister limbSet */
                limbSet?: (message.behaviour.Subsumption.ILimbSet[]|null);
            }

            /** Represents an ActionRegister. */
            class ActionRegister implements IActionRegister {

                /**
                 * Constructs a new ActionRegister.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Subsumption.IActionRegister);

                /** ActionRegister id. */
                public id: number;

                /** ActionRegister name. */
                public name: string;

                /** ActionRegister limbSet. */
                public limbSet: message.behaviour.Subsumption.ILimbSet[];

                /**
                 * Creates a new ActionRegister instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ActionRegister instance
                 */
                public static create(properties?: message.behaviour.Subsumption.IActionRegister): message.behaviour.Subsumption.ActionRegister;

                /**
                 * Encodes the specified ActionRegister message. Does not implicitly {@link message.behaviour.Subsumption.ActionRegister.verify|verify} messages.
                 * @param message ActionRegister message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Subsumption.IActionRegister, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ActionRegister message, length delimited. Does not implicitly {@link message.behaviour.Subsumption.ActionRegister.verify|verify} messages.
                 * @param message ActionRegister message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Subsumption.IActionRegister, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ActionRegister message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ActionRegister
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Subsumption.ActionRegister;

                /**
                 * Decodes an ActionRegister message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ActionRegister
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Subsumption.ActionRegister;

                /**
                 * Verifies an ActionRegister message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ActionRegister message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ActionRegister
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Subsumption.ActionRegister;

                /**
                 * Creates a plain object from an ActionRegister message. Also converts values to other types if specified.
                 * @param message ActionRegister
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Subsumption.ActionRegister, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ActionRegister to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an ActionStateChange. */
            interface IActionStateChange {

                /** ActionStateChange state */
                state?: (message.behaviour.Subsumption.ActionStateChange.State|null);

                /** ActionStateChange name */
                name?: (string|null);

                /** ActionStateChange limbs */
                limbs?: (number[]|null);
            }

            /** Represents an ActionStateChange. */
            class ActionStateChange implements IActionStateChange {

                /**
                 * Constructs a new ActionStateChange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Subsumption.IActionStateChange);

                /** ActionStateChange state. */
                public state: message.behaviour.Subsumption.ActionStateChange.State;

                /** ActionStateChange name. */
                public name: string;

                /** ActionStateChange limbs. */
                public limbs: number[];

                /**
                 * Creates a new ActionStateChange instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ActionStateChange instance
                 */
                public static create(properties?: message.behaviour.Subsumption.IActionStateChange): message.behaviour.Subsumption.ActionStateChange;

                /**
                 * Encodes the specified ActionStateChange message. Does not implicitly {@link message.behaviour.Subsumption.ActionStateChange.verify|verify} messages.
                 * @param message ActionStateChange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Subsumption.IActionStateChange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ActionStateChange message, length delimited. Does not implicitly {@link message.behaviour.Subsumption.ActionStateChange.verify|verify} messages.
                 * @param message ActionStateChange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Subsumption.IActionStateChange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ActionStateChange message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ActionStateChange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Subsumption.ActionStateChange;

                /**
                 * Decodes an ActionStateChange message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ActionStateChange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Subsumption.ActionStateChange;

                /**
                 * Verifies an ActionStateChange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ActionStateChange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ActionStateChange
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Subsumption.ActionStateChange;

                /**
                 * Creates a plain object from an ActionStateChange message. Also converts values to other types if specified.
                 * @param message ActionStateChange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Subsumption.ActionStateChange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ActionStateChange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ActionStateChange {

                /** State enum. */
                enum State {
                    UNKNOWN = 0,
                    START = 1,
                    KILL = 2
                }
            }

            /** Properties of an ActionPriorites. */
            interface IActionPriorites {

                /** ActionPriorites id */
                id?: (number|null);

                /** ActionPriorites priorities */
                priorities?: (number[]|null);
            }

            /** Represents an ActionPriorites. */
            class ActionPriorites implements IActionPriorites {

                /**
                 * Constructs a new ActionPriorites.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.behaviour.Subsumption.IActionPriorites);

                /** ActionPriorites id. */
                public id: number;

                /** ActionPriorites priorities. */
                public priorities: number[];

                /**
                 * Creates a new ActionPriorites instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ActionPriorites instance
                 */
                public static create(properties?: message.behaviour.Subsumption.IActionPriorites): message.behaviour.Subsumption.ActionPriorites;

                /**
                 * Encodes the specified ActionPriorites message. Does not implicitly {@link message.behaviour.Subsumption.ActionPriorites.verify|verify} messages.
                 * @param message ActionPriorites message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.behaviour.Subsumption.IActionPriorites, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ActionPriorites message, length delimited. Does not implicitly {@link message.behaviour.Subsumption.ActionPriorites.verify|verify} messages.
                 * @param message ActionPriorites message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.behaviour.Subsumption.IActionPriorites, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ActionPriorites message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ActionPriorites
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.Subsumption.ActionPriorites;

                /**
                 * Decodes an ActionPriorites message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ActionPriorites
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.Subsumption.ActionPriorites;

                /**
                 * Verifies an ActionPriorites message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ActionPriorites message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ActionPriorites
                 */
                public static fromObject(object: { [k: string]: any }): message.behaviour.Subsumption.ActionPriorites;

                /**
                 * Creates a plain object from an ActionPriorites message. Also converts values to other types if specified.
                 * @param message ActionPriorites
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.behaviour.Subsumption.ActionPriorites, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ActionPriorites to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a WalkPath. */
        interface IWalkPath {

            /** WalkPath states */
            states?: (Ivec3[]|null);

            /** WalkPath ballSpace */
            ballSpace?: (Ivec3|null);

            /** WalkPath start */
            start?: (Ivec3|null);

            /** WalkPath goal */
            goal?: (Ivec3|null);

            /** WalkPath command */
            command?: (message.behaviour.IMotionCommand|null);
        }

        /** Represents a WalkPath. */
        class WalkPath implements IWalkPath {

            /**
             * Constructs a new WalkPath.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.behaviour.IWalkPath);

            /** WalkPath states. */
            public states: Ivec3[];

            /** WalkPath ballSpace. */
            public ballSpace?: (Ivec3|null);

            /** WalkPath start. */
            public start?: (Ivec3|null);

            /** WalkPath goal. */
            public goal?: (Ivec3|null);

            /** WalkPath command. */
            public command?: (message.behaviour.IMotionCommand|null);

            /**
             * Creates a new WalkPath instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkPath instance
             */
            public static create(properties?: message.behaviour.IWalkPath): message.behaviour.WalkPath;

            /**
             * Encodes the specified WalkPath message. Does not implicitly {@link message.behaviour.WalkPath.verify|verify} messages.
             * @param message WalkPath message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.behaviour.IWalkPath, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkPath message, length delimited. Does not implicitly {@link message.behaviour.WalkPath.verify|verify} messages.
             * @param message WalkPath message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.behaviour.IWalkPath, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkPath message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkPath
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.behaviour.WalkPath;

            /**
             * Decodes a WalkPath message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkPath
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.behaviour.WalkPath;

            /**
             * Verifies a WalkPath message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkPath message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkPath
             */
            public static fromObject(object: { [k: string]: any }): message.behaviour.WalkPath;

            /**
             * Creates a plain object from a WalkPath message. Also converts values to other types if specified.
             * @param message WalkPath
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.behaviour.WalkPath, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkPath to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Properties of a Line. */
    interface ILine {

        /** Line normal */
        normal?: (Ivec2|null);

        /** Line distance */
        distance?: (number|null);
    }

    /** Represents a Line. */
    class Line implements ILine {

        /**
         * Constructs a new Line.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.ILine);

        /** Line normal. */
        public normal?: (Ivec2|null);

        /** Line distance. */
        public distance: number;

        /**
         * Creates a new Line instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Line instance
         */
        public static create(properties?: message.ILine): message.Line;

        /**
         * Encodes the specified Line message. Does not implicitly {@link message.Line.verify|verify} messages.
         * @param message Line message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.ILine, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Line message, length delimited. Does not implicitly {@link message.Line.verify|verify} messages.
         * @param message Line message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.ILine, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Line message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Line
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Line;

        /**
         * Decodes a Line message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Line
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Line;

        /**
         * Verifies a Line message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Line message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Line
         */
        public static fromObject(object: { [k: string]: any }): message.Line;

        /**
         * Creates a plain object from a Line message. Also converts values to other types if specified.
         * @param message Line
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Line, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Line to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Circle. */
    interface ICircle {

        /** Circle radius */
        radius?: (number|null);

        /** Circle centre */
        centre?: (Ivec2|null);
    }

    /** Represents a Circle. */
    class Circle implements ICircle {

        /**
         * Constructs a new Circle.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.ICircle);

        /** Circle radius. */
        public radius: number;

        /** Circle centre. */
        public centre?: (Ivec2|null);

        /**
         * Creates a new Circle instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Circle instance
         */
        public static create(properties?: message.ICircle): message.Circle;

        /**
         * Encodes the specified Circle message. Does not implicitly {@link message.Circle.verify|verify} messages.
         * @param message Circle message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.ICircle, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Circle message, length delimited. Does not implicitly {@link message.Circle.verify|verify} messages.
         * @param message Circle message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.ICircle, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Circle message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Circle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Circle;

        /**
         * Decodes a Circle message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Circle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Circle;

        /**
         * Verifies a Circle message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Circle message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Circle
         */
        public static fromObject(object: { [k: string]: any }): message.Circle;

        /**
         * Creates a plain object from a Circle message. Also converts values to other types if specified.
         * @param message Circle
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Circle, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Circle to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of an Ellipse. */
    interface IEllipse {

        /** Ellipse ellipse */
        ellipse?: (Imat3|null);
    }

    /** Represents an Ellipse. */
    class Ellipse implements IEllipse {

        /**
         * Constructs a new Ellipse.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.IEllipse);

        /** Ellipse ellipse. */
        public ellipse?: (Imat3|null);

        /**
         * Creates a new Ellipse instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Ellipse instance
         */
        public static create(properties?: message.IEllipse): message.Ellipse;

        /**
         * Encodes the specified Ellipse message. Does not implicitly {@link message.Ellipse.verify|verify} messages.
         * @param message Ellipse message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.IEllipse, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Ellipse message, length delimited. Does not implicitly {@link message.Ellipse.verify|verify} messages.
         * @param message Ellipse message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.IEllipse, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes an Ellipse message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Ellipse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Ellipse;

        /**
         * Decodes an Ellipse message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Ellipse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Ellipse;

        /**
         * Verifies an Ellipse message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Ellipse message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Ellipse
         */
        public static fromObject(object: { [k: string]: any }): message.Ellipse;

        /**
         * Creates a plain object from an Ellipse message. Also converts values to other types if specified.
         * @param message Ellipse
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Ellipse, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Ellipse to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Quad. */
    interface IQuad {

        /** Quad tl */
        tl?: (Ivec2|null);

        /** Quad tr */
        tr?: (Ivec2|null);

        /** Quad bl */
        bl?: (Ivec2|null);

        /** Quad br */
        br?: (Ivec2|null);
    }

    /** Represents a Quad. */
    class Quad implements IQuad {

        /**
         * Constructs a new Quad.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.IQuad);

        /** Quad tl. */
        public tl?: (Ivec2|null);

        /** Quad tr. */
        public tr?: (Ivec2|null);

        /** Quad bl. */
        public bl?: (Ivec2|null);

        /** Quad br. */
        public br?: (Ivec2|null);

        /**
         * Creates a new Quad instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Quad instance
         */
        public static create(properties?: message.IQuad): message.Quad;

        /**
         * Encodes the specified Quad message. Does not implicitly {@link message.Quad.verify|verify} messages.
         * @param message Quad message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.IQuad, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Quad message, length delimited. Does not implicitly {@link message.Quad.verify|verify} messages.
         * @param message Quad message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.IQuad, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Quad message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Quad
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Quad;

        /**
         * Decodes a Quad message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Quad
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Quad;

        /**
         * Verifies a Quad message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Quad message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Quad
         */
        public static fromObject(object: { [k: string]: any }): message.Quad;

        /**
         * Creates a plain object from a Quad message. Also converts values to other types if specified.
         * @param message Quad
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Quad, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Quad to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Polygon. */
    interface IPolygon {

        /** Polygon point */
        point?: (Ivec2|null);
    }

    /** Represents a Polygon. */
    class Polygon implements IPolygon {

        /**
         * Constructs a new Polygon.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.IPolygon);

        /** Polygon point. */
        public point?: (Ivec2|null);

        /**
         * Creates a new Polygon instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Polygon instance
         */
        public static create(properties?: message.IPolygon): message.Polygon;

        /**
         * Encodes the specified Polygon message. Does not implicitly {@link message.Polygon.verify|verify} messages.
         * @param message Polygon message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.IPolygon, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Polygon message, length delimited. Does not implicitly {@link message.Polygon.verify|verify} messages.
         * @param message Polygon message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.IPolygon, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Polygon message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Polygon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Polygon;

        /**
         * Decodes a Polygon message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Polygon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Polygon;

        /**
         * Verifies a Polygon message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Polygon message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Polygon
         */
        public static fromObject(object: { [k: string]: any }): message.Polygon;

        /**
         * Creates a plain object from a Polygon message. Also converts values to other types if specified.
         * @param message Polygon
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Polygon, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Polygon to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Frustum. */
    interface IFrustum {

        /** Frustum tl */
        tl?: (Ivec3|null);

        /** Frustum tr */
        tr?: (Ivec3|null);

        /** Frustum bl */
        bl?: (Ivec3|null);

        /** Frustum br */
        br?: (Ivec3|null);
    }

    /** Represents a Frustum. */
    class Frustum implements IFrustum {

        /**
         * Constructs a new Frustum.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.IFrustum);

        /** Frustum tl. */
        public tl?: (Ivec3|null);

        /** Frustum tr. */
        public tr?: (Ivec3|null);

        /** Frustum bl. */
        public bl?: (Ivec3|null);

        /** Frustum br. */
        public br?: (Ivec3|null);

        /**
         * Creates a new Frustum instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Frustum instance
         */
        public static create(properties?: message.IFrustum): message.Frustum;

        /**
         * Encodes the specified Frustum message. Does not implicitly {@link message.Frustum.verify|verify} messages.
         * @param message Frustum message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.IFrustum, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Frustum message, length delimited. Does not implicitly {@link message.Frustum.verify|verify} messages.
         * @param message Frustum message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.IFrustum, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Frustum message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Frustum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Frustum;

        /**
         * Decodes a Frustum message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Frustum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Frustum;

        /**
         * Verifies a Frustum message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Frustum message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Frustum
         */
        public static fromObject(object: { [k: string]: any }): message.Frustum;

        /**
         * Creates a plain object from a Frustum message. Also converts values to other types if specified.
         * @param message Frustum
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Frustum, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Frustum to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Cone. */
    interface ICone {

        /** Cone axis */
        axis?: (Ivec3|null);

        /** Cone gradient */
        gradient?: (number|null);
    }

    /** Represents a Cone. */
    class Cone implements ICone {

        /**
         * Constructs a new Cone.
         * @param [properties] Properties to set
         */
        constructor(properties?: message.ICone);

        /** Cone axis. */
        public axis?: (Ivec3|null);

        /** Cone gradient. */
        public gradient: number;

        /**
         * Creates a new Cone instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Cone instance
         */
        public static create(properties?: message.ICone): message.Cone;

        /**
         * Encodes the specified Cone message. Does not implicitly {@link message.Cone.verify|verify} messages.
         * @param message Cone message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: message.ICone, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Cone message, length delimited. Does not implicitly {@link message.Cone.verify|verify} messages.
         * @param message Cone message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: message.ICone, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Cone message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Cone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.Cone;

        /**
         * Decodes a Cone message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Cone
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.Cone;

        /**
         * Verifies a Cone message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Cone message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Cone
         */
        public static fromObject(object: { [k: string]: any }): message.Cone;

        /**
         * Creates a plain object from a Cone message. Also converts values to other types if specified.
         * @param message Cone
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: message.Cone, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Cone to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Namespace input. */
    namespace input {

        /** Properties of a CameraParameters. */
        interface ICameraParameters {

            /** CameraParameters imageSizePixels */
            imageSizePixels?: (Iuvec2|null);

            /** CameraParameters FOV */
            FOV?: (Ivec2|null);

            /** CameraParameters centreOffset */
            centreOffset?: (Iivec2|null);

            /** CameraParameters pinhole */
            pinhole?: (message.input.CameraParameters.IPinhole|null);

            /** CameraParameters radial */
            radial?: (message.input.CameraParameters.IRadial|null);

            /** CameraParameters lens */
            lens?: (message.input.CameraParameters.LensType|null);
        }

        /** Represents a CameraParameters. */
        class CameraParameters implements ICameraParameters {

            /**
             * Constructs a new CameraParameters.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.ICameraParameters);

            /** CameraParameters imageSizePixels. */
            public imageSizePixels?: (Iuvec2|null);

            /** CameraParameters FOV. */
            public FOV?: (Ivec2|null);

            /** CameraParameters centreOffset. */
            public centreOffset?: (Iivec2|null);

            /** CameraParameters pinhole. */
            public pinhole?: (message.input.CameraParameters.IPinhole|null);

            /** CameraParameters radial. */
            public radial?: (message.input.CameraParameters.IRadial|null);

            /** CameraParameters lens. */
            public lens: message.input.CameraParameters.LensType;

            /**
             * Creates a new CameraParameters instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CameraParameters instance
             */
            public static create(properties?: message.input.ICameraParameters): message.input.CameraParameters;

            /**
             * Encodes the specified CameraParameters message. Does not implicitly {@link message.input.CameraParameters.verify|verify} messages.
             * @param message CameraParameters message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.ICameraParameters, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CameraParameters message, length delimited. Does not implicitly {@link message.input.CameraParameters.verify|verify} messages.
             * @param message CameraParameters message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.ICameraParameters, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CameraParameters message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CameraParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.CameraParameters;

            /**
             * Decodes a CameraParameters message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CameraParameters
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.CameraParameters;

            /**
             * Verifies a CameraParameters message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CameraParameters message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CameraParameters
             */
            public static fromObject(object: { [k: string]: any }): message.input.CameraParameters;

            /**
             * Creates a plain object from a CameraParameters message. Also converts values to other types if specified.
             * @param message CameraParameters
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.CameraParameters, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CameraParameters to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace CameraParameters {

            /** LensType enum. */
            enum LensType {
                PINHOLE = 0,
                RADIAL = 1
            }

            /** Properties of a Pinhole. */
            interface IPinhole {

                /** Pinhole pixelsToTanThetaFactor */
                pixelsToTanThetaFactor?: (Ivec2|null);

                /** Pinhole focalLengthPixels */
                focalLengthPixels?: (number|null);

                /** Pinhole distortionFactor */
                distortionFactor?: (number|null);
            }

            /** Represents a Pinhole. */
            class Pinhole implements IPinhole {

                /**
                 * Constructs a new Pinhole.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.CameraParameters.IPinhole);

                /** Pinhole pixelsToTanThetaFactor. */
                public pixelsToTanThetaFactor?: (Ivec2|null);

                /** Pinhole focalLengthPixels. */
                public focalLengthPixels: number;

                /** Pinhole distortionFactor. */
                public distortionFactor: number;

                /**
                 * Creates a new Pinhole instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Pinhole instance
                 */
                public static create(properties?: message.input.CameraParameters.IPinhole): message.input.CameraParameters.Pinhole;

                /**
                 * Encodes the specified Pinhole message. Does not implicitly {@link message.input.CameraParameters.Pinhole.verify|verify} messages.
                 * @param message Pinhole message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.CameraParameters.IPinhole, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Pinhole message, length delimited. Does not implicitly {@link message.input.CameraParameters.Pinhole.verify|verify} messages.
                 * @param message Pinhole message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.CameraParameters.IPinhole, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Pinhole message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Pinhole
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.CameraParameters.Pinhole;

                /**
                 * Decodes a Pinhole message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Pinhole
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.CameraParameters.Pinhole;

                /**
                 * Verifies a Pinhole message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Pinhole message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Pinhole
                 */
                public static fromObject(object: { [k: string]: any }): message.input.CameraParameters.Pinhole;

                /**
                 * Creates a plain object from a Pinhole message. Also converts values to other types if specified.
                 * @param message Pinhole
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.CameraParameters.Pinhole, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Pinhole to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Radial. */
            interface IRadial {

                /** Radial radiansPerPixel */
                radiansPerPixel?: (number|null);
            }

            /** Represents a Radial. */
            class Radial implements IRadial {

                /**
                 * Constructs a new Radial.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.CameraParameters.IRadial);

                /** Radial radiansPerPixel. */
                public radiansPerPixel: number;

                /**
                 * Creates a new Radial instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Radial instance
                 */
                public static create(properties?: message.input.CameraParameters.IRadial): message.input.CameraParameters.Radial;

                /**
                 * Encodes the specified Radial message. Does not implicitly {@link message.input.CameraParameters.Radial.verify|verify} messages.
                 * @param message Radial message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.CameraParameters.IRadial, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Radial message, length delimited. Does not implicitly {@link message.input.CameraParameters.Radial.verify|verify} messages.
                 * @param message Radial message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.CameraParameters.IRadial, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Radial message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Radial
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.CameraParameters.Radial;

                /**
                 * Decodes a Radial message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Radial
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.CameraParameters.Radial;

                /**
                 * Verifies a Radial message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Radial message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Radial
                 */
                public static fromObject(object: { [k: string]: any }): message.input.CameraParameters.Radial;

                /**
                 * Creates a plain object from a Radial message. Also converts values to other types if specified.
                 * @param message Radial
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.CameraParameters.Radial, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Radial to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GameEvents. */
        interface IGameEvents {
        }

        /** Represents a GameEvents. */
        class GameEvents implements IGameEvents {

            /**
             * Constructs a new GameEvents.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IGameEvents);

            /**
             * Creates a new GameEvents instance using the specified properties.
             * @param [properties] Properties to set
             * @returns GameEvents instance
             */
            public static create(properties?: message.input.IGameEvents): message.input.GameEvents;

            /**
             * Encodes the specified GameEvents message. Does not implicitly {@link message.input.GameEvents.verify|verify} messages.
             * @param message GameEvents message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IGameEvents, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GameEvents message, length delimited. Does not implicitly {@link message.input.GameEvents.verify|verify} messages.
             * @param message GameEvents message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IGameEvents, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GameEvents message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns GameEvents
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents;

            /**
             * Decodes a GameEvents message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns GameEvents
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents;

            /**
             * Verifies a GameEvents message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GameEvents message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GameEvents
             */
            public static fromObject(object: { [k: string]: any }): message.input.GameEvents;

            /**
             * Creates a plain object from a GameEvents message. Also converts values to other types if specified.
             * @param message GameEvents
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.GameEvents, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GameEvents to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GameEvents {

            /** Context enum. */
            enum Context {
                UNKNOWN_CONTEXT = 0,
                SELF = 1,
                TEAM = 2,
                OPPONENT = 3,
                UNKNOWN = 4
            }

            /** TeamColour enum. */
            enum TeamColour {
                UNKNOWN_TEAM_COLOUR = 0,
                CYAN = 1,
                MAGENTA = 2
            }

            /** Properties of a Score. */
            interface IScore {

                /** Score ownScore */
                ownScore?: (number|null);

                /** Score opponentScore */
                opponentScore?: (number|null);
            }

            /** Represents a Score. */
            class Score implements IScore {

                /**
                 * Constructs a new Score.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IScore);

                /** Score ownScore. */
                public ownScore: number;

                /** Score opponentScore. */
                public opponentScore: number;

                /**
                 * Creates a new Score instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Score instance
                 */
                public static create(properties?: message.input.GameEvents.IScore): message.input.GameEvents.Score;

                /**
                 * Encodes the specified Score message. Does not implicitly {@link message.input.GameEvents.Score.verify|verify} messages.
                 * @param message Score message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IScore, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Score message, length delimited. Does not implicitly {@link message.input.GameEvents.Score.verify|verify} messages.
                 * @param message Score message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IScore, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Score message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Score
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.Score;

                /**
                 * Decodes a Score message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Score
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.Score;

                /**
                 * Verifies a Score message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Score message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Score
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.Score;

                /**
                 * Creates a plain object from a Score message. Also converts values to other types if specified.
                 * @param message Score
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.Score, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Score to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GoalScored. */
            interface IGoalScored {

                /** GoalScored context */
                context?: (message.input.GameEvents.Context|null);

                /** GoalScored totalScore */
                totalScore?: (number|null);
            }

            /** Represents a GoalScored. */
            class GoalScored implements IGoalScored {

                /**
                 * Constructs a new GoalScored.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IGoalScored);

                /** GoalScored context. */
                public context: message.input.GameEvents.Context;

                /** GoalScored totalScore. */
                public totalScore: number;

                /**
                 * Creates a new GoalScored instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GoalScored instance
                 */
                public static create(properties?: message.input.GameEvents.IGoalScored): message.input.GameEvents.GoalScored;

                /**
                 * Encodes the specified GoalScored message. Does not implicitly {@link message.input.GameEvents.GoalScored.verify|verify} messages.
                 * @param message GoalScored message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IGoalScored, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GoalScored message, length delimited. Does not implicitly {@link message.input.GameEvents.GoalScored.verify|verify} messages.
                 * @param message GoalScored message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IGoalScored, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GoalScored message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GoalScored
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.GoalScored;

                /**
                 * Decodes a GoalScored message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GoalScored
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.GoalScored;

                /**
                 * Verifies a GoalScored message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GoalScored message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GoalScored
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.GoalScored;

                /**
                 * Creates a plain object from a GoalScored message. Also converts values to other types if specified.
                 * @param message GoalScored
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.GoalScored, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GoalScored to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Penalisation. */
            interface IPenalisation {

                /** Penalisation context */
                context?: (message.input.GameEvents.Context|null);

                /** Penalisation robotId */
                robotId?: (number|null);

                /** Penalisation ends */
                ends?: (google.protobuf.ITimestamp|null);

                /** Penalisation reason */
                reason?: (message.input.GameState.Data.PenaltyReason|null);
            }

            /** Represents a Penalisation. */
            class Penalisation implements IPenalisation {

                /**
                 * Constructs a new Penalisation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IPenalisation);

                /** Penalisation context. */
                public context: message.input.GameEvents.Context;

                /** Penalisation robotId. */
                public robotId: number;

                /** Penalisation ends. */
                public ends?: (google.protobuf.ITimestamp|null);

                /** Penalisation reason. */
                public reason: message.input.GameState.Data.PenaltyReason;

                /**
                 * Creates a new Penalisation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Penalisation instance
                 */
                public static create(properties?: message.input.GameEvents.IPenalisation): message.input.GameEvents.Penalisation;

                /**
                 * Encodes the specified Penalisation message. Does not implicitly {@link message.input.GameEvents.Penalisation.verify|verify} messages.
                 * @param message Penalisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IPenalisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Penalisation message, length delimited. Does not implicitly {@link message.input.GameEvents.Penalisation.verify|verify} messages.
                 * @param message Penalisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IPenalisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Penalisation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Penalisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.Penalisation;

                /**
                 * Decodes a Penalisation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Penalisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.Penalisation;

                /**
                 * Verifies a Penalisation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Penalisation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Penalisation
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.Penalisation;

                /**
                 * Creates a plain object from a Penalisation message. Also converts values to other types if specified.
                 * @param message Penalisation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.Penalisation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Penalisation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Unpenalisation. */
            interface IUnpenalisation {

                /** Unpenalisation context */
                context?: (message.input.GameEvents.Context|null);

                /** Unpenalisation robotId */
                robotId?: (number|null);
            }

            /** Represents an Unpenalisation. */
            class Unpenalisation implements IUnpenalisation {

                /**
                 * Constructs a new Unpenalisation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IUnpenalisation);

                /** Unpenalisation context. */
                public context: message.input.GameEvents.Context;

                /** Unpenalisation robotId. */
                public robotId: number;

                /**
                 * Creates a new Unpenalisation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Unpenalisation instance
                 */
                public static create(properties?: message.input.GameEvents.IUnpenalisation): message.input.GameEvents.Unpenalisation;

                /**
                 * Encodes the specified Unpenalisation message. Does not implicitly {@link message.input.GameEvents.Unpenalisation.verify|verify} messages.
                 * @param message Unpenalisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IUnpenalisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Unpenalisation message, length delimited. Does not implicitly {@link message.input.GameEvents.Unpenalisation.verify|verify} messages.
                 * @param message Unpenalisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IUnpenalisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Unpenalisation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Unpenalisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.Unpenalisation;

                /**
                 * Decodes an Unpenalisation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Unpenalisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.Unpenalisation;

                /**
                 * Verifies an Unpenalisation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Unpenalisation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Unpenalisation
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.Unpenalisation;

                /**
                 * Creates a plain object from an Unpenalisation message. Also converts values to other types if specified.
                 * @param message Unpenalisation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.Unpenalisation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Unpenalisation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CoachMessage. */
            interface ICoachMessage {

                /** CoachMessage context */
                context?: (message.input.GameEvents.Context|null);

                /** CoachMessage message */
                message?: (string|null);
            }

            /** Represents a CoachMessage. */
            class CoachMessage implements ICoachMessage {

                /**
                 * Constructs a new CoachMessage.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.ICoachMessage);

                /** CoachMessage context. */
                public context: message.input.GameEvents.Context;

                /** CoachMessage message. */
                public message: string;

                /**
                 * Creates a new CoachMessage instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CoachMessage instance
                 */
                public static create(properties?: message.input.GameEvents.ICoachMessage): message.input.GameEvents.CoachMessage;

                /**
                 * Encodes the specified CoachMessage message. Does not implicitly {@link message.input.GameEvents.CoachMessage.verify|verify} messages.
                 * @param message CoachMessage message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.ICoachMessage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CoachMessage message, length delimited. Does not implicitly {@link message.input.GameEvents.CoachMessage.verify|verify} messages.
                 * @param message CoachMessage message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.ICoachMessage, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CoachMessage message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CoachMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.CoachMessage;

                /**
                 * Decodes a CoachMessage message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CoachMessage
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.CoachMessage;

                /**
                 * Verifies a CoachMessage message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CoachMessage message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CoachMessage
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.CoachMessage;

                /**
                 * Creates a plain object from a CoachMessage message. Also converts values to other types if specified.
                 * @param message CoachMessage
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.CoachMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CoachMessage to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HalfTime. */
            interface IHalfTime {

                /** HalfTime firstHalf */
                firstHalf?: (boolean|null);
            }

            /** Represents a HalfTime. */
            class HalfTime implements IHalfTime {

                /**
                 * Constructs a new HalfTime.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IHalfTime);

                /** HalfTime firstHalf. */
                public firstHalf: boolean;

                /**
                 * Creates a new HalfTime instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HalfTime instance
                 */
                public static create(properties?: message.input.GameEvents.IHalfTime): message.input.GameEvents.HalfTime;

                /**
                 * Encodes the specified HalfTime message. Does not implicitly {@link message.input.GameEvents.HalfTime.verify|verify} messages.
                 * @param message HalfTime message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IHalfTime, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HalfTime message, length delimited. Does not implicitly {@link message.input.GameEvents.HalfTime.verify|verify} messages.
                 * @param message HalfTime message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IHalfTime, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HalfTime message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HalfTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.HalfTime;

                /**
                 * Decodes a HalfTime message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HalfTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.HalfTime;

                /**
                 * Verifies a HalfTime message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HalfTime message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HalfTime
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.HalfTime;

                /**
                 * Creates a plain object from a HalfTime message. Also converts values to other types if specified.
                 * @param message HalfTime
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.HalfTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HalfTime to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a BallKickedOut. */
            interface IBallKickedOut {

                /** BallKickedOut context */
                context?: (message.input.GameEvents.Context|null);

                /** BallKickedOut time */
                time?: (google.protobuf.ITimestamp|null);
            }

            /** Represents a BallKickedOut. */
            class BallKickedOut implements IBallKickedOut {

                /**
                 * Constructs a new BallKickedOut.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IBallKickedOut);

                /** BallKickedOut context. */
                public context: message.input.GameEvents.Context;

                /** BallKickedOut time. */
                public time?: (google.protobuf.ITimestamp|null);

                /**
                 * Creates a new BallKickedOut instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BallKickedOut instance
                 */
                public static create(properties?: message.input.GameEvents.IBallKickedOut): message.input.GameEvents.BallKickedOut;

                /**
                 * Encodes the specified BallKickedOut message. Does not implicitly {@link message.input.GameEvents.BallKickedOut.verify|verify} messages.
                 * @param message BallKickedOut message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IBallKickedOut, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BallKickedOut message, length delimited. Does not implicitly {@link message.input.GameEvents.BallKickedOut.verify|verify} messages.
                 * @param message BallKickedOut message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IBallKickedOut, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BallKickedOut message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BallKickedOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.BallKickedOut;

                /**
                 * Decodes a BallKickedOut message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BallKickedOut
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.BallKickedOut;

                /**
                 * Verifies a BallKickedOut message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BallKickedOut message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BallKickedOut
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.BallKickedOut;

                /**
                 * Creates a plain object from a BallKickedOut message. Also converts values to other types if specified.
                 * @param message BallKickedOut
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.BallKickedOut, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BallKickedOut to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a KickOffTeam. */
            interface IKickOffTeam {

                /** KickOffTeam context */
                context?: (message.input.GameEvents.Context|null);
            }

            /** Represents a KickOffTeam. */
            class KickOffTeam implements IKickOffTeam {

                /**
                 * Constructs a new KickOffTeam.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IKickOffTeam);

                /** KickOffTeam context. */
                public context: message.input.GameEvents.Context;

                /**
                 * Creates a new KickOffTeam instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns KickOffTeam instance
                 */
                public static create(properties?: message.input.GameEvents.IKickOffTeam): message.input.GameEvents.KickOffTeam;

                /**
                 * Encodes the specified KickOffTeam message. Does not implicitly {@link message.input.GameEvents.KickOffTeam.verify|verify} messages.
                 * @param message KickOffTeam message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IKickOffTeam, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified KickOffTeam message, length delimited. Does not implicitly {@link message.input.GameEvents.KickOffTeam.verify|verify} messages.
                 * @param message KickOffTeam message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IKickOffTeam, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a KickOffTeam message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns KickOffTeam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.KickOffTeam;

                /**
                 * Decodes a KickOffTeam message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns KickOffTeam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.KickOffTeam;

                /**
                 * Verifies a KickOffTeam message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a KickOffTeam message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns KickOffTeam
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.KickOffTeam;

                /**
                 * Creates a plain object from a KickOffTeam message. Also converts values to other types if specified.
                 * @param message KickOffTeam
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.KickOffTeam, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this KickOffTeam to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GamePhase. */
            interface IGamePhase {

                /** GamePhase phase */
                phase?: (message.input.GameState.Data.Phase|null);

                /** GamePhase readyTime */
                readyTime?: (google.protobuf.ITimestamp|null);

                /** GamePhase endHalf */
                endHalf?: (google.protobuf.ITimestamp|null);

                /** GamePhase ballFree */
                ballFree?: (google.protobuf.ITimestamp|null);

                /** GamePhase ends */
                ends?: (google.protobuf.ITimestamp|null);

                /** GamePhase nextHalf */
                nextHalf?: (google.protobuf.ITimestamp|null);
            }

            /** Represents a GamePhase. */
            class GamePhase implements IGamePhase {

                /**
                 * Constructs a new GamePhase.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IGamePhase);

                /** GamePhase phase. */
                public phase: message.input.GameState.Data.Phase;

                /** GamePhase readyTime. */
                public readyTime?: (google.protobuf.ITimestamp|null);

                /** GamePhase endHalf. */
                public endHalf?: (google.protobuf.ITimestamp|null);

                /** GamePhase ballFree. */
                public ballFree?: (google.protobuf.ITimestamp|null);

                /** GamePhase ends. */
                public ends?: (google.protobuf.ITimestamp|null);

                /** GamePhase nextHalf. */
                public nextHalf?: (google.protobuf.ITimestamp|null);

                /**
                 * Creates a new GamePhase instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GamePhase instance
                 */
                public static create(properties?: message.input.GameEvents.IGamePhase): message.input.GameEvents.GamePhase;

                /**
                 * Encodes the specified GamePhase message. Does not implicitly {@link message.input.GameEvents.GamePhase.verify|verify} messages.
                 * @param message GamePhase message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IGamePhase, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GamePhase message, length delimited. Does not implicitly {@link message.input.GameEvents.GamePhase.verify|verify} messages.
                 * @param message GamePhase message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IGamePhase, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GamePhase message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GamePhase
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.GamePhase;

                /**
                 * Decodes a GamePhase message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GamePhase
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.GamePhase;

                /**
                 * Verifies a GamePhase message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GamePhase message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GamePhase
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.GamePhase;

                /**
                 * Creates a plain object from a GamePhase message. Also converts values to other types if specified.
                 * @param message GamePhase
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.GamePhase, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GamePhase to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GameMode. */
            interface IGameMode {

                /** GameMode mode */
                mode?: (message.input.GameState.Data.Mode|null);
            }

            /** Represents a GameMode. */
            class GameMode implements IGameMode {

                /**
                 * Constructs a new GameMode.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameEvents.IGameMode);

                /** GameMode mode. */
                public mode: message.input.GameState.Data.Mode;

                /**
                 * Creates a new GameMode instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GameMode instance
                 */
                public static create(properties?: message.input.GameEvents.IGameMode): message.input.GameEvents.GameMode;

                /**
                 * Encodes the specified GameMode message. Does not implicitly {@link message.input.GameEvents.GameMode.verify|verify} messages.
                 * @param message GameMode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameEvents.IGameMode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GameMode message, length delimited. Does not implicitly {@link message.input.GameEvents.GameMode.verify|verify} messages.
                 * @param message GameMode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameEvents.IGameMode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GameMode message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GameMode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameEvents.GameMode;

                /**
                 * Decodes a GameMode message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GameMode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameEvents.GameMode;

                /**
                 * Verifies a GameMode message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GameMode message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GameMode
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameEvents.GameMode;

                /**
                 * Creates a plain object from a GameMode message. Also converts values to other types if specified.
                 * @param message GameMode
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameEvents.GameMode, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GameMode to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GameState. */
        interface IGameState {

            /** GameState data */
            data?: (message.input.GameState.IData|null);

            /** GameState event */
            event?: (string|null);
        }

        /** Represents a GameState. */
        class GameState implements IGameState {

            /**
             * Constructs a new GameState.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IGameState);

            /** GameState data. */
            public data?: (message.input.GameState.IData|null);

            /** GameState event. */
            public event: string;

            /**
             * Creates a new GameState instance using the specified properties.
             * @param [properties] Properties to set
             * @returns GameState instance
             */
            public static create(properties?: message.input.IGameState): message.input.GameState;

            /**
             * Encodes the specified GameState message. Does not implicitly {@link message.input.GameState.verify|verify} messages.
             * @param message GameState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IGameState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GameState message, length delimited. Does not implicitly {@link message.input.GameState.verify|verify} messages.
             * @param message GameState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IGameState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GameState message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns GameState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameState;

            /**
             * Decodes a GameState message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns GameState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameState;

            /**
             * Verifies a GameState message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GameState message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GameState
             */
            public static fromObject(object: { [k: string]: any }): message.input.GameState;

            /**
             * Creates a plain object from a GameState message. Also converts values to other types if specified.
             * @param message GameState
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.GameState, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GameState to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GameState {

            /** Properties of a Data. */
            interface IData {

                /** Data phase */
                phase?: (message.input.GameState.Data.Phase|null);

                /** Data mode */
                mode?: (message.input.GameState.Data.Mode|null);

                /** Data firstHalf */
                firstHalf?: (boolean|null);

                /** Data kickedOutByUs */
                kickedOutByUs?: (boolean|null);

                /** Data kickedOutTime */
                kickedOutTime?: (google.protobuf.ITimestamp|null);

                /** Data ourKickOff */
                ourKickOff?: (boolean|null);

                /** Data primaryTime */
                primaryTime?: (google.protobuf.ITimestamp|null);

                /** Data secondaryTime */
                secondaryTime?: (google.protobuf.ITimestamp|null);

                /** Data team */
                team?: (message.input.GameState.Data.ITeam|null);

                /** Data opponent */
                opponent?: (message.input.GameState.Data.ITeam|null);

                /** Data self */
                self?: (message.input.GameState.Data.IRobot|null);
            }

            /** Represents a Data. */
            class Data implements IData {

                /**
                 * Constructs a new Data.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.GameState.IData);

                /** Data phase. */
                public phase: message.input.GameState.Data.Phase;

                /** Data mode. */
                public mode: message.input.GameState.Data.Mode;

                /** Data firstHalf. */
                public firstHalf: boolean;

                /** Data kickedOutByUs. */
                public kickedOutByUs: boolean;

                /** Data kickedOutTime. */
                public kickedOutTime?: (google.protobuf.ITimestamp|null);

                /** Data ourKickOff. */
                public ourKickOff: boolean;

                /** Data primaryTime. */
                public primaryTime?: (google.protobuf.ITimestamp|null);

                /** Data secondaryTime. */
                public secondaryTime?: (google.protobuf.ITimestamp|null);

                /** Data team. */
                public team?: (message.input.GameState.Data.ITeam|null);

                /** Data opponent. */
                public opponent?: (message.input.GameState.Data.ITeam|null);

                /** Data self. */
                public self?: (message.input.GameState.Data.IRobot|null);

                /**
                 * Creates a new Data instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Data instance
                 */
                public static create(properties?: message.input.GameState.IData): message.input.GameState.Data;

                /**
                 * Encodes the specified Data message. Does not implicitly {@link message.input.GameState.Data.verify|verify} messages.
                 * @param message Data message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.GameState.IData, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Data message, length delimited. Does not implicitly {@link message.input.GameState.Data.verify|verify} messages.
                 * @param message Data message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.GameState.IData, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Data message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Data
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameState.Data;

                /**
                 * Decodes a Data message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Data
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameState.Data;

                /**
                 * Verifies a Data message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Data message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Data
                 */
                public static fromObject(object: { [k: string]: any }): message.input.GameState.Data;

                /**
                 * Creates a plain object from a Data message. Also converts values to other types if specified.
                 * @param message Data
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.GameState.Data, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Data to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Data {

                /** Mode enum. */
                enum Mode {
                    UNKNOWN_MODE = 0,
                    NORMAL = 1,
                    PENALTY_SHOOTOUT = 2,
                    OVERTIME = 3
                }

                /** Phase enum. */
                enum Phase {
                    UNKNOWN_PHASE = 0,
                    INITIAL = 1,
                    READY = 2,
                    SET = 3,
                    PLAYING = 4,
                    TIMEOUT = 5,
                    FINISHED = 6
                }

                /** PenaltyReason enum. */
                enum PenaltyReason {
                    UNKNOWN_PENALTY_REASON = 0,
                    UNPENALISED = 1,
                    BALL_MANIPULATION = 2,
                    PHYSICAL_CONTACT = 3,
                    ILLEGAL_ATTACK = 4,
                    ILLEGAL_DEFENSE = 5,
                    REQUEST_FOR_PICKUP = 6,
                    REQUEST_FOR_SERVICE = 7,
                    REQUEST_FOR_PICKUP_TO_SERVICE = 8,
                    SUBSTITUTE = 9,
                    MANUAL = 10,
                    PLAYER_PUSHING = 11
                }

                /** Properties of a Robot. */
                interface IRobot {

                    /** Robot id */
                    id?: (number|null);

                    /** Robot penaltyReason */
                    penaltyReason?: (message.input.GameState.Data.PenaltyReason|null);

                    /** Robot unpenalised */
                    unpenalised?: (google.protobuf.ITimestamp|null);
                }

                /** Represents a Robot. */
                class Robot implements IRobot {

                    /**
                     * Constructs a new Robot.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.input.GameState.Data.IRobot);

                    /** Robot id. */
                    public id: number;

                    /** Robot penaltyReason. */
                    public penaltyReason: message.input.GameState.Data.PenaltyReason;

                    /** Robot unpenalised. */
                    public unpenalised?: (google.protobuf.ITimestamp|null);

                    /**
                     * Creates a new Robot instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Robot instance
                     */
                    public static create(properties?: message.input.GameState.Data.IRobot): message.input.GameState.Data.Robot;

                    /**
                     * Encodes the specified Robot message. Does not implicitly {@link message.input.GameState.Data.Robot.verify|verify} messages.
                     * @param message Robot message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.input.GameState.Data.IRobot, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Robot message, length delimited. Does not implicitly {@link message.input.GameState.Data.Robot.verify|verify} messages.
                     * @param message Robot message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.input.GameState.Data.IRobot, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Robot message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Robot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameState.Data.Robot;

                    /**
                     * Decodes a Robot message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Robot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameState.Data.Robot;

                    /**
                     * Verifies a Robot message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Robot message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Robot
                     */
                    public static fromObject(object: { [k: string]: any }): message.input.GameState.Data.Robot;

                    /**
                     * Creates a plain object from a Robot message. Also converts values to other types if specified.
                     * @param message Robot
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.input.GameState.Data.Robot, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Robot to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Team. */
                interface ITeam {

                    /** Team teamId */
                    teamId?: (number|null);

                    /** Team score */
                    score?: (number|null);

                    /** Team coachMessage */
                    coachMessage?: (string|null);

                    /** Team players */
                    players?: (message.input.GameState.Data.IRobot[]|null);
                }

                /** Represents a Team. */
                class Team implements ITeam {

                    /**
                     * Constructs a new Team.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.input.GameState.Data.ITeam);

                    /** Team teamId. */
                    public teamId: number;

                    /** Team score. */
                    public score: number;

                    /** Team coachMessage. */
                    public coachMessage: string;

                    /** Team players. */
                    public players: message.input.GameState.Data.IRobot[];

                    /**
                     * Creates a new Team instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Team instance
                     */
                    public static create(properties?: message.input.GameState.Data.ITeam): message.input.GameState.Data.Team;

                    /**
                     * Encodes the specified Team message. Does not implicitly {@link message.input.GameState.Data.Team.verify|verify} messages.
                     * @param message Team message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.input.GameState.Data.ITeam, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Team message, length delimited. Does not implicitly {@link message.input.GameState.Data.Team.verify|verify} messages.
                     * @param message Team message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.input.GameState.Data.ITeam, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Team message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Team
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.GameState.Data.Team;

                    /**
                     * Decodes a Team message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Team
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.GameState.Data.Team;

                    /**
                     * Verifies a Team message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Team message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Team
                     */
                    public static fromObject(object: { [k: string]: any }): message.input.GameState.Data.Team;

                    /**
                     * Creates a plain object from a Team message. Also converts values to other types if specified.
                     * @param message Team
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.input.GameState.Data.Team, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Team to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Properties of an Image. */
        interface IImage {

            /** Image format */
            format?: (number|null);

            /** Image dimensions */
            dimensions?: (Iuvec2|null);

            /** Image data */
            data?: (Uint8Array|null);

            /** Image cameraId */
            cameraId?: (number|null);

            /** Image serialNumber */
            serialNumber?: (string|null);

            /** Image timestamp */
            timestamp?: (google.protobuf.ITimestamp|null);

            /** Image Hcw */
            Hcw?: (Imat4|null);

            /** Image lens */
            lens?: (message.input.Image.ILens|null);
        }

        /** Represents an Image. */
        class Image implements IImage {

            /**
             * Constructs a new Image.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IImage);

            /** Image format. */
            public format: number;

            /** Image dimensions. */
            public dimensions?: (Iuvec2|null);

            /** Image data. */
            public data: Uint8Array;

            /** Image cameraId. */
            public cameraId: number;

            /** Image serialNumber. */
            public serialNumber: string;

            /** Image timestamp. */
            public timestamp?: (google.protobuf.ITimestamp|null);

            /** Image Hcw. */
            public Hcw?: (Imat4|null);

            /** Image lens. */
            public lens?: (message.input.Image.ILens|null);

            /**
             * Creates a new Image instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Image instance
             */
            public static create(properties?: message.input.IImage): message.input.Image;

            /**
             * Encodes the specified Image message. Does not implicitly {@link message.input.Image.verify|verify} messages.
             * @param message Image message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Image message, length delimited. Does not implicitly {@link message.input.Image.verify|verify} messages.
             * @param message Image message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Image message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Image
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Image;

            /**
             * Decodes an Image message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Image
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Image;

            /**
             * Verifies an Image message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Image message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Image
             */
            public static fromObject(object: { [k: string]: any }): message.input.Image;

            /**
             * Creates a plain object from an Image message. Also converts values to other types if specified.
             * @param message Image
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.Image, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Image to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Image {

            /** Properties of a Lens. */
            interface ILens {
            }

            /** Represents a Lens. */
            class Lens implements ILens {

                /**
                 * Constructs a new Lens.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.Image.ILens);

                /**
                 * Creates a new Lens instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Lens instance
                 */
                public static create(properties?: message.input.Image.ILens): message.input.Image.Lens;

                /**
                 * Encodes the specified Lens message. Does not implicitly {@link message.input.Image.Lens.verify|verify} messages.
                 * @param message Lens message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.Image.ILens, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Lens message, length delimited. Does not implicitly {@link message.input.Image.Lens.verify|verify} messages.
                 * @param message Lens message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.Image.ILens, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Lens message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Lens
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Image.Lens;

                /**
                 * Decodes a Lens message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Lens
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Image.Lens;

                /**
                 * Verifies a Lens message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Lens message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Lens
                 */
                public static fromObject(object: { [k: string]: any }): message.input.Image.Lens;

                /**
                 * Creates a plain object from a Lens message. Also converts values to other types if specified.
                 * @param message Lens
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.Image.Lens, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Lens to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Lens {

                /** Projection enum. */
                enum Projection {
                    RECTILINEAR = 0,
                    EQUIDISTANT = 1
                }
            }
        }

        /** Properties of an ImageFragment. */
        interface IImageFragment {

            /** ImageFragment image */
            image?: (message.input.IImage|null);

            /** ImageFragment start */
            start?: (number|null);

            /** ImageFragment end */
            end?: (number|null);

            /** ImageFragment camToFeet */
            camToFeet?: (Ifmat4|null);
        }

        /** Represents an ImageFragment. */
        class ImageFragment implements IImageFragment {

            /**
             * Constructs a new ImageFragment.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IImageFragment);

            /** ImageFragment image. */
            public image?: (message.input.IImage|null);

            /** ImageFragment start. */
            public start: number;

            /** ImageFragment end. */
            public end: number;

            /** ImageFragment camToFeet. */
            public camToFeet?: (Ifmat4|null);

            /**
             * Creates a new ImageFragment instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ImageFragment instance
             */
            public static create(properties?: message.input.IImageFragment): message.input.ImageFragment;

            /**
             * Encodes the specified ImageFragment message. Does not implicitly {@link message.input.ImageFragment.verify|verify} messages.
             * @param message ImageFragment message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IImageFragment, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ImageFragment message, length delimited. Does not implicitly {@link message.input.ImageFragment.verify|verify} messages.
             * @param message ImageFragment message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IImageFragment, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ImageFragment message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ImageFragment
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.ImageFragment;

            /**
             * Decodes an ImageFragment message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ImageFragment
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.ImageFragment;

            /**
             * Verifies an ImageFragment message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ImageFragment message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ImageFragment
             */
            public static fromObject(object: { [k: string]: any }): message.input.ImageFragment;

            /**
             * Creates a plain object from an ImageFragment message. Also converts values to other types if specified.
             * @param message ImageFragment
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.ImageFragment, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ImageFragment to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MotionCapture. */
        interface IMotionCapture {

            /** MotionCapture frameNumber */
            frameNumber?: (number|null);

            /** MotionCapture latency */
            latency?: (number|null);

            /** MotionCapture timecode */
            timecode?: (number|null);

            /** MotionCapture timecodeSub */
            timecodeSub?: (number|null);

            /** MotionCapture timestamp */
            timestamp?: (number|null);

            /** MotionCapture recording */
            recording?: (boolean|null);

            /** MotionCapture trackedModelsChanged */
            trackedModelsChanged?: (boolean|null);

            /** MotionCapture markerSets */
            markerSets?: (message.input.MotionCapture.IMarkerSet[]|null);

            /** MotionCapture markers */
            markers?: (message.input.MotionCapture.IMarker[]|null);

            /** MotionCapture rigidBodies */
            rigidBodies?: (message.input.MotionCapture.IRigidBody[]|null);

            /** MotionCapture skeletons */
            skeletons?: (message.input.MotionCapture.ISkeleton[]|null);

            /** MotionCapture labeledMarkers */
            labeledMarkers?: (message.input.MotionCapture.ILabeledMarker[]|null);

            /** MotionCapture forcePlates */
            forcePlates?: (message.input.MotionCapture.IForcePlate[]|null);
        }

        /** Represents a MotionCapture. */
        class MotionCapture implements IMotionCapture {

            /**
             * Constructs a new MotionCapture.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IMotionCapture);

            /** MotionCapture frameNumber. */
            public frameNumber: number;

            /** MotionCapture latency. */
            public latency: number;

            /** MotionCapture timecode. */
            public timecode: number;

            /** MotionCapture timecodeSub. */
            public timecodeSub: number;

            /** MotionCapture timestamp. */
            public timestamp: number;

            /** MotionCapture recording. */
            public recording: boolean;

            /** MotionCapture trackedModelsChanged. */
            public trackedModelsChanged: boolean;

            /** MotionCapture markerSets. */
            public markerSets: message.input.MotionCapture.IMarkerSet[];

            /** MotionCapture markers. */
            public markers: message.input.MotionCapture.IMarker[];

            /** MotionCapture rigidBodies. */
            public rigidBodies: message.input.MotionCapture.IRigidBody[];

            /** MotionCapture skeletons. */
            public skeletons: message.input.MotionCapture.ISkeleton[];

            /** MotionCapture labeledMarkers. */
            public labeledMarkers: message.input.MotionCapture.ILabeledMarker[];

            /** MotionCapture forcePlates. */
            public forcePlates: message.input.MotionCapture.IForcePlate[];

            /**
             * Creates a new MotionCapture instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MotionCapture instance
             */
            public static create(properties?: message.input.IMotionCapture): message.input.MotionCapture;

            /**
             * Encodes the specified MotionCapture message. Does not implicitly {@link message.input.MotionCapture.verify|verify} messages.
             * @param message MotionCapture message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IMotionCapture, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MotionCapture message, length delimited. Does not implicitly {@link message.input.MotionCapture.verify|verify} messages.
             * @param message MotionCapture message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IMotionCapture, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MotionCapture message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MotionCapture
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture;

            /**
             * Decodes a MotionCapture message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MotionCapture
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture;

            /**
             * Verifies a MotionCapture message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MotionCapture message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MotionCapture
             */
            public static fromObject(object: { [k: string]: any }): message.input.MotionCapture;

            /**
             * Creates a plain object from a MotionCapture message. Also converts values to other types if specified.
             * @param message MotionCapture
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.MotionCapture, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MotionCapture to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace MotionCapture {

            /** Properties of a Marker. */
            interface IMarker {

                /** Marker id */
                id?: (number|null);

                /** Marker position */
                position?: (Ifvec3|null);

                /** Marker size */
                size?: (number|null);
            }

            /** Represents a Marker. */
            class Marker implements IMarker {

                /**
                 * Constructs a new Marker.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.IMarker);

                /** Marker id. */
                public id: number;

                /** Marker position. */
                public position?: (Ifvec3|null);

                /** Marker size. */
                public size: number;

                /**
                 * Creates a new Marker instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Marker instance
                 */
                public static create(properties?: message.input.MotionCapture.IMarker): message.input.MotionCapture.Marker;

                /**
                 * Encodes the specified Marker message. Does not implicitly {@link message.input.MotionCapture.Marker.verify|verify} messages.
                 * @param message Marker message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.IMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Marker message, length delimited. Does not implicitly {@link message.input.MotionCapture.Marker.verify|verify} messages.
                 * @param message Marker message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.IMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Marker message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Marker
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.Marker;

                /**
                 * Decodes a Marker message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Marker
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.Marker;

                /**
                 * Verifies a Marker message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Marker message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Marker
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.Marker;

                /**
                 * Creates a plain object from a Marker message. Also converts values to other types if specified.
                 * @param message Marker
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.Marker, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Marker to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MarkerSet. */
            interface IMarkerSet {

                /** MarkerSet name */
                name?: (string|null);

                /** MarkerSet markers */
                markers?: (message.input.MotionCapture.IMarker[]|null);
            }

            /** Represents a MarkerSet. */
            class MarkerSet implements IMarkerSet {

                /**
                 * Constructs a new MarkerSet.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.IMarkerSet);

                /** MarkerSet name. */
                public name: string;

                /** MarkerSet markers. */
                public markers: message.input.MotionCapture.IMarker[];

                /**
                 * Creates a new MarkerSet instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MarkerSet instance
                 */
                public static create(properties?: message.input.MotionCapture.IMarkerSet): message.input.MotionCapture.MarkerSet;

                /**
                 * Encodes the specified MarkerSet message. Does not implicitly {@link message.input.MotionCapture.MarkerSet.verify|verify} messages.
                 * @param message MarkerSet message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.IMarkerSet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MarkerSet message, length delimited. Does not implicitly {@link message.input.MotionCapture.MarkerSet.verify|verify} messages.
                 * @param message MarkerSet message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.IMarkerSet, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MarkerSet message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MarkerSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.MarkerSet;

                /**
                 * Decodes a MarkerSet message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MarkerSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.MarkerSet;

                /**
                 * Verifies a MarkerSet message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MarkerSet message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MarkerSet
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.MarkerSet;

                /**
                 * Creates a plain object from a MarkerSet message. Also converts values to other types if specified.
                 * @param message MarkerSet
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.MarkerSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MarkerSet to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RigidBody. */
            interface IRigidBody {

                /** RigidBody id */
                id?: (number|null);

                /** RigidBody position */
                position?: (Ifvec3|null);

                /** RigidBody rotation */
                rotation?: (Ifvec4|null);

                /** RigidBody markers */
                markers?: (message.input.MotionCapture.IMarker[]|null);

                /** RigidBody error */
                error?: (number|null);

                /** RigidBody trackingValid */
                trackingValid?: (boolean|null);

                /** RigidBody name */
                name?: (string|null);

                /** RigidBody offset */
                offset?: (Ifvec3|null);

                /** RigidBody parent */
                parent?: (number|null);

                /** RigidBody children */
                children?: (number[]|null);
            }

            /** Represents a RigidBody. */
            class RigidBody implements IRigidBody {

                /**
                 * Constructs a new RigidBody.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.IRigidBody);

                /** RigidBody id. */
                public id: number;

                /** RigidBody position. */
                public position?: (Ifvec3|null);

                /** RigidBody rotation. */
                public rotation?: (Ifvec4|null);

                /** RigidBody markers. */
                public markers: message.input.MotionCapture.IMarker[];

                /** RigidBody error. */
                public error: number;

                /** RigidBody trackingValid. */
                public trackingValid: boolean;

                /** RigidBody name. */
                public name: string;

                /** RigidBody offset. */
                public offset?: (Ifvec3|null);

                /** RigidBody parent. */
                public parent: number;

                /** RigidBody children. */
                public children: number[];

                /**
                 * Creates a new RigidBody instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RigidBody instance
                 */
                public static create(properties?: message.input.MotionCapture.IRigidBody): message.input.MotionCapture.RigidBody;

                /**
                 * Encodes the specified RigidBody message. Does not implicitly {@link message.input.MotionCapture.RigidBody.verify|verify} messages.
                 * @param message RigidBody message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.IRigidBody, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RigidBody message, length delimited. Does not implicitly {@link message.input.MotionCapture.RigidBody.verify|verify} messages.
                 * @param message RigidBody message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.IRigidBody, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RigidBody message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RigidBody
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.RigidBody;

                /**
                 * Decodes a RigidBody message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RigidBody
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.RigidBody;

                /**
                 * Verifies a RigidBody message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RigidBody message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RigidBody
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.RigidBody;

                /**
                 * Creates a plain object from a RigidBody message. Also converts values to other types if specified.
                 * @param message RigidBody
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.RigidBody, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RigidBody to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Skeleton. */
            interface ISkeleton {

                /** Skeleton id */
                id?: (number|null);

                /** Skeleton bones */
                bones?: (message.input.MotionCapture.IRigidBody[]|null);

                /** Skeleton name */
                name?: (string|null);
            }

            /** Represents a Skeleton. */
            class Skeleton implements ISkeleton {

                /**
                 * Constructs a new Skeleton.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.ISkeleton);

                /** Skeleton id. */
                public id: number;

                /** Skeleton bones. */
                public bones: message.input.MotionCapture.IRigidBody[];

                /** Skeleton name. */
                public name: string;

                /**
                 * Creates a new Skeleton instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Skeleton instance
                 */
                public static create(properties?: message.input.MotionCapture.ISkeleton): message.input.MotionCapture.Skeleton;

                /**
                 * Encodes the specified Skeleton message. Does not implicitly {@link message.input.MotionCapture.Skeleton.verify|verify} messages.
                 * @param message Skeleton message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.ISkeleton, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Skeleton message, length delimited. Does not implicitly {@link message.input.MotionCapture.Skeleton.verify|verify} messages.
                 * @param message Skeleton message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.ISkeleton, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Skeleton message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Skeleton
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.Skeleton;

                /**
                 * Decodes a Skeleton message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Skeleton
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.Skeleton;

                /**
                 * Verifies a Skeleton message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Skeleton message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Skeleton
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.Skeleton;

                /**
                 * Creates a plain object from a Skeleton message. Also converts values to other types if specified.
                 * @param message Skeleton
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.Skeleton, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Skeleton to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LabeledMarker. */
            interface ILabeledMarker {

                /** LabeledMarker marker */
                marker?: (message.input.MotionCapture.IMarker|null);

                /** LabeledMarker occluded */
                occluded?: (boolean|null);

                /** LabeledMarker pointCloudSolved */
                pointCloudSolved?: (boolean|null);

                /** LabeledMarker modelSolved */
                modelSolved?: (boolean|null);
            }

            /** Represents a LabeledMarker. */
            class LabeledMarker implements ILabeledMarker {

                /**
                 * Constructs a new LabeledMarker.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.ILabeledMarker);

                /** LabeledMarker marker. */
                public marker?: (message.input.MotionCapture.IMarker|null);

                /** LabeledMarker occluded. */
                public occluded: boolean;

                /** LabeledMarker pointCloudSolved. */
                public pointCloudSolved: boolean;

                /** LabeledMarker modelSolved. */
                public modelSolved: boolean;

                /**
                 * Creates a new LabeledMarker instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LabeledMarker instance
                 */
                public static create(properties?: message.input.MotionCapture.ILabeledMarker): message.input.MotionCapture.LabeledMarker;

                /**
                 * Encodes the specified LabeledMarker message. Does not implicitly {@link message.input.MotionCapture.LabeledMarker.verify|verify} messages.
                 * @param message LabeledMarker message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.ILabeledMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LabeledMarker message, length delimited. Does not implicitly {@link message.input.MotionCapture.LabeledMarker.verify|verify} messages.
                 * @param message LabeledMarker message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.ILabeledMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LabeledMarker message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LabeledMarker
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.LabeledMarker;

                /**
                 * Decodes a LabeledMarker message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LabeledMarker
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.LabeledMarker;

                /**
                 * Verifies a LabeledMarker message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LabeledMarker message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LabeledMarker
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.LabeledMarker;

                /**
                 * Creates a plain object from a LabeledMarker message. Also converts values to other types if specified.
                 * @param message LabeledMarker
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.LabeledMarker, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LabeledMarker to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Channel. */
            interface IChannel {

                /** Channel channel */
                channel?: (number[]|null);
            }

            /** Represents a Channel. */
            class Channel implements IChannel {

                /**
                 * Constructs a new Channel.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.IChannel);

                /** Channel channel. */
                public channel: number[];

                /**
                 * Creates a new Channel instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Channel instance
                 */
                public static create(properties?: message.input.MotionCapture.IChannel): message.input.MotionCapture.Channel;

                /**
                 * Encodes the specified Channel message. Does not implicitly {@link message.input.MotionCapture.Channel.verify|verify} messages.
                 * @param message Channel message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Channel message, length delimited. Does not implicitly {@link message.input.MotionCapture.Channel.verify|verify} messages.
                 * @param message Channel message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Channel message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Channel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.Channel;

                /**
                 * Decodes a Channel message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Channel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.Channel;

                /**
                 * Verifies a Channel message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Channel
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.Channel;

                /**
                 * Creates a plain object from a Channel message. Also converts values to other types if specified.
                 * @param message Channel
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.Channel, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Channel to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ForcePlate. */
            interface IForcePlate {

                /** ForcePlate id */
                id?: (number|null);

                /** ForcePlate channels */
                channels?: (message.input.MotionCapture.IChannel[]|null);
            }

            /** Represents a ForcePlate. */
            class ForcePlate implements IForcePlate {

                /**
                 * Constructs a new ForcePlate.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.MotionCapture.IForcePlate);

                /** ForcePlate id. */
                public id: number;

                /** ForcePlate channels. */
                public channels: message.input.MotionCapture.IChannel[];

                /**
                 * Creates a new ForcePlate instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ForcePlate instance
                 */
                public static create(properties?: message.input.MotionCapture.IForcePlate): message.input.MotionCapture.ForcePlate;

                /**
                 * Encodes the specified ForcePlate message. Does not implicitly {@link message.input.MotionCapture.ForcePlate.verify|verify} messages.
                 * @param message ForcePlate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.MotionCapture.IForcePlate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ForcePlate message, length delimited. Does not implicitly {@link message.input.MotionCapture.ForcePlate.verify|verify} messages.
                 * @param message ForcePlate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.MotionCapture.IForcePlate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ForcePlate message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ForcePlate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.MotionCapture.ForcePlate;

                /**
                 * Decodes a ForcePlate message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ForcePlate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.MotionCapture.ForcePlate;

                /**
                 * Verifies a ForcePlate message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ForcePlate message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ForcePlate
                 */
                public static fromObject(object: { [k: string]: any }): message.input.MotionCapture.ForcePlate;

                /**
                 * Creates a plain object from a ForcePlate message. Also converts values to other types if specified.
                 * @param message ForcePlate
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.MotionCapture.ForcePlate, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ForcePlate to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a WalkingDetected. */
        interface IWalkingDetected {
        }

        /** Represents a WalkingDetected. */
        class WalkingDetected implements IWalkingDetected {

            /**
             * Constructs a new WalkingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IWalkingDetected);

            /**
             * Creates a new WalkingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkingDetected instance
             */
            public static create(properties?: message.input.IWalkingDetected): message.input.WalkingDetected;

            /**
             * Encodes the specified WalkingDetected message. Does not implicitly {@link message.input.WalkingDetected.verify|verify} messages.
             * @param message WalkingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IWalkingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkingDetected message, length delimited. Does not implicitly {@link message.input.WalkingDetected.verify|verify} messages.
             * @param message WalkingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IWalkingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.WalkingDetected;

            /**
             * Decodes a WalkingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.WalkingDetected;

            /**
             * Verifies a WalkingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.WalkingDetected;

            /**
             * Creates a plain object from a WalkingDetected message. Also converts values to other types if specified.
             * @param message WalkingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.WalkingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a BendingDetected. */
        interface IBendingDetected {
        }

        /** Represents a BendingDetected. */
        class BendingDetected implements IBendingDetected {

            /**
             * Constructs a new BendingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IBendingDetected);

            /**
             * Creates a new BendingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns BendingDetected instance
             */
            public static create(properties?: message.input.IBendingDetected): message.input.BendingDetected;

            /**
             * Encodes the specified BendingDetected message. Does not implicitly {@link message.input.BendingDetected.verify|verify} messages.
             * @param message BendingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IBendingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BendingDetected message, length delimited. Does not implicitly {@link message.input.BendingDetected.verify|verify} messages.
             * @param message BendingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IBendingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BendingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns BendingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.BendingDetected;

            /**
             * Decodes a BendingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns BendingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.BendingDetected;

            /**
             * Verifies a BendingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BendingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BendingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.BendingDetected;

            /**
             * Creates a plain object from a BendingDetected message. Also converts values to other types if specified.
             * @param message BendingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.BendingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BendingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KickingDetected. */
        interface IKickingDetected {
        }

        /** Represents a KickingDetected. */
        class KickingDetected implements IKickingDetected {

            /**
             * Constructs a new KickingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IKickingDetected);

            /**
             * Creates a new KickingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickingDetected instance
             */
            public static create(properties?: message.input.IKickingDetected): message.input.KickingDetected;

            /**
             * Encodes the specified KickingDetected message. Does not implicitly {@link message.input.KickingDetected.verify|verify} messages.
             * @param message KickingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IKickingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickingDetected message, length delimited. Does not implicitly {@link message.input.KickingDetected.verify|verify} messages.
             * @param message KickingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IKickingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.KickingDetected;

            /**
             * Decodes a KickingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.KickingDetected;

            /**
             * Verifies a KickingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.KickingDetected;

            /**
             * Creates a plain object from a KickingDetected message. Also converts values to other types if specified.
             * @param message KickingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.KickingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SittingDetected. */
        interface ISittingDetected {
        }

        /** Represents a SittingDetected. */
        class SittingDetected implements ISittingDetected {

            /**
             * Constructs a new SittingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.ISittingDetected);

            /**
             * Creates a new SittingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SittingDetected instance
             */
            public static create(properties?: message.input.ISittingDetected): message.input.SittingDetected;

            /**
             * Encodes the specified SittingDetected message. Does not implicitly {@link message.input.SittingDetected.verify|verify} messages.
             * @param message SittingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.ISittingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SittingDetected message, length delimited. Does not implicitly {@link message.input.SittingDetected.verify|verify} messages.
             * @param message SittingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.ISittingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SittingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SittingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.SittingDetected;

            /**
             * Decodes a SittingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SittingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.SittingDetected;

            /**
             * Verifies a SittingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SittingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SittingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.SittingDetected;

            /**
             * Creates a plain object from a SittingDetected message. Also converts values to other types if specified.
             * @param message SittingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.SittingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SittingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StandingDetected. */
        interface IStandingDetected {
        }

        /** Represents a StandingDetected. */
        class StandingDetected implements IStandingDetected {

            /**
             * Constructs a new StandingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IStandingDetected);

            /**
             * Creates a new StandingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StandingDetected instance
             */
            public static create(properties?: message.input.IStandingDetected): message.input.StandingDetected;

            /**
             * Encodes the specified StandingDetected message. Does not implicitly {@link message.input.StandingDetected.verify|verify} messages.
             * @param message StandingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IStandingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StandingDetected message, length delimited. Does not implicitly {@link message.input.StandingDetected.verify|verify} messages.
             * @param message StandingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IStandingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StandingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StandingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.StandingDetected;

            /**
             * Decodes a StandingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StandingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.StandingDetected;

            /**
             * Verifies a StandingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StandingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StandingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.StandingDetected;

            /**
             * Creates a plain object from a StandingDetected message. Also converts values to other types if specified.
             * @param message StandingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.StandingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StandingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FallingDetected. */
        interface IFallingDetected {

            /** FallingDetected x */
            x?: (number|null);

            /** FallingDetected y */
            y?: (number|null);

            /** FallingDetected z */
            z?: (number|null);
        }

        /** Represents a FallingDetected. */
        class FallingDetected implements IFallingDetected {

            /**
             * Constructs a new FallingDetected.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IFallingDetected);

            /** FallingDetected x. */
            public x: number;

            /** FallingDetected y. */
            public y: number;

            /** FallingDetected z. */
            public z: number;

            /**
             * Creates a new FallingDetected instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FallingDetected instance
             */
            public static create(properties?: message.input.IFallingDetected): message.input.FallingDetected;

            /**
             * Encodes the specified FallingDetected message. Does not implicitly {@link message.input.FallingDetected.verify|verify} messages.
             * @param message FallingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IFallingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FallingDetected message, length delimited. Does not implicitly {@link message.input.FallingDetected.verify|verify} messages.
             * @param message FallingDetected message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IFallingDetected, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FallingDetected message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FallingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.FallingDetected;

            /**
             * Decodes a FallingDetected message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FallingDetected
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.FallingDetected;

            /**
             * Verifies a FallingDetected message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FallingDetected message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FallingDetected
             */
            public static fromObject(object: { [k: string]: any }): message.input.FallingDetected;

            /**
             * Creates a plain object from a FallingDetected message. Also converts values to other types if specified.
             * @param message FallingDetected
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.FallingDetected, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FallingDetected to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a PresenceUserState. */
        interface IPresenceUserState {

            /** PresenceUserState headPose */
            headPose?: (Ifmat4|null);
        }

        /** Represents a PresenceUserState. */
        class PresenceUserState implements IPresenceUserState {

            /**
             * Constructs a new PresenceUserState.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.IPresenceUserState);

            /** PresenceUserState headPose. */
            public headPose?: (Ifmat4|null);

            /**
             * Creates a new PresenceUserState instance using the specified properties.
             * @param [properties] Properties to set
             * @returns PresenceUserState instance
             */
            public static create(properties?: message.input.IPresenceUserState): message.input.PresenceUserState;

            /**
             * Encodes the specified PresenceUserState message. Does not implicitly {@link message.input.PresenceUserState.verify|verify} messages.
             * @param message PresenceUserState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.IPresenceUserState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified PresenceUserState message, length delimited. Does not implicitly {@link message.input.PresenceUserState.verify|verify} messages.
             * @param message PresenceUserState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.IPresenceUserState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a PresenceUserState message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns PresenceUserState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.PresenceUserState;

            /**
             * Decodes a PresenceUserState message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns PresenceUserState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.PresenceUserState;

            /**
             * Verifies a PresenceUserState message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a PresenceUserState message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns PresenceUserState
             */
            public static fromObject(object: { [k: string]: any }): message.input.PresenceUserState;

            /**
             * Creates a plain object from a PresenceUserState message. Also converts values to other types if specified.
             * @param message PresenceUserState
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.PresenceUserState, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this PresenceUserState to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Sensors. */
        interface ISensors {

            /** Sensors timestamp */
            timestamp?: (google.protobuf.ITimestamp|null);

            /** Sensors accelerometer */
            accelerometer?: (Ivec3|null);

            /** Sensors gyroscope */
            gyroscope?: (Ivec3|null);

            /** space. */
            world?: (Imat4|null);

            /** Sensors fsr */
            fsr?: (message.input.Sensors.IFSR[]|null);

            /** Sensors servo */
            servo?: (message.input.Sensors.IServo[]|null);

            /** Sensors button */
            button?: (message.input.Sensors.IButton[]|null);

            /** Sensors led */
            led?: (message.input.Sensors.ILED[]|null);

            /** Sensors voltage */
            voltage?: (number|null);

            /** Sensors battery */
            battery?: (number|null);

            /** Sensors centreOfPressure */
            centreOfPressure?: (Ivec3|null);

            /** Sensors robotToIMU */
            robotToIMU?: (Imat2|null);

            /** Percentage of the left foot that's considered "down" i.e. if 3/4 FSR sensors have weight this is 0.75 */
            leftFootDown?: (boolean|null);

            /** Sensors rightFootDown */
            rightFootDown?: (boolean|null);

            /** Sensors forwardKinematics */
            forwardKinematics?: (Imat4[]|null);

            /** Sensors bodyCentreHeight */
            bodyCentreHeight?: (number|null);

            /** Sensors centreOfMass */
            centreOfMass?: (Ivec4|null);

            /** Sensors bodyToGround */
            bodyToGround?: (Imat4|null);

            /** Sensors camToGround */
            camToGround?: (Imat4|null);
        }

        /** Represents a Sensors. */
        class Sensors implements ISensors {

            /**
             * Constructs a new Sensors.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.input.ISensors);

            /** Sensors timestamp. */
            public timestamp?: (google.protobuf.ITimestamp|null);

            /** Sensors accelerometer. */
            public accelerometer?: (Ivec3|null);

            /** Sensors gyroscope. */
            public gyroscope?: (Ivec3|null);

            /** space. */
            public world?: (Imat4|null);

            /** Sensors fsr. */
            public fsr: message.input.Sensors.IFSR[];

            /** Sensors servo. */
            public servo: message.input.Sensors.IServo[];

            /** Sensors button. */
            public button: message.input.Sensors.IButton[];

            /** Sensors led. */
            public led: message.input.Sensors.ILED[];

            /** Sensors voltage. */
            public voltage: number;

            /** Sensors battery. */
            public battery: number;

            /** Sensors centreOfPressure. */
            public centreOfPressure?: (Ivec3|null);

            /** Sensors robotToIMU. */
            public robotToIMU?: (Imat2|null);

            /** Percentage of the left foot that's considered "down" i.e. if 3/4 FSR sensors have weight this is 0.75 */
            public leftFootDown: boolean;

            /** Sensors rightFootDown. */
            public rightFootDown: boolean;

            /** Sensors forwardKinematics. */
            public forwardKinematics: Imat4[];

            /** Sensors bodyCentreHeight. */
            public bodyCentreHeight: number;

            /** Sensors centreOfMass. */
            public centreOfMass?: (Ivec4|null);

            /** Sensors bodyToGround. */
            public bodyToGround?: (Imat4|null);

            /** Sensors camToGround. */
            public camToGround?: (Imat4|null);

            /**
             * Creates a new Sensors instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Sensors instance
             */
            public static create(properties?: message.input.ISensors): message.input.Sensors;

            /**
             * Encodes the specified Sensors message. Does not implicitly {@link message.input.Sensors.verify|verify} messages.
             * @param message Sensors message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.input.ISensors, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Sensors message, length delimited. Does not implicitly {@link message.input.Sensors.verify|verify} messages.
             * @param message Sensors message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.input.ISensors, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Sensors message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Sensors
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Sensors;

            /**
             * Decodes a Sensors message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Sensors
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Sensors;

            /**
             * Verifies a Sensors message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Sensors message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Sensors
             */
            public static fromObject(object: { [k: string]: any }): message.input.Sensors;

            /**
             * Creates a plain object from a Sensors message. Also converts values to other types if specified.
             * @param message Sensors
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.input.Sensors, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Sensors to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Sensors {

            /** Properties of a Servo. */
            interface IServo {

                /** Servo errorFlags */
                errorFlags?: (number|null);

                /** Servo id */
                id?: (number|null);

                /** Servo enabled */
                enabled?: (boolean|null);

                /** Servo pGain */
                pGain?: (number|null);

                /** Servo iGain */
                iGain?: (number|null);

                /** Servo dGain */
                dGain?: (number|null);

                /** Servo goalPosition */
                goalPosition?: (number|null);

                /** Servo goalVelocity */
                goalVelocity?: (number|null);

                /** Servo presentPosition */
                presentPosition?: (number|null);

                /** Servo presentVelocity */
                presentVelocity?: (number|null);

                /** Servo load */
                load?: (number|null);

                /** Servo voltage */
                voltage?: (number|null);

                /** Servo temperature */
                temperature?: (number|null);
            }

            /** Represents a Servo. */
            class Servo implements IServo {

                /**
                 * Constructs a new Servo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.Sensors.IServo);

                /** Servo errorFlags. */
                public errorFlags: number;

                /** Servo id. */
                public id: number;

                /** Servo enabled. */
                public enabled: boolean;

                /** Servo pGain. */
                public pGain: number;

                /** Servo iGain. */
                public iGain: number;

                /** Servo dGain. */
                public dGain: number;

                /** Servo goalPosition. */
                public goalPosition: number;

                /** Servo goalVelocity. */
                public goalVelocity: number;

                /** Servo presentPosition. */
                public presentPosition: number;

                /** Servo presentVelocity. */
                public presentVelocity: number;

                /** Servo load. */
                public load: number;

                /** Servo voltage. */
                public voltage: number;

                /** Servo temperature. */
                public temperature: number;

                /**
                 * Creates a new Servo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Servo instance
                 */
                public static create(properties?: message.input.Sensors.IServo): message.input.Sensors.Servo;

                /**
                 * Encodes the specified Servo message. Does not implicitly {@link message.input.Sensors.Servo.verify|verify} messages.
                 * @param message Servo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.Sensors.IServo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Servo message, length delimited. Does not implicitly {@link message.input.Sensors.Servo.verify|verify} messages.
                 * @param message Servo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.Sensors.IServo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Servo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Servo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Sensors.Servo;

                /**
                 * Decodes a Servo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Servo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Sensors.Servo;

                /**
                 * Verifies a Servo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Servo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Servo
                 */
                public static fromObject(object: { [k: string]: any }): message.input.Sensors.Servo;

                /**
                 * Creates a plain object from a Servo message. Also converts values to other types if specified.
                 * @param message Servo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.Sensors.Servo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Servo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Button. */
            interface IButton {

                /** Button id */
                id?: (number|null);

                /** Button value */
                value?: (boolean|null);
            }

            /** Represents a Button. */
            class Button implements IButton {

                /**
                 * Constructs a new Button.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.Sensors.IButton);

                /** Button id. */
                public id: number;

                /** Button value. */
                public value: boolean;

                /**
                 * Creates a new Button instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Button instance
                 */
                public static create(properties?: message.input.Sensors.IButton): message.input.Sensors.Button;

                /**
                 * Encodes the specified Button message. Does not implicitly {@link message.input.Sensors.Button.verify|verify} messages.
                 * @param message Button message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.Sensors.IButton, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Button message, length delimited. Does not implicitly {@link message.input.Sensors.Button.verify|verify} messages.
                 * @param message Button message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.Sensors.IButton, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Button message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Button
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Sensors.Button;

                /**
                 * Decodes a Button message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Button
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Sensors.Button;

                /**
                 * Verifies a Button message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Button message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Button
                 */
                public static fromObject(object: { [k: string]: any }): message.input.Sensors.Button;

                /**
                 * Creates a plain object from a Button message. Also converts values to other types if specified.
                 * @param message Button
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.Sensors.Button, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Button to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LED. */
            interface ILED {

                /** LED id */
                id?: (number|null);

                /** LED colour */
                colour?: (number|null);
            }

            /** Represents a LED. */
            class LED implements ILED {

                /**
                 * Constructs a new LED.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.Sensors.ILED);

                /** LED id. */
                public id: number;

                /** LED colour. */
                public colour: number;

                /**
                 * Creates a new LED instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LED instance
                 */
                public static create(properties?: message.input.Sensors.ILED): message.input.Sensors.LED;

                /**
                 * Encodes the specified LED message. Does not implicitly {@link message.input.Sensors.LED.verify|verify} messages.
                 * @param message LED message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.Sensors.ILED, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LED message, length delimited. Does not implicitly {@link message.input.Sensors.LED.verify|verify} messages.
                 * @param message LED message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.Sensors.ILED, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LED message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LED
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Sensors.LED;

                /**
                 * Decodes a LED message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LED
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Sensors.LED;

                /**
                 * Verifies a LED message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LED message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LED
                 */
                public static fromObject(object: { [k: string]: any }): message.input.Sensors.LED;

                /**
                 * Creates a plain object from a LED message. Also converts values to other types if specified.
                 * @param message LED
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.Sensors.LED, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LED to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FSR. */
            interface IFSR {

                /** FSR value */
                value?: (number[]|null);

                /** FSR centre */
                centre?: (Ivec2|null);
            }

            /** Represents a FSR. */
            class FSR implements IFSR {

                /**
                 * Constructs a new FSR.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.input.Sensors.IFSR);

                /** FSR value. */
                public value: number[];

                /** FSR centre. */
                public centre?: (Ivec2|null);

                /**
                 * Creates a new FSR instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns FSR instance
                 */
                public static create(properties?: message.input.Sensors.IFSR): message.input.Sensors.FSR;

                /**
                 * Encodes the specified FSR message. Does not implicitly {@link message.input.Sensors.FSR.verify|verify} messages.
                 * @param message FSR message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.input.Sensors.IFSR, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FSR message, length delimited. Does not implicitly {@link message.input.Sensors.FSR.verify|verify} messages.
                 * @param message FSR message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.input.Sensors.IFSR, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FSR message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns FSR
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.input.Sensors.FSR;

                /**
                 * Decodes a FSR message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns FSR
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.input.Sensors.FSR;

                /**
                 * Verifies a FSR message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FSR message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FSR
                 */
                public static fromObject(object: { [k: string]: any }): message.input.Sensors.FSR;

                /**
                 * Creates a plain object from a FSR message. Also converts values to other types if specified.
                 * @param message FSR
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.input.Sensors.FSR, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FSR to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace localisation. */
    namespace localisation {

        /** Properties of a Ball. */
        interface IBall {

            /** Ball position */
            position?: (Ivec2|null);

            /** Ball covariance */
            covariance?: (Imat2|null);
        }

        /** Represents a Ball. */
        class Ball implements IBall {

            /**
             * Constructs a new Ball.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.localisation.IBall);

            /** Ball position. */
            public position?: (Ivec2|null);

            /** Ball covariance. */
            public covariance?: (Imat2|null);

            /**
             * Creates a new Ball instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Ball instance
             */
            public static create(properties?: message.localisation.IBall): message.localisation.Ball;

            /**
             * Encodes the specified Ball message. Does not implicitly {@link message.localisation.Ball.verify|verify} messages.
             * @param message Ball message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.localisation.IBall, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Ball message, length delimited. Does not implicitly {@link message.localisation.Ball.verify|verify} messages.
             * @param message Ball message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.localisation.IBall, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Ball message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Ball
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.localisation.Ball;

            /**
             * Decodes a Ball message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Ball
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.localisation.Ball;

            /**
             * Verifies a Ball message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Ball message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Ball
             */
            public static fromObject(object: { [k: string]: any }): message.localisation.Ball;

            /**
             * Creates a plain object from a Ball message. Also converts values to other types if specified.
             * @param message Ball
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.localisation.Ball, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Ball to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Field. */
        interface IField {

            /** Field position */
            position?: (Ivec3|null);

            /** Field covariance */
            covariance?: (Imat3|null);
        }

        /** Represents a Field. */
        class Field implements IField {

            /**
             * Constructs a new Field.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.localisation.IField);

            /** Field position. */
            public position?: (Ivec3|null);

            /** Field covariance. */
            public covariance?: (Imat3|null);

            /**
             * Creates a new Field instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Field instance
             */
            public static create(properties?: message.localisation.IField): message.localisation.Field;

            /**
             * Encodes the specified Field message. Does not implicitly {@link message.localisation.Field.verify|verify} messages.
             * @param message Field message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.localisation.IField, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Field message, length delimited. Does not implicitly {@link message.localisation.Field.verify|verify} messages.
             * @param message Field message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.localisation.IField, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Field message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Field
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.localisation.Field;

            /**
             * Decodes a Field message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Field
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.localisation.Field;

            /**
             * Verifies a Field message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Field message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Field
             */
            public static fromObject(object: { [k: string]: any }): message.localisation.Field;

            /**
             * Creates a plain object from a Field message. Also converts values to other types if specified.
             * @param message Field
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.localisation.Field, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Field to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ResetRobotHypotheses. */
        interface IResetRobotHypotheses {

            /** ResetRobotHypotheses hypotheses */
            hypotheses?: (message.localisation.ResetRobotHypotheses.ISelf[]|null);
        }

        /** Represents a ResetRobotHypotheses. */
        class ResetRobotHypotheses implements IResetRobotHypotheses {

            /**
             * Constructs a new ResetRobotHypotheses.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.localisation.IResetRobotHypotheses);

            /** ResetRobotHypotheses hypotheses. */
            public hypotheses: message.localisation.ResetRobotHypotheses.ISelf[];

            /**
             * Creates a new ResetRobotHypotheses instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ResetRobotHypotheses instance
             */
            public static create(properties?: message.localisation.IResetRobotHypotheses): message.localisation.ResetRobotHypotheses;

            /**
             * Encodes the specified ResetRobotHypotheses message. Does not implicitly {@link message.localisation.ResetRobotHypotheses.verify|verify} messages.
             * @param message ResetRobotHypotheses message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.localisation.IResetRobotHypotheses, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ResetRobotHypotheses message, length delimited. Does not implicitly {@link message.localisation.ResetRobotHypotheses.verify|verify} messages.
             * @param message ResetRobotHypotheses message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.localisation.IResetRobotHypotheses, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ResetRobotHypotheses message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ResetRobotHypotheses
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.localisation.ResetRobotHypotheses;

            /**
             * Decodes a ResetRobotHypotheses message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ResetRobotHypotheses
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.localisation.ResetRobotHypotheses;

            /**
             * Verifies a ResetRobotHypotheses message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ResetRobotHypotheses message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ResetRobotHypotheses
             */
            public static fromObject(object: { [k: string]: any }): message.localisation.ResetRobotHypotheses;

            /**
             * Creates a plain object from a ResetRobotHypotheses message. Also converts values to other types if specified.
             * @param message ResetRobotHypotheses
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.localisation.ResetRobotHypotheses, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ResetRobotHypotheses to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace ResetRobotHypotheses {

            /** Properties of a Self. */
            interface ISelf {

                /** Self position */
                position?: (Ivec2|null);

                /** Self positionCov */
                positionCov?: (Imat2|null);

                /** Self heading */
                heading?: (number|null);

                /** Self headingVar */
                headingVar?: (number|null);

                /** Self absoluteYaw */
                absoluteYaw?: (boolean|null);
            }

            /** Represents a Self. */
            class Self implements ISelf {

                /**
                 * Constructs a new Self.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.localisation.ResetRobotHypotheses.ISelf);

                /** Self position. */
                public position?: (Ivec2|null);

                /** Self positionCov. */
                public positionCov?: (Imat2|null);

                /** Self heading. */
                public heading: number;

                /** Self headingVar. */
                public headingVar: number;

                /** Self absoluteYaw. */
                public absoluteYaw: boolean;

                /**
                 * Creates a new Self instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Self instance
                 */
                public static create(properties?: message.localisation.ResetRobotHypotheses.ISelf): message.localisation.ResetRobotHypotheses.Self;

                /**
                 * Encodes the specified Self message. Does not implicitly {@link message.localisation.ResetRobotHypotheses.Self.verify|verify} messages.
                 * @param message Self message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.localisation.ResetRobotHypotheses.ISelf, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Self message, length delimited. Does not implicitly {@link message.localisation.ResetRobotHypotheses.Self.verify|verify} messages.
                 * @param message Self message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.localisation.ResetRobotHypotheses.ISelf, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Self message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Self
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.localisation.ResetRobotHypotheses.Self;

                /**
                 * Decodes a Self message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Self
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.localisation.ResetRobotHypotheses.Self;

                /**
                 * Verifies a Self message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Self message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Self
                 */
                public static fromObject(object: { [k: string]: any }): message.localisation.ResetRobotHypotheses.Self;

                /**
                 * Creates a plain object from a Self message. Also converts values to other types if specified.
                 * @param message Self
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.localisation.ResetRobotHypotheses.Self, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Self to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace motion. */
    namespace motion {

        /** Properties of a BalanceBodyUpdate. */
        interface IBalanceBodyUpdate {

            /** BalanceBodyUpdate phase */
            phase?: (number|null);

            /** BalanceBodyUpdate leftFoot */
            leftFoot?: (Imat4|null);

            /** BalanceBodyUpdate rightFoot */
            rightFoot?: (Imat4|null);

            /** BalanceBodyUpdate armLPosition */
            armLPosition?: (Ivec3|null);

            /** BalanceBodyUpdate armRPosition */
            armRPosition?: (Ivec3|null);
        }

        /** Represents a BalanceBodyUpdate. */
        class BalanceBodyUpdate implements IBalanceBodyUpdate {

            /**
             * Constructs a new BalanceBodyUpdate.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IBalanceBodyUpdate);

            /** BalanceBodyUpdate phase. */
            public phase: number;

            /** BalanceBodyUpdate leftFoot. */
            public leftFoot?: (Imat4|null);

            /** BalanceBodyUpdate rightFoot. */
            public rightFoot?: (Imat4|null);

            /** BalanceBodyUpdate armLPosition. */
            public armLPosition?: (Ivec3|null);

            /** BalanceBodyUpdate armRPosition. */
            public armRPosition?: (Ivec3|null);

            /**
             * Creates a new BalanceBodyUpdate instance using the specified properties.
             * @param [properties] Properties to set
             * @returns BalanceBodyUpdate instance
             */
            public static create(properties?: message.motion.IBalanceBodyUpdate): message.motion.BalanceBodyUpdate;

            /**
             * Encodes the specified BalanceBodyUpdate message. Does not implicitly {@link message.motion.BalanceBodyUpdate.verify|verify} messages.
             * @param message BalanceBodyUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IBalanceBodyUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BalanceBodyUpdate message, length delimited. Does not implicitly {@link message.motion.BalanceBodyUpdate.verify|verify} messages.
             * @param message BalanceBodyUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IBalanceBodyUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BalanceBodyUpdate message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns BalanceBodyUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.BalanceBodyUpdate;

            /**
             * Decodes a BalanceBodyUpdate message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns BalanceBodyUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.BalanceBodyUpdate;

            /**
             * Verifies a BalanceBodyUpdate message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BalanceBodyUpdate message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BalanceBodyUpdate
             */
            public static fromObject(object: { [k: string]: any }): message.motion.BalanceBodyUpdate;

            /**
             * Creates a plain object from a BalanceBodyUpdate message. Also converts values to other types if specified.
             * @param message BalanceBodyUpdate
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.BalanceBodyUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BalanceBodyUpdate to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnableBalanceResponse. */
        interface IEnableBalanceResponse {
        }

        /** Represents an EnableBalanceResponse. */
        class EnableBalanceResponse implements IEnableBalanceResponse {

            /**
             * Constructs a new EnableBalanceResponse.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IEnableBalanceResponse);

            /**
             * Creates a new EnableBalanceResponse instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnableBalanceResponse instance
             */
            public static create(properties?: message.motion.IEnableBalanceResponse): message.motion.EnableBalanceResponse;

            /**
             * Encodes the specified EnableBalanceResponse message. Does not implicitly {@link message.motion.EnableBalanceResponse.verify|verify} messages.
             * @param message EnableBalanceResponse message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IEnableBalanceResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnableBalanceResponse message, length delimited. Does not implicitly {@link message.motion.EnableBalanceResponse.verify|verify} messages.
             * @param message EnableBalanceResponse message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IEnableBalanceResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnableBalanceResponse message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnableBalanceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.EnableBalanceResponse;

            /**
             * Decodes an EnableBalanceResponse message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnableBalanceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.EnableBalanceResponse;

            /**
             * Verifies an EnableBalanceResponse message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnableBalanceResponse message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnableBalanceResponse
             */
            public static fromObject(object: { [k: string]: any }): message.motion.EnableBalanceResponse;

            /**
             * Creates a plain object from an EnableBalanceResponse message. Also converts values to other types if specified.
             * @param message EnableBalanceResponse
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.EnableBalanceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnableBalanceResponse to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DisableBalanceResponse. */
        interface IDisableBalanceResponse {
        }

        /** Represents a DisableBalanceResponse. */
        class DisableBalanceResponse implements IDisableBalanceResponse {

            /**
             * Constructs a new DisableBalanceResponse.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDisableBalanceResponse);

            /**
             * Creates a new DisableBalanceResponse instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DisableBalanceResponse instance
             */
            public static create(properties?: message.motion.IDisableBalanceResponse): message.motion.DisableBalanceResponse;

            /**
             * Encodes the specified DisableBalanceResponse message. Does not implicitly {@link message.motion.DisableBalanceResponse.verify|verify} messages.
             * @param message DisableBalanceResponse message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDisableBalanceResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DisableBalanceResponse message, length delimited. Does not implicitly {@link message.motion.DisableBalanceResponse.verify|verify} messages.
             * @param message DisableBalanceResponse message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDisableBalanceResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DisableBalanceResponse message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DisableBalanceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DisableBalanceResponse;

            /**
             * Decodes a DisableBalanceResponse message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DisableBalanceResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DisableBalanceResponse;

            /**
             * Verifies a DisableBalanceResponse message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DisableBalanceResponse message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DisableBalanceResponse
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DisableBalanceResponse;

            /**
             * Creates a plain object from a DisableBalanceResponse message. Also converts values to other types if specified.
             * @param message DisableBalanceResponse
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DisableBalanceResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DisableBalanceResponse to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DiveCommand. */
        interface IDiveCommand {

            /** DiveCommand direction */
            direction?: (Ivec2|null);
        }

        /** Represents a DiveCommand. */
        class DiveCommand implements IDiveCommand {

            /**
             * Constructs a new DiveCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDiveCommand);

            /** DiveCommand direction. */
            public direction?: (Ivec2|null);

            /**
             * Creates a new DiveCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DiveCommand instance
             */
            public static create(properties?: message.motion.IDiveCommand): message.motion.DiveCommand;

            /**
             * Encodes the specified DiveCommand message. Does not implicitly {@link message.motion.DiveCommand.verify|verify} messages.
             * @param message DiveCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDiveCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DiveCommand message, length delimited. Does not implicitly {@link message.motion.DiveCommand.verify|verify} messages.
             * @param message DiveCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDiveCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DiveCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DiveCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DiveCommand;

            /**
             * Decodes a DiveCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DiveCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DiveCommand;

            /**
             * Verifies a DiveCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DiveCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DiveCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DiveCommand;

            /**
             * Creates a plain object from a DiveCommand message. Also converts values to other types if specified.
             * @param message DiveCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DiveCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DiveCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DiveFinished. */
        interface IDiveFinished {
        }

        /** Represents a DiveFinished. */
        class DiveFinished implements IDiveFinished {

            /**
             * Constructs a new DiveFinished.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDiveFinished);

            /**
             * Creates a new DiveFinished instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DiveFinished instance
             */
            public static create(properties?: message.motion.IDiveFinished): message.motion.DiveFinished;

            /**
             * Encodes the specified DiveFinished message. Does not implicitly {@link message.motion.DiveFinished.verify|verify} messages.
             * @param message DiveFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDiveFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DiveFinished message, length delimited. Does not implicitly {@link message.motion.DiveFinished.verify|verify} messages.
             * @param message DiveFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDiveFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DiveFinished message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DiveFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DiveFinished;

            /**
             * Decodes a DiveFinished message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DiveFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DiveFinished;

            /**
             * Verifies a DiveFinished message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DiveFinished message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DiveFinished
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DiveFinished;

            /**
             * Creates a plain object from a DiveFinished message. Also converts values to other types if specified.
             * @param message DiveFinished
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DiveFinished, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DiveFinished to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FootMotionStopped. */
        interface IFootMotionStopped {
        }

        /** Represents a FootMotionStopped. */
        class FootMotionStopped implements IFootMotionStopped {

            /**
             * Constructs a new FootMotionStopped.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IFootMotionStopped);

            /**
             * Creates a new FootMotionStopped instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FootMotionStopped instance
             */
            public static create(properties?: message.motion.IFootMotionStopped): message.motion.FootMotionStopped;

            /**
             * Encodes the specified FootMotionStopped message. Does not implicitly {@link message.motion.FootMotionStopped.verify|verify} messages.
             * @param message FootMotionStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IFootMotionStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FootMotionStopped message, length delimited. Does not implicitly {@link message.motion.FootMotionStopped.verify|verify} messages.
             * @param message FootMotionStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IFootMotionStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FootMotionStopped message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FootMotionStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.FootMotionStopped;

            /**
             * Decodes a FootMotionStopped message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FootMotionStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.FootMotionStopped;

            /**
             * Verifies a FootMotionStopped message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FootMotionStopped message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FootMotionStopped
             */
            public static fromObject(object: { [k: string]: any }): message.motion.FootMotionStopped;

            /**
             * Creates a plain object from a FootMotionStopped message. Also converts values to other types if specified.
             * @param message FootMotionStopped
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.FootMotionStopped, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FootMotionStopped to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FootMotionUpdate. */
        interface IFootMotionUpdate {

            /** FootMotionUpdate phase */
            phase?: (number|null);

            /** FootMotionUpdate activeForwardLimb */
            activeForwardLimb?: (number|null);

            /** FootMotionUpdate leftFoot2D */
            leftFoot2D?: (Ivec3|null);

            /** FootMotionUpdate rightFoot2D */
            rightFoot2D?: (Ivec3|null);

            /** FootMotionUpdate leftFoot3D */
            leftFoot3D?: (Imat4|null);

            /** FootMotionUpdate rightFoot3D */
            rightFoot3D?: (Imat4|null);
        }

        /** Represents a FootMotionUpdate. */
        class FootMotionUpdate implements IFootMotionUpdate {

            /**
             * Constructs a new FootMotionUpdate.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IFootMotionUpdate);

            /** FootMotionUpdate phase. */
            public phase: number;

            /** FootMotionUpdate activeForwardLimb. */
            public activeForwardLimb: number;

            /** FootMotionUpdate leftFoot2D. */
            public leftFoot2D?: (Ivec3|null);

            /** FootMotionUpdate rightFoot2D. */
            public rightFoot2D?: (Ivec3|null);

            /** FootMotionUpdate leftFoot3D. */
            public leftFoot3D?: (Imat4|null);

            /** FootMotionUpdate rightFoot3D. */
            public rightFoot3D?: (Imat4|null);

            /**
             * Creates a new FootMotionUpdate instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FootMotionUpdate instance
             */
            public static create(properties?: message.motion.IFootMotionUpdate): message.motion.FootMotionUpdate;

            /**
             * Encodes the specified FootMotionUpdate message. Does not implicitly {@link message.motion.FootMotionUpdate.verify|verify} messages.
             * @param message FootMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IFootMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FootMotionUpdate message, length delimited. Does not implicitly {@link message.motion.FootMotionUpdate.verify|verify} messages.
             * @param message FootMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IFootMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FootMotionUpdate message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FootMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.FootMotionUpdate;

            /**
             * Decodes a FootMotionUpdate message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FootMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.FootMotionUpdate;

            /**
             * Verifies a FootMotionUpdate message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FootMotionUpdate message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FootMotionUpdate
             */
            public static fromObject(object: { [k: string]: any }): message.motion.FootMotionUpdate;

            /**
             * Creates a plain object from a FootMotionUpdate message. Also converts values to other types if specified.
             * @param message FootMotionUpdate
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.FootMotionUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FootMotionUpdate to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NextFootTargetInfo. */
        interface INextFootTargetInfo {

            /** NextFootTargetInfo leftFootSource */
            leftFootSource?: (Ivec3|null);

            /** NextFootTargetInfo rightFootSource */
            rightFootSource?: (Ivec3|null);

            /** NextFootTargetInfo supportMass */
            supportMass?: (Ivec3|null);

            /** NextFootTargetInfo leftFootDestination */
            leftFootDestination?: (Ivec3|null);

            /** NextFootTargetInfo rightFootDestination */
            rightFootDestination?: (Ivec3|null);
        }

        /** Represents a NextFootTargetInfo. */
        class NextFootTargetInfo implements INextFootTargetInfo {

            /**
             * Constructs a new NextFootTargetInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.INextFootTargetInfo);

            /** NextFootTargetInfo leftFootSource. */
            public leftFootSource?: (Ivec3|null);

            /** NextFootTargetInfo rightFootSource. */
            public rightFootSource?: (Ivec3|null);

            /** NextFootTargetInfo supportMass. */
            public supportMass?: (Ivec3|null);

            /** NextFootTargetInfo leftFootDestination. */
            public leftFootDestination?: (Ivec3|null);

            /** NextFootTargetInfo rightFootDestination. */
            public rightFootDestination?: (Ivec3|null);

            /**
             * Creates a new NextFootTargetInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NextFootTargetInfo instance
             */
            public static create(properties?: message.motion.INextFootTargetInfo): message.motion.NextFootTargetInfo;

            /**
             * Encodes the specified NextFootTargetInfo message. Does not implicitly {@link message.motion.NextFootTargetInfo.verify|verify} messages.
             * @param message NextFootTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.INextFootTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NextFootTargetInfo message, length delimited. Does not implicitly {@link message.motion.NextFootTargetInfo.verify|verify} messages.
             * @param message NextFootTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.INextFootTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NextFootTargetInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NextFootTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.NextFootTargetInfo;

            /**
             * Decodes a NextFootTargetInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NextFootTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.NextFootTargetInfo;

            /**
             * Verifies a NextFootTargetInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NextFootTargetInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NextFootTargetInfo
             */
            public static fromObject(object: { [k: string]: any }): message.motion.NextFootTargetInfo;

            /**
             * Creates a plain object from a NextFootTargetInfo message. Also converts values to other types if specified.
             * @param message NextFootTargetInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.NextFootTargetInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NextFootTargetInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FootStepRequested. */
        interface IFootStepRequested {

            /** FootStepRequested status */
            status?: (boolean|null);
        }

        /** Represents a FootStepRequested. */
        class FootStepRequested implements IFootStepRequested {

            /**
             * Constructs a new FootStepRequested.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IFootStepRequested);

            /** FootStepRequested status. */
            public status: boolean;

            /**
             * Creates a new FootStepRequested instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FootStepRequested instance
             */
            public static create(properties?: message.motion.IFootStepRequested): message.motion.FootStepRequested;

            /**
             * Encodes the specified FootStepRequested message. Does not implicitly {@link message.motion.FootStepRequested.verify|verify} messages.
             * @param message FootStepRequested message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IFootStepRequested, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FootStepRequested message, length delimited. Does not implicitly {@link message.motion.FootStepRequested.verify|verify} messages.
             * @param message FootStepRequested message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IFootStepRequested, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FootStepRequested message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FootStepRequested
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.FootStepRequested;

            /**
             * Decodes a FootStepRequested message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FootStepRequested
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.FootStepRequested;

            /**
             * Verifies a FootStepRequested message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FootStepRequested message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FootStepRequested
             */
            public static fromObject(object: { [k: string]: any }): message.motion.FootStepRequested;

            /**
             * Creates a plain object from a FootStepRequested message. Also converts values to other types if specified.
             * @param message FootStepRequested
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.FootStepRequested, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FootStepRequested to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FootStepCompleted. */
        interface IFootStepCompleted {

            /** FootStepCompleted status */
            status?: (boolean|null);
        }

        /** Represents a FootStepCompleted. */
        class FootStepCompleted implements IFootStepCompleted {

            /**
             * Constructs a new FootStepCompleted.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IFootStepCompleted);

            /** FootStepCompleted status. */
            public status: boolean;

            /**
             * Creates a new FootStepCompleted instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FootStepCompleted instance
             */
            public static create(properties?: message.motion.IFootStepCompleted): message.motion.FootStepCompleted;

            /**
             * Encodes the specified FootStepCompleted message. Does not implicitly {@link message.motion.FootStepCompleted.verify|verify} messages.
             * @param message FootStepCompleted message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IFootStepCompleted, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FootStepCompleted message, length delimited. Does not implicitly {@link message.motion.FootStepCompleted.verify|verify} messages.
             * @param message FootStepCompleted message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IFootStepCompleted, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FootStepCompleted message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FootStepCompleted
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.FootStepCompleted;

            /**
             * Decodes a FootStepCompleted message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FootStepCompleted
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.FootStepCompleted;

            /**
             * Verifies a FootStepCompleted message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FootStepCompleted message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FootStepCompleted
             */
            public static fromObject(object: { [k: string]: any }): message.motion.FootStepCompleted;

            /**
             * Creates a plain object from a FootStepCompleted message. Also converts values to other types if specified.
             * @param message FootStepCompleted
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.FootStepCompleted, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FootStepCompleted to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnableFootMotion. */
        interface IEnableFootMotion {
        }

        /** Represents an EnableFootMotion. */
        class EnableFootMotion implements IEnableFootMotion {

            /**
             * Constructs a new EnableFootMotion.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IEnableFootMotion);

            /**
             * Creates a new EnableFootMotion instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnableFootMotion instance
             */
            public static create(properties?: message.motion.IEnableFootMotion): message.motion.EnableFootMotion;

            /**
             * Encodes the specified EnableFootMotion message. Does not implicitly {@link message.motion.EnableFootMotion.verify|verify} messages.
             * @param message EnableFootMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IEnableFootMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnableFootMotion message, length delimited. Does not implicitly {@link message.motion.EnableFootMotion.verify|verify} messages.
             * @param message EnableFootMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IEnableFootMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnableFootMotion message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnableFootMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.EnableFootMotion;

            /**
             * Decodes an EnableFootMotion message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnableFootMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.EnableFootMotion;

            /**
             * Verifies an EnableFootMotion message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnableFootMotion message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnableFootMotion
             */
            public static fromObject(object: { [k: string]: any }): message.motion.EnableFootMotion;

            /**
             * Creates a plain object from an EnableFootMotion message. Also converts values to other types if specified.
             * @param message EnableFootMotion
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.EnableFootMotion, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnableFootMotion to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DisableFootMotion. */
        interface IDisableFootMotion {
        }

        /** Represents a DisableFootMotion. */
        class DisableFootMotion implements IDisableFootMotion {

            /**
             * Constructs a new DisableFootMotion.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDisableFootMotion);

            /**
             * Creates a new DisableFootMotion instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DisableFootMotion instance
             */
            public static create(properties?: message.motion.IDisableFootMotion): message.motion.DisableFootMotion;

            /**
             * Encodes the specified DisableFootMotion message. Does not implicitly {@link message.motion.DisableFootMotion.verify|verify} messages.
             * @param message DisableFootMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDisableFootMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DisableFootMotion message, length delimited. Does not implicitly {@link message.motion.DisableFootMotion.verify|verify} messages.
             * @param message DisableFootMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDisableFootMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DisableFootMotion message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DisableFootMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DisableFootMotion;

            /**
             * Decodes a DisableFootMotion message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DisableFootMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DisableFootMotion;

            /**
             * Verifies a DisableFootMotion message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DisableFootMotion message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DisableFootMotion
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DisableFootMotion;

            /**
             * Creates a plain object from a DisableFootMotion message. Also converts values to other types if specified.
             * @param message DisableFootMotion
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DisableFootMotion, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DisableFootMotion to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FootPlacementStopped. */
        interface IFootPlacementStopped {
        }

        /** Represents a FootPlacementStopped. */
        class FootPlacementStopped implements IFootPlacementStopped {

            /**
             * Constructs a new FootPlacementStopped.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IFootPlacementStopped);

            /**
             * Creates a new FootPlacementStopped instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FootPlacementStopped instance
             */
            public static create(properties?: message.motion.IFootPlacementStopped): message.motion.FootPlacementStopped;

            /**
             * Encodes the specified FootPlacementStopped message. Does not implicitly {@link message.motion.FootPlacementStopped.verify|verify} messages.
             * @param message FootPlacementStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IFootPlacementStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FootPlacementStopped message, length delimited. Does not implicitly {@link message.motion.FootPlacementStopped.verify|verify} messages.
             * @param message FootPlacementStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IFootPlacementStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FootPlacementStopped message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FootPlacementStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.FootPlacementStopped;

            /**
             * Decodes a FootPlacementStopped message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FootPlacementStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.FootPlacementStopped;

            /**
             * Verifies a FootPlacementStopped message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FootPlacementStopped message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FootPlacementStopped
             */
            public static fromObject(object: { [k: string]: any }): message.motion.FootPlacementStopped;

            /**
             * Creates a plain object from a FootPlacementStopped message. Also converts values to other types if specified.
             * @param message FootPlacementStopped
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.FootPlacementStopped, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FootPlacementStopped to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NewStepTargetInfo. */
        interface INewStepTargetInfo {

            /** NewStepTargetInfo targetTime */
            targetTime?: (number|null);

            /** NewStepTargetInfo velocityCurrent */
            velocityCurrent?: (Ivec3|null);

            /** NewStepTargetInfo activeForwardLimb */
            activeForwardLimb?: (number|null);
        }

        /** Represents a NewStepTargetInfo. */
        class NewStepTargetInfo implements INewStepTargetInfo {

            /**
             * Constructs a new NewStepTargetInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.INewStepTargetInfo);

            /** NewStepTargetInfo targetTime. */
            public targetTime: number;

            /** NewStepTargetInfo velocityCurrent. */
            public velocityCurrent?: (Ivec3|null);

            /** NewStepTargetInfo activeForwardLimb. */
            public activeForwardLimb: number;

            /**
             * Creates a new NewStepTargetInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NewStepTargetInfo instance
             */
            public static create(properties?: message.motion.INewStepTargetInfo): message.motion.NewStepTargetInfo;

            /**
             * Encodes the specified NewStepTargetInfo message. Does not implicitly {@link message.motion.NewStepTargetInfo.verify|verify} messages.
             * @param message NewStepTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.INewStepTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NewStepTargetInfo message, length delimited. Does not implicitly {@link message.motion.NewStepTargetInfo.verify|verify} messages.
             * @param message NewStepTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.INewStepTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NewStepTargetInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NewStepTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.NewStepTargetInfo;

            /**
             * Decodes a NewStepTargetInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NewStepTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.NewStepTargetInfo;

            /**
             * Verifies a NewStepTargetInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NewStepTargetInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NewStepTargetInfo
             */
            public static fromObject(object: { [k: string]: any }): message.motion.NewStepTargetInfo;

            /**
             * Creates a plain object from a NewStepTargetInfo message. Also converts values to other types if specified.
             * @param message NewStepTargetInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.NewStepTargetInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NewStepTargetInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NewFootTargetInfo. */
        interface INewFootTargetInfo {

            /** NewFootTargetInfo leftFootSource */
            leftFootSource?: (Ivec3|null);

            /** NewFootTargetInfo rightFootSource */
            rightFootSource?: (Ivec3|null);

            /** NewFootTargetInfo supportMass */
            supportMass?: (Ivec3|null);

            /** NewFootTargetInfo leftFootDestination */
            leftFootDestination?: (Ivec3|null);

            /** NewFootTargetInfo rightFootDestination */
            rightFootDestination?: (Ivec3|null);
        }

        /** Represents a NewFootTargetInfo. */
        class NewFootTargetInfo implements INewFootTargetInfo {

            /**
             * Constructs a new NewFootTargetInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.INewFootTargetInfo);

            /** NewFootTargetInfo leftFootSource. */
            public leftFootSource?: (Ivec3|null);

            /** NewFootTargetInfo rightFootSource. */
            public rightFootSource?: (Ivec3|null);

            /** NewFootTargetInfo supportMass. */
            public supportMass?: (Ivec3|null);

            /** NewFootTargetInfo leftFootDestination. */
            public leftFootDestination?: (Ivec3|null);

            /** NewFootTargetInfo rightFootDestination. */
            public rightFootDestination?: (Ivec3|null);

            /**
             * Creates a new NewFootTargetInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NewFootTargetInfo instance
             */
            public static create(properties?: message.motion.INewFootTargetInfo): message.motion.NewFootTargetInfo;

            /**
             * Encodes the specified NewFootTargetInfo message. Does not implicitly {@link message.motion.NewFootTargetInfo.verify|verify} messages.
             * @param message NewFootTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.INewFootTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NewFootTargetInfo message, length delimited. Does not implicitly {@link message.motion.NewFootTargetInfo.verify|verify} messages.
             * @param message NewFootTargetInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.INewFootTargetInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NewFootTargetInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NewFootTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.NewFootTargetInfo;

            /**
             * Decodes a NewFootTargetInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NewFootTargetInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.NewFootTargetInfo;

            /**
             * Verifies a NewFootTargetInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NewFootTargetInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NewFootTargetInfo
             */
            public static fromObject(object: { [k: string]: any }): message.motion.NewFootTargetInfo;

            /**
             * Creates a plain object from a NewFootTargetInfo message. Also converts values to other types if specified.
             * @param message NewFootTargetInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.NewFootTargetInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NewFootTargetInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnableFootPlacement. */
        interface IEnableFootPlacement {
        }

        /** Represents an EnableFootPlacement. */
        class EnableFootPlacement implements IEnableFootPlacement {

            /**
             * Constructs a new EnableFootPlacement.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IEnableFootPlacement);

            /**
             * Creates a new EnableFootPlacement instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnableFootPlacement instance
             */
            public static create(properties?: message.motion.IEnableFootPlacement): message.motion.EnableFootPlacement;

            /**
             * Encodes the specified EnableFootPlacement message. Does not implicitly {@link message.motion.EnableFootPlacement.verify|verify} messages.
             * @param message EnableFootPlacement message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IEnableFootPlacement, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnableFootPlacement message, length delimited. Does not implicitly {@link message.motion.EnableFootPlacement.verify|verify} messages.
             * @param message EnableFootPlacement message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IEnableFootPlacement, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnableFootPlacement message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnableFootPlacement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.EnableFootPlacement;

            /**
             * Decodes an EnableFootPlacement message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnableFootPlacement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.EnableFootPlacement;

            /**
             * Verifies an EnableFootPlacement message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnableFootPlacement message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnableFootPlacement
             */
            public static fromObject(object: { [k: string]: any }): message.motion.EnableFootPlacement;

            /**
             * Creates a plain object from an EnableFootPlacement message. Also converts values to other types if specified.
             * @param message EnableFootPlacement
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.EnableFootPlacement, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnableFootPlacement to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DisableFootPlacement. */
        interface IDisableFootPlacement {
        }

        /** Represents a DisableFootPlacement. */
        class DisableFootPlacement implements IDisableFootPlacement {

            /**
             * Constructs a new DisableFootPlacement.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDisableFootPlacement);

            /**
             * Creates a new DisableFootPlacement instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DisableFootPlacement instance
             */
            public static create(properties?: message.motion.IDisableFootPlacement): message.motion.DisableFootPlacement;

            /**
             * Encodes the specified DisableFootPlacement message. Does not implicitly {@link message.motion.DisableFootPlacement.verify|verify} messages.
             * @param message DisableFootPlacement message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDisableFootPlacement, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DisableFootPlacement message, length delimited. Does not implicitly {@link message.motion.DisableFootPlacement.verify|verify} messages.
             * @param message DisableFootPlacement message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDisableFootPlacement, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DisableFootPlacement message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DisableFootPlacement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DisableFootPlacement;

            /**
             * Decodes a DisableFootPlacement message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DisableFootPlacement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DisableFootPlacement;

            /**
             * Verifies a DisableFootPlacement message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DisableFootPlacement message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DisableFootPlacement
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DisableFootPlacement;

            /**
             * Creates a plain object from a DisableFootPlacement message. Also converts values to other types if specified.
             * @param message DisableFootPlacement
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DisableFootPlacement, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DisableFootPlacement to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an ExecuteGetup. */
        interface IExecuteGetup {
        }

        /** Represents an ExecuteGetup. */
        class ExecuteGetup implements IExecuteGetup {

            /**
             * Constructs a new ExecuteGetup.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IExecuteGetup);

            /**
             * Creates a new ExecuteGetup instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ExecuteGetup instance
             */
            public static create(properties?: message.motion.IExecuteGetup): message.motion.ExecuteGetup;

            /**
             * Encodes the specified ExecuteGetup message. Does not implicitly {@link message.motion.ExecuteGetup.verify|verify} messages.
             * @param message ExecuteGetup message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IExecuteGetup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ExecuteGetup message, length delimited. Does not implicitly {@link message.motion.ExecuteGetup.verify|verify} messages.
             * @param message ExecuteGetup message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IExecuteGetup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ExecuteGetup message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ExecuteGetup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.ExecuteGetup;

            /**
             * Decodes an ExecuteGetup message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ExecuteGetup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.ExecuteGetup;

            /**
             * Verifies an ExecuteGetup message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ExecuteGetup message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ExecuteGetup
             */
            public static fromObject(object: { [k: string]: any }): message.motion.ExecuteGetup;

            /**
             * Creates a plain object from an ExecuteGetup message. Also converts values to other types if specified.
             * @param message ExecuteGetup
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.ExecuteGetup, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ExecuteGetup to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KillGetup. */
        interface IKillGetup {
        }

        /** Represents a KillGetup. */
        class KillGetup implements IKillGetup {

            /**
             * Constructs a new KillGetup.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKillGetup);

            /**
             * Creates a new KillGetup instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KillGetup instance
             */
            public static create(properties?: message.motion.IKillGetup): message.motion.KillGetup;

            /**
             * Encodes the specified KillGetup message. Does not implicitly {@link message.motion.KillGetup.verify|verify} messages.
             * @param message KillGetup message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKillGetup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KillGetup message, length delimited. Does not implicitly {@link message.motion.KillGetup.verify|verify} messages.
             * @param message KillGetup message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKillGetup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KillGetup message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KillGetup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KillGetup;

            /**
             * Decodes a KillGetup message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KillGetup
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KillGetup;

            /**
             * Verifies a KillGetup message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KillGetup message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KillGetup
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KillGetup;

            /**
             * Creates a plain object from a KillGetup message. Also converts values to other types if specified.
             * @param message KillGetup
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KillGetup, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KillGetup to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a HeadCommand. */
        interface IHeadCommand {

            /** HeadCommand yaw */
            yaw?: (number|null);

            /** HeadCommand pitch */
            pitch?: (number|null);

            /** HeadCommand robotSpace */
            robotSpace?: (boolean|null);
        }

        /**
         * Tell the head where to look in world space.
         * This command is interpreted such that the robot will use IMU data to fixate at these angles in the world even when
         * rotating.
         *
         */
        class HeadCommand implements IHeadCommand {

            /**
             * Constructs a new HeadCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IHeadCommand);

            /** HeadCommand yaw. */
            public yaw: number;

            /** HeadCommand pitch. */
            public pitch: number;

            /** HeadCommand robotSpace. */
            public robotSpace: boolean;

            /**
             * Creates a new HeadCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns HeadCommand instance
             */
            public static create(properties?: message.motion.IHeadCommand): message.motion.HeadCommand;

            /**
             * Encodes the specified HeadCommand message. Does not implicitly {@link message.motion.HeadCommand.verify|verify} messages.
             * @param message HeadCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IHeadCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified HeadCommand message, length delimited. Does not implicitly {@link message.motion.HeadCommand.verify|verify} messages.
             * @param message HeadCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IHeadCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a HeadCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns HeadCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.HeadCommand;

            /**
             * Decodes a HeadCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns HeadCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.HeadCommand;

            /**
             * Verifies a HeadCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a HeadCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns HeadCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.HeadCommand;

            /**
             * Creates a plain object from a HeadCommand message. Also converts values to other types if specified.
             * @param message HeadCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.HeadCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this HeadCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a HeadMotionUpdate. */
        interface IHeadMotionUpdate {
        }

        /** Represents a HeadMotionUpdate. */
        class HeadMotionUpdate implements IHeadMotionUpdate {

            /**
             * Constructs a new HeadMotionUpdate.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IHeadMotionUpdate);

            /**
             * Creates a new HeadMotionUpdate instance using the specified properties.
             * @param [properties] Properties to set
             * @returns HeadMotionUpdate instance
             */
            public static create(properties?: message.motion.IHeadMotionUpdate): message.motion.HeadMotionUpdate;

            /**
             * Encodes the specified HeadMotionUpdate message. Does not implicitly {@link message.motion.HeadMotionUpdate.verify|verify} messages.
             * @param message HeadMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IHeadMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified HeadMotionUpdate message, length delimited. Does not implicitly {@link message.motion.HeadMotionUpdate.verify|verify} messages.
             * @param message HeadMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IHeadMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a HeadMotionUpdate message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns HeadMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.HeadMotionUpdate;

            /**
             * Decodes a HeadMotionUpdate message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns HeadMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.HeadMotionUpdate;

            /**
             * Verifies a HeadMotionUpdate message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a HeadMotionUpdate message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns HeadMotionUpdate
             */
            public static fromObject(object: { [k: string]: any }): message.motion.HeadMotionUpdate;

            /**
             * Creates a plain object from a HeadMotionUpdate message. Also converts values to other types if specified.
             * @param message HeadMotionUpdate
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.HeadMotionUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this HeadMotionUpdate to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * TODO document
         *
         */
        enum KickCommandType {
            NORMAL = 0,
            POWER = 1
        }

        /** Properties of a KickCommand. */
        interface IKickCommand {

            /** KickCommand target */
            target?: (Ivec3|null);

            /** KickCommand direction */
            direction?: (Ivec3|null);

            /** KickCommand kickCommandType */
            kickCommandType?: (message.motion.KickCommandType|null);
        }

        /** Represents a KickCommand. */
        class KickCommand implements IKickCommand {

            /**
             * Constructs a new KickCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKickCommand);

            /** KickCommand target. */
            public target?: (Ivec3|null);

            /** KickCommand direction. */
            public direction?: (Ivec3|null);

            /** KickCommand kickCommandType. */
            public kickCommandType: message.motion.KickCommandType;

            /**
             * Creates a new KickCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickCommand instance
             */
            public static create(properties?: message.motion.IKickCommand): message.motion.KickCommand;

            /**
             * Encodes the specified KickCommand message. Does not implicitly {@link message.motion.KickCommand.verify|verify} messages.
             * @param message KickCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKickCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickCommand message, length delimited. Does not implicitly {@link message.motion.KickCommand.verify|verify} messages.
             * @param message KickCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKickCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KickCommand;

            /**
             * Decodes a KickCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KickCommand;

            /**
             * Verifies a KickCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KickCommand;

            /**
             * Creates a plain object from a KickCommand message. Also converts values to other types if specified.
             * @param message KickCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KickCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KickScriptCommand. */
        interface IKickScriptCommand {

            /** KickScriptCommand direction */
            direction?: (Ivec3|null);

            /** KickScriptCommand leg */
            leg?: (number|null);
        }

        /**
         * TODO document
         *
         */
        class KickScriptCommand implements IKickScriptCommand {

            /**
             * Constructs a new KickScriptCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKickScriptCommand);

            /** KickScriptCommand direction. */
            public direction?: (Ivec3|null);

            /** KickScriptCommand leg. */
            public leg: number;

            /**
             * Creates a new KickScriptCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickScriptCommand instance
             */
            public static create(properties?: message.motion.IKickScriptCommand): message.motion.KickScriptCommand;

            /**
             * Encodes the specified KickScriptCommand message. Does not implicitly {@link message.motion.KickScriptCommand.verify|verify} messages.
             * @param message KickScriptCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKickScriptCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickScriptCommand message, length delimited. Does not implicitly {@link message.motion.KickScriptCommand.verify|verify} messages.
             * @param message KickScriptCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKickScriptCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickScriptCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickScriptCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KickScriptCommand;

            /**
             * Decodes a KickScriptCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickScriptCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KickScriptCommand;

            /**
             * Verifies a KickScriptCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickScriptCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickScriptCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KickScriptCommand;

            /**
             * Creates a plain object from a KickScriptCommand message. Also converts values to other types if specified.
             * @param message KickScriptCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KickScriptCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickScriptCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KickPlannerConfig. */
        interface IKickPlannerConfig {

            /** KickPlannerConfig maxBallDistance */
            maxBallDistance?: (number|null);

            /** KickPlannerConfig kickCorridorWidth */
            kickCorridorWidth?: (number|null);

            /** KickPlannerConfig secondsNotSeenLimit */
            secondsNotSeenLimit?: (number|null);

            /** KickPlannerConfig kickForwardAngleLimit */
            kickForwardAngleLimit?: (number|null);
        }

        /** Represents a KickPlannerConfig. */
        class KickPlannerConfig implements IKickPlannerConfig {

            /**
             * Constructs a new KickPlannerConfig.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKickPlannerConfig);

            /** KickPlannerConfig maxBallDistance. */
            public maxBallDistance: number;

            /** KickPlannerConfig kickCorridorWidth. */
            public kickCorridorWidth: number;

            /** KickPlannerConfig secondsNotSeenLimit. */
            public secondsNotSeenLimit: number;

            /** KickPlannerConfig kickForwardAngleLimit. */
            public kickForwardAngleLimit: number;

            /**
             * Creates a new KickPlannerConfig instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickPlannerConfig instance
             */
            public static create(properties?: message.motion.IKickPlannerConfig): message.motion.KickPlannerConfig;

            /**
             * Encodes the specified KickPlannerConfig message. Does not implicitly {@link message.motion.KickPlannerConfig.verify|verify} messages.
             * @param message KickPlannerConfig message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKickPlannerConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickPlannerConfig message, length delimited. Does not implicitly {@link message.motion.KickPlannerConfig.verify|verify} messages.
             * @param message KickPlannerConfig message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKickPlannerConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickPlannerConfig message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickPlannerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KickPlannerConfig;

            /**
             * Decodes a KickPlannerConfig message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickPlannerConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KickPlannerConfig;

            /**
             * Verifies a KickPlannerConfig message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickPlannerConfig message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickPlannerConfig
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KickPlannerConfig;

            /**
             * Creates a plain object from a KickPlannerConfig message. Also converts values to other types if specified.
             * @param message KickPlannerConfig
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KickPlannerConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickPlannerConfig to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KickFinished. */
        interface IKickFinished {
        }

        /** Represents a KickFinished. */
        class KickFinished implements IKickFinished {

            /**
             * Constructs a new KickFinished.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKickFinished);

            /**
             * Creates a new KickFinished instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KickFinished instance
             */
            public static create(properties?: message.motion.IKickFinished): message.motion.KickFinished;

            /**
             * Encodes the specified KickFinished message. Does not implicitly {@link message.motion.KickFinished.verify|verify} messages.
             * @param message KickFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKickFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KickFinished message, length delimited. Does not implicitly {@link message.motion.KickFinished.verify|verify} messages.
             * @param message KickFinished message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKickFinished, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KickFinished message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KickFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KickFinished;

            /**
             * Decodes a KickFinished message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KickFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KickFinished;

            /**
             * Verifies a KickFinished message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KickFinished message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KickFinished
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KickFinished;

            /**
             * Creates a plain object from a KickFinished message. Also converts values to other types if specified.
             * @param message KickFinished
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KickFinished, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KickFinished to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a IKKickParams. */
        interface IIKKickParams {

            /** IKKickParams standHeight */
            standHeight?: (number|null);
        }

        /** Represents a IKKickParams. */
        class IKKickParams implements IIKKickParams {

            /**
             * Constructs a new IKKickParams.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IIKKickParams);

            /** IKKickParams standHeight. */
            public standHeight: number;

            /**
             * Creates a new IKKickParams instance using the specified properties.
             * @param [properties] Properties to set
             * @returns IKKickParams instance
             */
            public static create(properties?: message.motion.IIKKickParams): message.motion.IKKickParams;

            /**
             * Encodes the specified IKKickParams message. Does not implicitly {@link message.motion.IKKickParams.verify|verify} messages.
             * @param message IKKickParams message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IIKKickParams, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified IKKickParams message, length delimited. Does not implicitly {@link message.motion.IKKickParams.verify|verify} messages.
             * @param message IKKickParams message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IIKKickParams, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a IKKickParams message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns IKKickParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.IKKickParams;

            /**
             * Decodes a IKKickParams message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns IKKickParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.IKKickParams;

            /**
             * Verifies a IKKickParams message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a IKKickParams message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns IKKickParams
             */
            public static fromObject(object: { [k: string]: any }): message.motion.IKKickParams;

            /**
             * Creates a plain object from a IKKickParams message. Also converts values to other types if specified.
             * @param message IKKickParams
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.IKKickParams, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this IKKickParams to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** BodySide enum. */
        enum BodySide {
            LEFT = 0,
            RIGHT = 1
        }

        /** Properties of a KinematicsModel. */
        interface IKinematicsModel {

            /** KinematicsModel leg */
            leg?: (message.motion.KinematicsModel.ILeg|null);

            /** KinematicsModel head */
            head?: (message.motion.KinematicsModel.IHead|null);

            /** KinematicsModel arm */
            arm?: (message.motion.KinematicsModel.IArm|null);

            /** KinematicsModel massModel */
            massModel?: (message.motion.KinematicsModel.IMassModel|null);

            /** KinematicsModel TEAMDARWINCHEST_TO_ORIGIN */
            TEAMDARWINCHEST_TO_ORIGIN?: (number|null);
        }

        /** Represents a KinematicsModel. */
        class KinematicsModel implements IKinematicsModel {

            /**
             * Constructs a new KinematicsModel.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IKinematicsModel);

            /** KinematicsModel leg. */
            public leg?: (message.motion.KinematicsModel.ILeg|null);

            /** KinematicsModel head. */
            public head?: (message.motion.KinematicsModel.IHead|null);

            /** KinematicsModel arm. */
            public arm?: (message.motion.KinematicsModel.IArm|null);

            /** KinematicsModel massModel. */
            public massModel?: (message.motion.KinematicsModel.IMassModel|null);

            /** KinematicsModel TEAMDARWINCHEST_TO_ORIGIN. */
            public TEAMDARWINCHEST_TO_ORIGIN: number;

            /**
             * Creates a new KinematicsModel instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KinematicsModel instance
             */
            public static create(properties?: message.motion.IKinematicsModel): message.motion.KinematicsModel;

            /**
             * Encodes the specified KinematicsModel message. Does not implicitly {@link message.motion.KinematicsModel.verify|verify} messages.
             * @param message KinematicsModel message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IKinematicsModel, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KinematicsModel message, length delimited. Does not implicitly {@link message.motion.KinematicsModel.verify|verify} messages.
             * @param message KinematicsModel message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IKinematicsModel, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KinematicsModel message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KinematicsModel
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KinematicsModel;

            /**
             * Decodes a KinematicsModel message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KinematicsModel
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KinematicsModel;

            /**
             * Verifies a KinematicsModel message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KinematicsModel message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KinematicsModel
             */
            public static fromObject(object: { [k: string]: any }): message.motion.KinematicsModel;

            /**
             * Creates a plain object from a KinematicsModel message. Also converts values to other types if specified.
             * @param message KinematicsModel
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.KinematicsModel, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KinematicsModel to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace KinematicsModel {

            /** Properties of a Leg. */
            interface ILeg {

                /** Leg HIP_OFFSET_X */
                HIP_OFFSET_X?: (number|null);

                /** Leg HIP_OFFSET_Y */
                HIP_OFFSET_Y?: (number|null);

                /** Leg HIP_OFFSET_Z */
                HIP_OFFSET_Z?: (number|null);

                /** Leg UPPER_LEG_LENGTH */
                UPPER_LEG_LENGTH?: (number|null);

                /** Leg LOWER_LEG_LENGTH */
                LOWER_LEG_LENGTH?: (number|null);

                /** Leg FOOT_HEIGHT */
                FOOT_HEIGHT?: (number|null);

                /** Leg FOOT_LENGTH */
                FOOT_LENGTH?: (number|null);

                /** Leg TOE_LENGTH */
                TOE_LENGTH?: (number|null);

                /** Leg HEEL_LENGTH */
                HEEL_LENGTH?: (number|null);

                /** Leg FOOT_WIDTH */
                FOOT_WIDTH?: (number|null);

                /** Leg FOOT_CENTRE_TO_ANKLE_CENTRE */
                FOOT_CENTRE_TO_ANKLE_CENTRE?: (number|null);

                /** Leg LENGTH_BETWEEN_LEGS */
                LENGTH_BETWEEN_LEGS?: (number|null);

                /** Leg LEFT_TO_RIGHT_HIP_YAW */
                LEFT_TO_RIGHT_HIP_YAW?: (number|null);

                /** Leg LEFT_TO_RIGHT_HIP_ROLL */
                LEFT_TO_RIGHT_HIP_ROLL?: (number|null);

                /** Leg LEFT_TO_RIGHT_HIP_PITCH */
                LEFT_TO_RIGHT_HIP_PITCH?: (number|null);

                /** Leg LEFT_TO_RIGHT_KNEE */
                LEFT_TO_RIGHT_KNEE?: (number|null);

                /** Leg LEFT_TO_RIGHT_ANKLE_PITCH */
                LEFT_TO_RIGHT_ANKLE_PITCH?: (number|null);

                /** Leg LEFT_TO_RIGHT_ANKLE_ROLL */
                LEFT_TO_RIGHT_ANKLE_ROLL?: (number|null);
            }

            /** Represents a Leg. */
            class Leg implements ILeg {

                /**
                 * Constructs a new Leg.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.motion.KinematicsModel.ILeg);

                /** Leg HIP_OFFSET_X. */
                public HIP_OFFSET_X: number;

                /** Leg HIP_OFFSET_Y. */
                public HIP_OFFSET_Y: number;

                /** Leg HIP_OFFSET_Z. */
                public HIP_OFFSET_Z: number;

                /** Leg UPPER_LEG_LENGTH. */
                public UPPER_LEG_LENGTH: number;

                /** Leg LOWER_LEG_LENGTH. */
                public LOWER_LEG_LENGTH: number;

                /** Leg FOOT_HEIGHT. */
                public FOOT_HEIGHT: number;

                /** Leg FOOT_LENGTH. */
                public FOOT_LENGTH: number;

                /** Leg TOE_LENGTH. */
                public TOE_LENGTH: number;

                /** Leg HEEL_LENGTH. */
                public HEEL_LENGTH: number;

                /** Leg FOOT_WIDTH. */
                public FOOT_WIDTH: number;

                /** Leg FOOT_CENTRE_TO_ANKLE_CENTRE. */
                public FOOT_CENTRE_TO_ANKLE_CENTRE: number;

                /** Leg LENGTH_BETWEEN_LEGS. */
                public LENGTH_BETWEEN_LEGS: number;

                /** Leg LEFT_TO_RIGHT_HIP_YAW. */
                public LEFT_TO_RIGHT_HIP_YAW: number;

                /** Leg LEFT_TO_RIGHT_HIP_ROLL. */
                public LEFT_TO_RIGHT_HIP_ROLL: number;

                /** Leg LEFT_TO_RIGHT_HIP_PITCH. */
                public LEFT_TO_RIGHT_HIP_PITCH: number;

                /** Leg LEFT_TO_RIGHT_KNEE. */
                public LEFT_TO_RIGHT_KNEE: number;

                /** Leg LEFT_TO_RIGHT_ANKLE_PITCH. */
                public LEFT_TO_RIGHT_ANKLE_PITCH: number;

                /** Leg LEFT_TO_RIGHT_ANKLE_ROLL. */
                public LEFT_TO_RIGHT_ANKLE_ROLL: number;

                /**
                 * Creates a new Leg instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Leg instance
                 */
                public static create(properties?: message.motion.KinematicsModel.ILeg): message.motion.KinematicsModel.Leg;

                /**
                 * Encodes the specified Leg message. Does not implicitly {@link message.motion.KinematicsModel.Leg.verify|verify} messages.
                 * @param message Leg message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.motion.KinematicsModel.ILeg, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Leg message, length delimited. Does not implicitly {@link message.motion.KinematicsModel.Leg.verify|verify} messages.
                 * @param message Leg message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.motion.KinematicsModel.ILeg, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Leg message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Leg
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KinematicsModel.Leg;

                /**
                 * Decodes a Leg message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Leg
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KinematicsModel.Leg;

                /**
                 * Verifies a Leg message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Leg message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Leg
                 */
                public static fromObject(object: { [k: string]: any }): message.motion.KinematicsModel.Leg;

                /**
                 * Creates a plain object from a Leg message. Also converts values to other types if specified.
                 * @param message Leg
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.motion.KinematicsModel.Leg, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Leg to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Head. */
            interface IHead {

                /** Head NECK_BASE_POS_FROM_ORIGIN_X */
                NECK_BASE_POS_FROM_ORIGIN_X?: (number|null);

                /** Head NECK_BASE_POS_FROM_ORIGIN_Y */
                NECK_BASE_POS_FROM_ORIGIN_Y?: (number|null);

                /** Head NECK_BASE_POS_FROM_ORIGIN_Z */
                NECK_BASE_POS_FROM_ORIGIN_Z?: (number|null);

                /** Head NECK_LENGTH */
                NECK_LENGTH?: (number|null);

                /** Head NECK_TO_CAMERA_X */
                NECK_TO_CAMERA_X?: (number|null);

                /** Head NECK_TO_CAMERA_Y */
                NECK_TO_CAMERA_Y?: (number|null);

                /** Head NECK_TO_CAMERA_Z */
                NECK_TO_CAMERA_Z?: (number|null);

                /** Head CAMERA_DECLINATION_ANGLE_OFFSET */
                CAMERA_DECLINATION_ANGLE_OFFSET?: (number|null);

                /** Head INTERPUPILLARY_DISTANCE */
                INTERPUPILLARY_DISTANCE?: (number|null);

                /** Head MAX_YAW */
                MAX_YAW?: (number|null);

                /** Head MIN_YAW */
                MIN_YAW?: (number|null);

                /** Head MAX_PITCH */
                MAX_PITCH?: (number|null);

                /** Head MIN_PITCH */
                MIN_PITCH?: (number|null);
            }

            /** Represents a Head. */
            class Head implements IHead {

                /**
                 * Constructs a new Head.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.motion.KinematicsModel.IHead);

                /** Head NECK_BASE_POS_FROM_ORIGIN_X. */
                public NECK_BASE_POS_FROM_ORIGIN_X: number;

                /** Head NECK_BASE_POS_FROM_ORIGIN_Y. */
                public NECK_BASE_POS_FROM_ORIGIN_Y: number;

                /** Head NECK_BASE_POS_FROM_ORIGIN_Z. */
                public NECK_BASE_POS_FROM_ORIGIN_Z: number;

                /** Head NECK_LENGTH. */
                public NECK_LENGTH: number;

                /** Head NECK_TO_CAMERA_X. */
                public NECK_TO_CAMERA_X: number;

                /** Head NECK_TO_CAMERA_Y. */
                public NECK_TO_CAMERA_Y: number;

                /** Head NECK_TO_CAMERA_Z. */
                public NECK_TO_CAMERA_Z: number;

                /** Head CAMERA_DECLINATION_ANGLE_OFFSET. */
                public CAMERA_DECLINATION_ANGLE_OFFSET: number;

                /** Head INTERPUPILLARY_DISTANCE. */
                public INTERPUPILLARY_DISTANCE: number;

                /** Head MAX_YAW. */
                public MAX_YAW: number;

                /** Head MIN_YAW. */
                public MIN_YAW: number;

                /** Head MAX_PITCH. */
                public MAX_PITCH: number;

                /** Head MIN_PITCH. */
                public MIN_PITCH: number;

                /**
                 * Creates a new Head instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Head instance
                 */
                public static create(properties?: message.motion.KinematicsModel.IHead): message.motion.KinematicsModel.Head;

                /**
                 * Encodes the specified Head message. Does not implicitly {@link message.motion.KinematicsModel.Head.verify|verify} messages.
                 * @param message Head message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.motion.KinematicsModel.IHead, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Head message, length delimited. Does not implicitly {@link message.motion.KinematicsModel.Head.verify|verify} messages.
                 * @param message Head message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.motion.KinematicsModel.IHead, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Head message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Head
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KinematicsModel.Head;

                /**
                 * Decodes a Head message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Head
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KinematicsModel.Head;

                /**
                 * Verifies a Head message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Head message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Head
                 */
                public static fromObject(object: { [k: string]: any }): message.motion.KinematicsModel.Head;

                /**
                 * Creates a plain object from a Head message. Also converts values to other types if specified.
                 * @param message Head
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.motion.KinematicsModel.Head, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Head to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Arm. */
            interface IArm {

                /** Arm DISTANCE_BETWEEN_SHOULDERS */
                DISTANCE_BETWEEN_SHOULDERS?: (number|null);

                /** Arm SHOULDER_Z_OFFSET */
                SHOULDER_Z_OFFSET?: (number|null);

                /** Arm SHOULDER_X_OFFSET */
                SHOULDER_X_OFFSET?: (number|null);

                /** Arm SHOULDER_LENGTH */
                SHOULDER_LENGTH?: (number|null);

                /** Arm SHOULDER_WIDTH */
                SHOULDER_WIDTH?: (number|null);

                /** Arm SHOULDER_HEIGHT */
                SHOULDER_HEIGHT?: (number|null);

                /** Arm UPPER_ARM_LENGTH */
                UPPER_ARM_LENGTH?: (number|null);

                /** Arm UPPER_ARM_Y_OFFSET */
                UPPER_ARM_Y_OFFSET?: (number|null);

                /** Arm UPPER_ARM_X_OFFSET */
                UPPER_ARM_X_OFFSET?: (number|null);

                /** Arm LOWER_ARM_LENGTH */
                LOWER_ARM_LENGTH?: (number|null);

                /** Arm LOWER_ARM_Y_OFFSET */
                LOWER_ARM_Y_OFFSET?: (number|null);

                /** Arm LOWER_ARM_Z_OFFSET */
                LOWER_ARM_Z_OFFSET?: (number|null);
            }

            /** Represents an Arm. */
            class Arm implements IArm {

                /**
                 * Constructs a new Arm.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.motion.KinematicsModel.IArm);

                /** Arm DISTANCE_BETWEEN_SHOULDERS. */
                public DISTANCE_BETWEEN_SHOULDERS: number;

                /** Arm SHOULDER_Z_OFFSET. */
                public SHOULDER_Z_OFFSET: number;

                /** Arm SHOULDER_X_OFFSET. */
                public SHOULDER_X_OFFSET: number;

                /** Arm SHOULDER_LENGTH. */
                public SHOULDER_LENGTH: number;

                /** Arm SHOULDER_WIDTH. */
                public SHOULDER_WIDTH: number;

                /** Arm SHOULDER_HEIGHT. */
                public SHOULDER_HEIGHT: number;

                /** Arm UPPER_ARM_LENGTH. */
                public UPPER_ARM_LENGTH: number;

                /** Arm UPPER_ARM_Y_OFFSET. */
                public UPPER_ARM_Y_OFFSET: number;

                /** Arm UPPER_ARM_X_OFFSET. */
                public UPPER_ARM_X_OFFSET: number;

                /** Arm LOWER_ARM_LENGTH. */
                public LOWER_ARM_LENGTH: number;

                /** Arm LOWER_ARM_Y_OFFSET. */
                public LOWER_ARM_Y_OFFSET: number;

                /** Arm LOWER_ARM_Z_OFFSET. */
                public LOWER_ARM_Z_OFFSET: number;

                /**
                 * Creates a new Arm instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Arm instance
                 */
                public static create(properties?: message.motion.KinematicsModel.IArm): message.motion.KinematicsModel.Arm;

                /**
                 * Encodes the specified Arm message. Does not implicitly {@link message.motion.KinematicsModel.Arm.verify|verify} messages.
                 * @param message Arm message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.motion.KinematicsModel.IArm, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Arm message, length delimited. Does not implicitly {@link message.motion.KinematicsModel.Arm.verify|verify} messages.
                 * @param message Arm message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.motion.KinematicsModel.IArm, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Arm message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Arm
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KinematicsModel.Arm;

                /**
                 * Decodes an Arm message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Arm
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KinematicsModel.Arm;

                /**
                 * Verifies an Arm message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Arm message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Arm
                 */
                public static fromObject(object: { [k: string]: any }): message.motion.KinematicsModel.Arm;

                /**
                 * Creates a plain object from an Arm message. Also converts values to other types if specified.
                 * @param message Arm
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.motion.KinematicsModel.Arm, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Arm to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MassModel. */
            interface IMassModel {

                /** MassModel masses */
                masses?: (Ivec4[]|null);
            }

            /** Represents a MassModel. */
            class MassModel implements IMassModel {

                /**
                 * Constructs a new MassModel.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.motion.KinematicsModel.IMassModel);

                /** MassModel masses. */
                public masses: Ivec4[];

                /**
                 * Creates a new MassModel instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MassModel instance
                 */
                public static create(properties?: message.motion.KinematicsModel.IMassModel): message.motion.KinematicsModel.MassModel;

                /**
                 * Encodes the specified MassModel message. Does not implicitly {@link message.motion.KinematicsModel.MassModel.verify|verify} messages.
                 * @param message MassModel message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.motion.KinematicsModel.IMassModel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MassModel message, length delimited. Does not implicitly {@link message.motion.KinematicsModel.MassModel.verify|verify} messages.
                 * @param message MassModel message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.motion.KinematicsModel.IMassModel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MassModel message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MassModel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.KinematicsModel.MassModel;

                /**
                 * Decodes a MassModel message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MassModel
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.KinematicsModel.MassModel;

                /**
                 * Verifies a MassModel message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MassModel message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MassModel
                 */
                public static fromObject(object: { [k: string]: any }): message.motion.KinematicsModel.MassModel;

                /**
                 * Creates a plain object from a MassModel message. Also converts values to other types if specified.
                 * @param message MassModel
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.motion.KinematicsModel.MassModel, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MassModel to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a ServoTarget. */
        interface IServoTarget {

            /** ServoTarget time */
            time?: (google.protobuf.ITimestamp|null);

            /** ServoTarget id */
            id?: (number|null);

            /** ServoTarget position */
            position?: (number|null);

            /** ServoTarget gain */
            gain?: (number|null);

            /** ServoTarget torque */
            torque?: (number|null);
        }

        /**
         * TODO document
         *
         */
        class ServoTarget implements IServoTarget {

            /**
             * Constructs a new ServoTarget.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IServoTarget);

            /** ServoTarget time. */
            public time?: (google.protobuf.ITimestamp|null);

            /** ServoTarget id. */
            public id: number;

            /** ServoTarget position. */
            public position: number;

            /** ServoTarget gain. */
            public gain: number;

            /** ServoTarget torque. */
            public torque: number;

            /**
             * Creates a new ServoTarget instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServoTarget instance
             */
            public static create(properties?: message.motion.IServoTarget): message.motion.ServoTarget;

            /**
             * Encodes the specified ServoTarget message. Does not implicitly {@link message.motion.ServoTarget.verify|verify} messages.
             * @param message ServoTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IServoTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServoTarget message, length delimited. Does not implicitly {@link message.motion.ServoTarget.verify|verify} messages.
             * @param message ServoTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IServoTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServoTarget message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServoTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.ServoTarget;

            /**
             * Decodes a ServoTarget message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServoTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.ServoTarget;

            /**
             * Verifies a ServoTarget message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServoTarget message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServoTarget
             */
            public static fromObject(object: { [k: string]: any }): message.motion.ServoTarget;

            /**
             * Creates a plain object from a ServoTarget message. Also converts values to other types if specified.
             * @param message ServoTarget
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.ServoTarget, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServoTarget to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a TorsoMotionUpdate. */
        interface ITorsoMotionUpdate {

            /** TorsoMotionUpdate frameArms */
            frameArms?: (Ivec3|null);

            /** TorsoMotionUpdate frameLegs */
            frameLegs?: (Ivec3|null);

            /** TorsoMotionUpdate frame3D */
            frame3D?: (Imat4|null);
        }

        /** Represents a TorsoMotionUpdate. */
        class TorsoMotionUpdate implements ITorsoMotionUpdate {

            /**
             * Constructs a new TorsoMotionUpdate.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.ITorsoMotionUpdate);

            /** TorsoMotionUpdate frameArms. */
            public frameArms?: (Ivec3|null);

            /** TorsoMotionUpdate frameLegs. */
            public frameLegs?: (Ivec3|null);

            /** TorsoMotionUpdate frame3D. */
            public frame3D?: (Imat4|null);

            /**
             * Creates a new TorsoMotionUpdate instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TorsoMotionUpdate instance
             */
            public static create(properties?: message.motion.ITorsoMotionUpdate): message.motion.TorsoMotionUpdate;

            /**
             * Encodes the specified TorsoMotionUpdate message. Does not implicitly {@link message.motion.TorsoMotionUpdate.verify|verify} messages.
             * @param message TorsoMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.ITorsoMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TorsoMotionUpdate message, length delimited. Does not implicitly {@link message.motion.TorsoMotionUpdate.verify|verify} messages.
             * @param message TorsoMotionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.ITorsoMotionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TorsoMotionUpdate message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TorsoMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.TorsoMotionUpdate;

            /**
             * Decodes a TorsoMotionUpdate message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TorsoMotionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.TorsoMotionUpdate;

            /**
             * Verifies a TorsoMotionUpdate message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TorsoMotionUpdate message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TorsoMotionUpdate
             */
            public static fromObject(object: { [k: string]: any }): message.motion.TorsoMotionUpdate;

            /**
             * Creates a plain object from a TorsoMotionUpdate message. Also converts values to other types if specified.
             * @param message TorsoMotionUpdate
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.TorsoMotionUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TorsoMotionUpdate to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a TorsoPositionUpdate. */
        interface ITorsoPositionUpdate {

            /** TorsoPositionUpdate position */
            position?: (Ivec3|null);

            /** TorsoPositionUpdate destination */
            destination?: (Ivec3|null);
        }

        /** Represents a TorsoPositionUpdate. */
        class TorsoPositionUpdate implements ITorsoPositionUpdate {

            /**
             * Constructs a new TorsoPositionUpdate.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.ITorsoPositionUpdate);

            /** TorsoPositionUpdate position. */
            public position?: (Ivec3|null);

            /** TorsoPositionUpdate destination. */
            public destination?: (Ivec3|null);

            /**
             * Creates a new TorsoPositionUpdate instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TorsoPositionUpdate instance
             */
            public static create(properties?: message.motion.ITorsoPositionUpdate): message.motion.TorsoPositionUpdate;

            /**
             * Encodes the specified TorsoPositionUpdate message. Does not implicitly {@link message.motion.TorsoPositionUpdate.verify|verify} messages.
             * @param message TorsoPositionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.ITorsoPositionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TorsoPositionUpdate message, length delimited. Does not implicitly {@link message.motion.TorsoPositionUpdate.verify|verify} messages.
             * @param message TorsoPositionUpdate message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.ITorsoPositionUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TorsoPositionUpdate message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TorsoPositionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.TorsoPositionUpdate;

            /**
             * Decodes a TorsoPositionUpdate message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TorsoPositionUpdate
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.TorsoPositionUpdate;

            /**
             * Verifies a TorsoPositionUpdate message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TorsoPositionUpdate message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TorsoPositionUpdate
             */
            public static fromObject(object: { [k: string]: any }): message.motion.TorsoPositionUpdate;

            /**
             * Creates a plain object from a TorsoPositionUpdate message. Also converts values to other types if specified.
             * @param message TorsoPositionUpdate
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.TorsoPositionUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TorsoPositionUpdate to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnableTorsoMotion. */
        interface IEnableTorsoMotion {
        }

        /** Represents an EnableTorsoMotion. */
        class EnableTorsoMotion implements IEnableTorsoMotion {

            /**
             * Constructs a new EnableTorsoMotion.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IEnableTorsoMotion);

            /**
             * Creates a new EnableTorsoMotion instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnableTorsoMotion instance
             */
            public static create(properties?: message.motion.IEnableTorsoMotion): message.motion.EnableTorsoMotion;

            /**
             * Encodes the specified EnableTorsoMotion message. Does not implicitly {@link message.motion.EnableTorsoMotion.verify|verify} messages.
             * @param message EnableTorsoMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IEnableTorsoMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnableTorsoMotion message, length delimited. Does not implicitly {@link message.motion.EnableTorsoMotion.verify|verify} messages.
             * @param message EnableTorsoMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IEnableTorsoMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnableTorsoMotion message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnableTorsoMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.EnableTorsoMotion;

            /**
             * Decodes an EnableTorsoMotion message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnableTorsoMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.EnableTorsoMotion;

            /**
             * Verifies an EnableTorsoMotion message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnableTorsoMotion message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnableTorsoMotion
             */
            public static fromObject(object: { [k: string]: any }): message.motion.EnableTorsoMotion;

            /**
             * Creates a plain object from an EnableTorsoMotion message. Also converts values to other types if specified.
             * @param message EnableTorsoMotion
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.EnableTorsoMotion, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnableTorsoMotion to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DisableTorsoMotion. */
        interface IDisableTorsoMotion {
        }

        /** Represents a DisableTorsoMotion. */
        class DisableTorsoMotion implements IDisableTorsoMotion {

            /**
             * Constructs a new DisableTorsoMotion.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDisableTorsoMotion);

            /**
             * Creates a new DisableTorsoMotion instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DisableTorsoMotion instance
             */
            public static create(properties?: message.motion.IDisableTorsoMotion): message.motion.DisableTorsoMotion;

            /**
             * Encodes the specified DisableTorsoMotion message. Does not implicitly {@link message.motion.DisableTorsoMotion.verify|verify} messages.
             * @param message DisableTorsoMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDisableTorsoMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DisableTorsoMotion message, length delimited. Does not implicitly {@link message.motion.DisableTorsoMotion.verify|verify} messages.
             * @param message DisableTorsoMotion message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDisableTorsoMotion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DisableTorsoMotion message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DisableTorsoMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DisableTorsoMotion;

            /**
             * Decodes a DisableTorsoMotion message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DisableTorsoMotion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DisableTorsoMotion;

            /**
             * Verifies a DisableTorsoMotion message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DisableTorsoMotion message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DisableTorsoMotion
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DisableTorsoMotion;

            /**
             * Creates a plain object from a DisableTorsoMotion message. Also converts values to other types if specified.
             * @param message DisableTorsoMotion
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DisableTorsoMotion, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DisableTorsoMotion to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a WalkStarted. */
        interface IWalkStarted {
        }

        /** Represents a WalkStarted. */
        class WalkStarted implements IWalkStarted {

            /**
             * Constructs a new WalkStarted.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IWalkStarted);

            /**
             * Creates a new WalkStarted instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkStarted instance
             */
            public static create(properties?: message.motion.IWalkStarted): message.motion.WalkStarted;

            /**
             * Encodes the specified WalkStarted message. Does not implicitly {@link message.motion.WalkStarted.verify|verify} messages.
             * @param message WalkStarted message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IWalkStarted, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkStarted message, length delimited. Does not implicitly {@link message.motion.WalkStarted.verify|verify} messages.
             * @param message WalkStarted message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IWalkStarted, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkStarted message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkStarted
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.WalkStarted;

            /**
             * Decodes a WalkStarted message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkStarted
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.WalkStarted;

            /**
             * Verifies a WalkStarted message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkStarted message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkStarted
             */
            public static fromObject(object: { [k: string]: any }): message.motion.WalkStarted;

            /**
             * Creates a plain object from a WalkStarted message. Also converts values to other types if specified.
             * @param message WalkStarted
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.WalkStarted, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkStarted to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a WalkStopped. */
        interface IWalkStopped {
        }

        /** Represents a WalkStopped. */
        class WalkStopped implements IWalkStopped {

            /**
             * Constructs a new WalkStopped.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IWalkStopped);

            /**
             * Creates a new WalkStopped instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkStopped instance
             */
            public static create(properties?: message.motion.IWalkStopped): message.motion.WalkStopped;

            /**
             * Encodes the specified WalkStopped message. Does not implicitly {@link message.motion.WalkStopped.verify|verify} messages.
             * @param message WalkStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IWalkStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkStopped message, length delimited. Does not implicitly {@link message.motion.WalkStopped.verify|verify} messages.
             * @param message WalkStopped message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IWalkStopped, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkStopped message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.WalkStopped;

            /**
             * Decodes a WalkStopped message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkStopped
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.WalkStopped;

            /**
             * Verifies a WalkStopped message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkStopped message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkStopped
             */
            public static fromObject(object: { [k: string]: any }): message.motion.WalkStopped;

            /**
             * Creates a plain object from a WalkStopped message. Also converts values to other types if specified.
             * @param message WalkStopped
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.WalkStopped, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkStopped to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a WalkCommand. */
        interface IWalkCommand {

            /** WalkCommand subsumptionId */
            subsumptionId?: (number|Long|null);

            /** WalkCommand command */
            command?: (Ivec3|null);
        }

        /** Represents a WalkCommand. */
        class WalkCommand implements IWalkCommand {

            /**
             * Constructs a new WalkCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IWalkCommand);

            /** WalkCommand subsumptionId. */
            public subsumptionId: (number|Long);

            /** WalkCommand command. */
            public command?: (Ivec3|null);

            /**
             * Creates a new WalkCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns WalkCommand instance
             */
            public static create(properties?: message.motion.IWalkCommand): message.motion.WalkCommand;

            /**
             * Encodes the specified WalkCommand message. Does not implicitly {@link message.motion.WalkCommand.verify|verify} messages.
             * @param message WalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified WalkCommand message, length delimited. Does not implicitly {@link message.motion.WalkCommand.verify|verify} messages.
             * @param message WalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a WalkCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns WalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.WalkCommand;

            /**
             * Decodes a WalkCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns WalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.WalkCommand;

            /**
             * Verifies a WalkCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a WalkCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns WalkCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.WalkCommand;

            /**
             * Creates a plain object from a WalkCommand message. Also converts values to other types if specified.
             * @param message WalkCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.WalkCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this WalkCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StopCommand. */
        interface IStopCommand {

            /** StopCommand subsumptionId */
            subsumptionId?: (number|Long|null);
        }

        /** Represents a StopCommand. */
        class StopCommand implements IStopCommand {

            /**
             * Constructs a new StopCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IStopCommand);

            /** StopCommand subsumptionId. */
            public subsumptionId: (number|Long);

            /**
             * Creates a new StopCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StopCommand instance
             */
            public static create(properties?: message.motion.IStopCommand): message.motion.StopCommand;

            /**
             * Encodes the specified StopCommand message. Does not implicitly {@link message.motion.StopCommand.verify|verify} messages.
             * @param message StopCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IStopCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StopCommand message, length delimited. Does not implicitly {@link message.motion.StopCommand.verify|verify} messages.
             * @param message StopCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IStopCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StopCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StopCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.StopCommand;

            /**
             * Decodes a StopCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StopCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.StopCommand;

            /**
             * Verifies a StopCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StopCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StopCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.StopCommand;

            /**
             * Creates a plain object from a StopCommand message. Also converts values to other types if specified.
             * @param message StopCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.StopCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StopCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NewWalkCommand. */
        interface INewWalkCommand {

            /** NewWalkCommand velocityTarget */
            velocityTarget?: (Ivec3|null);
        }

        /** Represents a NewWalkCommand. */
        class NewWalkCommand implements INewWalkCommand {

            /**
             * Constructs a new NewWalkCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.INewWalkCommand);

            /** NewWalkCommand velocityTarget. */
            public velocityTarget?: (Ivec3|null);

            /**
             * Creates a new NewWalkCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NewWalkCommand instance
             */
            public static create(properties?: message.motion.INewWalkCommand): message.motion.NewWalkCommand;

            /**
             * Encodes the specified NewWalkCommand message. Does not implicitly {@link message.motion.NewWalkCommand.verify|verify} messages.
             * @param message NewWalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.INewWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NewWalkCommand message, length delimited. Does not implicitly {@link message.motion.NewWalkCommand.verify|verify} messages.
             * @param message NewWalkCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.INewWalkCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NewWalkCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NewWalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.NewWalkCommand;

            /**
             * Decodes a NewWalkCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NewWalkCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.NewWalkCommand;

            /**
             * Verifies a NewWalkCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NewWalkCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NewWalkCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.NewWalkCommand;

            /**
             * Creates a plain object from a NewWalkCommand message. Also converts values to other types if specified.
             * @param message NewWalkCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.NewWalkCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NewWalkCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnableWalkEngineCommand. */
        interface IEnableWalkEngineCommand {

            /** EnableWalkEngineCommand subsumptionId */
            subsumptionId?: (number|Long|null);
        }

        /** Represents an EnableWalkEngineCommand. */
        class EnableWalkEngineCommand implements IEnableWalkEngineCommand {

            /**
             * Constructs a new EnableWalkEngineCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IEnableWalkEngineCommand);

            /** EnableWalkEngineCommand subsumptionId. */
            public subsumptionId: (number|Long);

            /**
             * Creates a new EnableWalkEngineCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnableWalkEngineCommand instance
             */
            public static create(properties?: message.motion.IEnableWalkEngineCommand): message.motion.EnableWalkEngineCommand;

            /**
             * Encodes the specified EnableWalkEngineCommand message. Does not implicitly {@link message.motion.EnableWalkEngineCommand.verify|verify} messages.
             * @param message EnableWalkEngineCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IEnableWalkEngineCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnableWalkEngineCommand message, length delimited. Does not implicitly {@link message.motion.EnableWalkEngineCommand.verify|verify} messages.
             * @param message EnableWalkEngineCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IEnableWalkEngineCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnableWalkEngineCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnableWalkEngineCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.EnableWalkEngineCommand;

            /**
             * Decodes an EnableWalkEngineCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnableWalkEngineCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.EnableWalkEngineCommand;

            /**
             * Verifies an EnableWalkEngineCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnableWalkEngineCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnableWalkEngineCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.EnableWalkEngineCommand;

            /**
             * Creates a plain object from an EnableWalkEngineCommand message. Also converts values to other types if specified.
             * @param message EnableWalkEngineCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.EnableWalkEngineCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnableWalkEngineCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DisableWalkEngineCommand. */
        interface IDisableWalkEngineCommand {

            /** DisableWalkEngineCommand subsumptionId */
            subsumptionId?: (number|Long|null);
        }

        /** Represents a DisableWalkEngineCommand. */
        class DisableWalkEngineCommand implements IDisableWalkEngineCommand {

            /**
             * Constructs a new DisableWalkEngineCommand.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.motion.IDisableWalkEngineCommand);

            /** DisableWalkEngineCommand subsumptionId. */
            public subsumptionId: (number|Long);

            /**
             * Creates a new DisableWalkEngineCommand instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DisableWalkEngineCommand instance
             */
            public static create(properties?: message.motion.IDisableWalkEngineCommand): message.motion.DisableWalkEngineCommand;

            /**
             * Encodes the specified DisableWalkEngineCommand message. Does not implicitly {@link message.motion.DisableWalkEngineCommand.verify|verify} messages.
             * @param message DisableWalkEngineCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.motion.IDisableWalkEngineCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DisableWalkEngineCommand message, length delimited. Does not implicitly {@link message.motion.DisableWalkEngineCommand.verify|verify} messages.
             * @param message DisableWalkEngineCommand message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.motion.IDisableWalkEngineCommand, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DisableWalkEngineCommand message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DisableWalkEngineCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.motion.DisableWalkEngineCommand;

            /**
             * Decodes a DisableWalkEngineCommand message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DisableWalkEngineCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.motion.DisableWalkEngineCommand;

            /**
             * Verifies a DisableWalkEngineCommand message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DisableWalkEngineCommand message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DisableWalkEngineCommand
             */
            public static fromObject(object: { [k: string]: any }): message.motion.DisableWalkEngineCommand;

            /**
             * Creates a plain object from a DisableWalkEngineCommand message. Also converts values to other types if specified.
             * @param message DisableWalkEngineCommand
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.motion.DisableWalkEngineCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DisableWalkEngineCommand to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace output. */
    namespace output {

        /** Properties of a Say. */
        interface ISay {

            /** Say message */
            message?: (string|null);
        }

        /**
         * TODO document
         *
         */
        class Say implements ISay {

            /**
             * Constructs a new Say.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.output.ISay);

            /** Say message. */
            public message: string;

            /**
             * Creates a new Say instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Say instance
             */
            public static create(properties?: message.output.ISay): message.output.Say;

            /**
             * Encodes the specified Say message. Does not implicitly {@link message.output.Say.verify|verify} messages.
             * @param message Say message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.output.ISay, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Say message, length delimited. Does not implicitly {@link message.output.Say.verify|verify} messages.
             * @param message Say message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.output.ISay, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Say message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Say
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.output.Say;

            /**
             * Decodes a Say message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Say
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.output.Say;

            /**
             * Verifies a Say message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Say message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Say
             */
            public static fromObject(object: { [k: string]: any }): message.output.Say;

            /**
             * Creates a plain object from a Say message. Also converts values to other types if specified.
             * @param message Say
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.output.Say, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Say to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace platform. */
    namespace platform {

        /** Namespace darwin. */
        namespace darwin {

            /** Properties of a DarwinSensors. */
            interface IDarwinSensors {

                /** DarwinSensors timestamp */
                timestamp?: (google.protobuf.ITimestamp|null);

                /** DarwinSensors cm730ErrorFlags */
                cm730ErrorFlags?: (number|null);

                /** DarwinSensors ledPanel */
                ledPanel?: (message.platform.darwin.DarwinSensors.ILEDPanel|null);

                /** DarwinSensors headLED */
                headLED?: (message.platform.darwin.DarwinSensors.IHeadLED|null);

                /** DarwinSensors eyeLED */
                eyeLED?: (message.platform.darwin.DarwinSensors.IEyeLED|null);

                /** DarwinSensors buttons */
                buttons?: (message.platform.darwin.DarwinSensors.IButtons|null);

                /** DarwinSensors voltage */
                voltage?: (number|null);

                /** DarwinSensors accelerometer */
                accelerometer?: (message.platform.darwin.DarwinSensors.IAccelerometer|null);

                /** DarwinSensors gyroscope */
                gyroscope?: (message.platform.darwin.DarwinSensors.IGyroscope|null);

                /** DarwinSensors fsr */
                fsr?: (message.platform.darwin.DarwinSensors.IFSRs|null);

                /** DarwinSensors servo */
                servo?: (message.platform.darwin.DarwinSensors.IServos|null);
            }

            /**
             * TODO document
             *
             */
            class DarwinSensors implements IDarwinSensors {

                /**
                 * Constructs a new DarwinSensors.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.platform.darwin.IDarwinSensors);

                /** DarwinSensors timestamp. */
                public timestamp?: (google.protobuf.ITimestamp|null);

                /** DarwinSensors cm730ErrorFlags. */
                public cm730ErrorFlags: number;

                /** DarwinSensors ledPanel. */
                public ledPanel?: (message.platform.darwin.DarwinSensors.ILEDPanel|null);

                /** DarwinSensors headLED. */
                public headLED?: (message.platform.darwin.DarwinSensors.IHeadLED|null);

                /** DarwinSensors eyeLED. */
                public eyeLED?: (message.platform.darwin.DarwinSensors.IEyeLED|null);

                /** DarwinSensors buttons. */
                public buttons?: (message.platform.darwin.DarwinSensors.IButtons|null);

                /** DarwinSensors voltage. */
                public voltage: number;

                /** DarwinSensors accelerometer. */
                public accelerometer?: (message.platform.darwin.DarwinSensors.IAccelerometer|null);

                /** DarwinSensors gyroscope. */
                public gyroscope?: (message.platform.darwin.DarwinSensors.IGyroscope|null);

                /** DarwinSensors fsr. */
                public fsr?: (message.platform.darwin.DarwinSensors.IFSRs|null);

                /** DarwinSensors servo. */
                public servo?: (message.platform.darwin.DarwinSensors.IServos|null);

                /**
                 * Creates a new DarwinSensors instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DarwinSensors instance
                 */
                public static create(properties?: message.platform.darwin.IDarwinSensors): message.platform.darwin.DarwinSensors;

                /**
                 * Encodes the specified DarwinSensors message. Does not implicitly {@link message.platform.darwin.DarwinSensors.verify|verify} messages.
                 * @param message DarwinSensors message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.platform.darwin.IDarwinSensors, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DarwinSensors message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.verify|verify} messages.
                 * @param message DarwinSensors message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.platform.darwin.IDarwinSensors, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DarwinSensors message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DarwinSensors
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors;

                /**
                 * Decodes a DarwinSensors message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DarwinSensors
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors;

                /**
                 * Verifies a DarwinSensors message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DarwinSensors message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DarwinSensors
                 */
                public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors;

                /**
                 * Creates a plain object from a DarwinSensors message. Also converts values to other types if specified.
                 * @param message DarwinSensors
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.platform.darwin.DarwinSensors, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DarwinSensors to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DarwinSensors {

                /** Error enum. */
                enum Error {
                    OK = 0,
                    INPUT_VOLTAGE = 1,
                    ANGLE_LIMIT = 2,
                    OVERHEATING = 4,
                    RANGE = 8,
                    CHECKSUM = 16,
                    OVERLOAD = 32,
                    INSTRUCTION = 64,
                    CORRUPT_DATA = 128,
                    TIMEOUT = 256
                }

                /** Properties of a LEDPanel. */
                interface ILEDPanel {

                    /** LEDPanel led2 */
                    led2?: (boolean|null);

                    /** LEDPanel led3 */
                    led3?: (boolean|null);

                    /** LEDPanel led4 */
                    led4?: (boolean|null);
                }

                /** Represents a LEDPanel. */
                class LEDPanel implements ILEDPanel {

                    /**
                     * Constructs a new LEDPanel.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.ILEDPanel);

                    /** LEDPanel led2. */
                    public led2: boolean;

                    /** LEDPanel led3. */
                    public led3: boolean;

                    /** LEDPanel led4. */
                    public led4: boolean;

                    /**
                     * Creates a new LEDPanel instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns LEDPanel instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.ILEDPanel): message.platform.darwin.DarwinSensors.LEDPanel;

                    /**
                     * Encodes the specified LEDPanel message. Does not implicitly {@link message.platform.darwin.DarwinSensors.LEDPanel.verify|verify} messages.
                     * @param message LEDPanel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.ILEDPanel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified LEDPanel message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.LEDPanel.verify|verify} messages.
                     * @param message LEDPanel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.ILEDPanel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a LEDPanel message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns LEDPanel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.LEDPanel;

                    /**
                     * Decodes a LEDPanel message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns LEDPanel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.LEDPanel;

                    /**
                     * Verifies a LEDPanel message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a LEDPanel message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns LEDPanel
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.LEDPanel;

                    /**
                     * Creates a plain object from a LEDPanel message. Also converts values to other types if specified.
                     * @param message LEDPanel
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.LEDPanel, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this LEDPanel to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a HeadLED. */
                interface IHeadLED {

                    /** HeadLED RGB */
                    RGB?: (number|null);
                }

                /** Represents a HeadLED. */
                class HeadLED implements IHeadLED {

                    /**
                     * Constructs a new HeadLED.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IHeadLED);

                    /** HeadLED RGB. */
                    public RGB: number;

                    /**
                     * Creates a new HeadLED instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns HeadLED instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IHeadLED): message.platform.darwin.DarwinSensors.HeadLED;

                    /**
                     * Encodes the specified HeadLED message. Does not implicitly {@link message.platform.darwin.DarwinSensors.HeadLED.verify|verify} messages.
                     * @param message HeadLED message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IHeadLED, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified HeadLED message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.HeadLED.verify|verify} messages.
                     * @param message HeadLED message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IHeadLED, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a HeadLED message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns HeadLED
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.HeadLED;

                    /**
                     * Decodes a HeadLED message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns HeadLED
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.HeadLED;

                    /**
                     * Verifies a HeadLED message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HeadLED message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HeadLED
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.HeadLED;

                    /**
                     * Creates a plain object from a HeadLED message. Also converts values to other types if specified.
                     * @param message HeadLED
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.HeadLED, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HeadLED to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an EyeLED. */
                interface IEyeLED {

                    /** EyeLED RGB */
                    RGB?: (number|null);
                }

                /** Represents an EyeLED. */
                class EyeLED implements IEyeLED {

                    /**
                     * Constructs a new EyeLED.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IEyeLED);

                    /** EyeLED RGB. */
                    public RGB: number;

                    /**
                     * Creates a new EyeLED instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EyeLED instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IEyeLED): message.platform.darwin.DarwinSensors.EyeLED;

                    /**
                     * Encodes the specified EyeLED message. Does not implicitly {@link message.platform.darwin.DarwinSensors.EyeLED.verify|verify} messages.
                     * @param message EyeLED message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IEyeLED, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EyeLED message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.EyeLED.verify|verify} messages.
                     * @param message EyeLED message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IEyeLED, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EyeLED message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EyeLED
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.EyeLED;

                    /**
                     * Decodes an EyeLED message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EyeLED
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.EyeLED;

                    /**
                     * Verifies an EyeLED message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EyeLED message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EyeLED
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.EyeLED;

                    /**
                     * Creates a plain object from an EyeLED message. Also converts values to other types if specified.
                     * @param message EyeLED
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.EyeLED, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EyeLED to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Buttons. */
                interface IButtons {

                    /** Buttons left */
                    left?: (boolean|null);

                    /** Buttons middle */
                    middle?: (boolean|null);
                }

                /** Represents a Buttons. */
                class Buttons implements IButtons {

                    /**
                     * Constructs a new Buttons.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IButtons);

                    /** Buttons left. */
                    public left: boolean;

                    /** Buttons middle. */
                    public middle: boolean;

                    /**
                     * Creates a new Buttons instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Buttons instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IButtons): message.platform.darwin.DarwinSensors.Buttons;

                    /**
                     * Encodes the specified Buttons message. Does not implicitly {@link message.platform.darwin.DarwinSensors.Buttons.verify|verify} messages.
                     * @param message Buttons message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IButtons, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Buttons message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.Buttons.verify|verify} messages.
                     * @param message Buttons message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IButtons, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Buttons message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Buttons
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.Buttons;

                    /**
                     * Decodes a Buttons message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Buttons
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.Buttons;

                    /**
                     * Verifies a Buttons message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Buttons message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Buttons
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.Buttons;

                    /**
                     * Creates a plain object from a Buttons message. Also converts values to other types if specified.
                     * @param message Buttons
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.Buttons, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Buttons to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Accelerometer. */
                interface IAccelerometer {

                    /** Accelerometer x */
                    x?: (number|null);

                    /** Accelerometer y */
                    y?: (number|null);

                    /** Accelerometer z */
                    z?: (number|null);
                }

                /** Represents an Accelerometer. */
                class Accelerometer implements IAccelerometer {

                    /**
                     * Constructs a new Accelerometer.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IAccelerometer);

                    /** Accelerometer x. */
                    public x: number;

                    /** Accelerometer y. */
                    public y: number;

                    /** Accelerometer z. */
                    public z: number;

                    /**
                     * Creates a new Accelerometer instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Accelerometer instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IAccelerometer): message.platform.darwin.DarwinSensors.Accelerometer;

                    /**
                     * Encodes the specified Accelerometer message. Does not implicitly {@link message.platform.darwin.DarwinSensors.Accelerometer.verify|verify} messages.
                     * @param message Accelerometer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IAccelerometer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Accelerometer message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.Accelerometer.verify|verify} messages.
                     * @param message Accelerometer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IAccelerometer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Accelerometer message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Accelerometer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.Accelerometer;

                    /**
                     * Decodes an Accelerometer message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Accelerometer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.Accelerometer;

                    /**
                     * Verifies an Accelerometer message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Accelerometer message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Accelerometer
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.Accelerometer;

                    /**
                     * Creates a plain object from an Accelerometer message. Also converts values to other types if specified.
                     * @param message Accelerometer
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.Accelerometer, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Accelerometer to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Gyroscope. */
                interface IGyroscope {

                    /** Gyroscope x */
                    x?: (number|null);

                    /** Gyroscope y */
                    y?: (number|null);

                    /** Gyroscope z */
                    z?: (number|null);
                }

                /** Represents a Gyroscope. */
                class Gyroscope implements IGyroscope {

                    /**
                     * Constructs a new Gyroscope.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IGyroscope);

                    /** Gyroscope x. */
                    public x: number;

                    /** Gyroscope y. */
                    public y: number;

                    /** Gyroscope z. */
                    public z: number;

                    /**
                     * Creates a new Gyroscope instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Gyroscope instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IGyroscope): message.platform.darwin.DarwinSensors.Gyroscope;

                    /**
                     * Encodes the specified Gyroscope message. Does not implicitly {@link message.platform.darwin.DarwinSensors.Gyroscope.verify|verify} messages.
                     * @param message Gyroscope message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IGyroscope, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Gyroscope message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.Gyroscope.verify|verify} messages.
                     * @param message Gyroscope message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IGyroscope, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Gyroscope message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Gyroscope
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.Gyroscope;

                    /**
                     * Decodes a Gyroscope message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Gyroscope
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.Gyroscope;

                    /**
                     * Verifies a Gyroscope message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Gyroscope message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Gyroscope
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.Gyroscope;

                    /**
                     * Creates a plain object from a Gyroscope message. Also converts values to other types if specified.
                     * @param message Gyroscope
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.Gyroscope, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Gyroscope to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FSR. */
                interface IFSR {

                    /** FSR fsr1 */
                    fsr1?: (number|null);

                    /** FSR fsr2 */
                    fsr2?: (number|null);

                    /** FSR fsr3 */
                    fsr3?: (number|null);

                    /** FSR fsr4 */
                    fsr4?: (number|null);

                    /** FSR centreX */
                    centreX?: (number|null);

                    /** FSR centreY */
                    centreY?: (number|null);

                    /** FSR errorFlags */
                    errorFlags?: (number|null);
                }

                /** Represents a FSR. */
                class FSR implements IFSR {

                    /**
                     * Constructs a new FSR.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IFSR);

                    /** FSR fsr1. */
                    public fsr1: number;

                    /** FSR fsr2. */
                    public fsr2: number;

                    /** FSR fsr3. */
                    public fsr3: number;

                    /** FSR fsr4. */
                    public fsr4: number;

                    /** FSR centreX. */
                    public centreX: number;

                    /** FSR centreY. */
                    public centreY: number;

                    /** FSR errorFlags. */
                    public errorFlags: number;

                    /**
                     * Creates a new FSR instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns FSR instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IFSR): message.platform.darwin.DarwinSensors.FSR;

                    /**
                     * Encodes the specified FSR message. Does not implicitly {@link message.platform.darwin.DarwinSensors.FSR.verify|verify} messages.
                     * @param message FSR message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IFSR, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified FSR message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.FSR.verify|verify} messages.
                     * @param message FSR message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IFSR, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a FSR message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns FSR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.FSR;

                    /**
                     * Decodes a FSR message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns FSR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.FSR;

                    /**
                     * Verifies a FSR message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FSR message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FSR
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.FSR;

                    /**
                     * Creates a plain object from a FSR message. Also converts values to other types if specified.
                     * @param message FSR
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.FSR, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FSR to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a FSRs. */
                interface IFSRs {

                    /** FSRs left */
                    left?: (message.platform.darwin.DarwinSensors.IFSR|null);

                    /** FSRs right */
                    right?: (message.platform.darwin.DarwinSensors.IFSR|null);
                }

                /** Represents a FSRs. */
                class FSRs implements IFSRs {

                    /**
                     * Constructs a new FSRs.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IFSRs);

                    /** FSRs left. */
                    public left?: (message.platform.darwin.DarwinSensors.IFSR|null);

                    /** FSRs right. */
                    public right?: (message.platform.darwin.DarwinSensors.IFSR|null);

                    /**
                     * Creates a new FSRs instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns FSRs instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IFSRs): message.platform.darwin.DarwinSensors.FSRs;

                    /**
                     * Encodes the specified FSRs message. Does not implicitly {@link message.platform.darwin.DarwinSensors.FSRs.verify|verify} messages.
                     * @param message FSRs message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IFSRs, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified FSRs message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.FSRs.verify|verify} messages.
                     * @param message FSRs message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IFSRs, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a FSRs message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns FSRs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.FSRs;

                    /**
                     * Decodes a FSRs message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns FSRs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.FSRs;

                    /**
                     * Verifies a FSRs message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a FSRs message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns FSRs
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.FSRs;

                    /**
                     * Creates a plain object from a FSRs message. Also converts values to other types if specified.
                     * @param message FSRs
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.FSRs, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this FSRs to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Servo. */
                interface IServo {

                    /** Servo errorFlags */
                    errorFlags?: (number|null);

                    /** Servo torqueEnabled */
                    torqueEnabled?: (boolean|null);

                    /** Servo pGain */
                    pGain?: (number|null);

                    /** Servo iGain */
                    iGain?: (number|null);

                    /** Servo dGain */
                    dGain?: (number|null);

                    /** Servo goalPosition */
                    goalPosition?: (number|null);

                    /** Servo movingSpeed */
                    movingSpeed?: (number|null);

                    /** Servo torque */
                    torque?: (number|null);

                    /** Servo presentPosition */
                    presentPosition?: (number|null);

                    /** Servo presentSpeed */
                    presentSpeed?: (number|null);

                    /** Servo load */
                    load?: (number|null);

                    /** Servo voltage */
                    voltage?: (number|null);

                    /** Servo temperature */
                    temperature?: (number|null);
                }

                /** Represents a Servo. */
                class Servo implements IServo {

                    /**
                     * Constructs a new Servo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IServo);

                    /** Servo errorFlags. */
                    public errorFlags: number;

                    /** Servo torqueEnabled. */
                    public torqueEnabled: boolean;

                    /** Servo pGain. */
                    public pGain: number;

                    /** Servo iGain. */
                    public iGain: number;

                    /** Servo dGain. */
                    public dGain: number;

                    /** Servo goalPosition. */
                    public goalPosition: number;

                    /** Servo movingSpeed. */
                    public movingSpeed: number;

                    /** Servo torque. */
                    public torque: number;

                    /** Servo presentPosition. */
                    public presentPosition: number;

                    /** Servo presentSpeed. */
                    public presentSpeed: number;

                    /** Servo load. */
                    public load: number;

                    /** Servo voltage. */
                    public voltage: number;

                    /** Servo temperature. */
                    public temperature: number;

                    /**
                     * Creates a new Servo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Servo instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IServo): message.platform.darwin.DarwinSensors.Servo;

                    /**
                     * Encodes the specified Servo message. Does not implicitly {@link message.platform.darwin.DarwinSensors.Servo.verify|verify} messages.
                     * @param message Servo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IServo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Servo message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.Servo.verify|verify} messages.
                     * @param message Servo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IServo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Servo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Servo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.Servo;

                    /**
                     * Decodes a Servo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Servo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.Servo;

                    /**
                     * Verifies a Servo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Servo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Servo
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.Servo;

                    /**
                     * Creates a plain object from a Servo message. Also converts values to other types if specified.
                     * @param message Servo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.Servo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Servo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Servos. */
                interface IServos {

                    /** Servos rShoulderPitch */
                    rShoulderPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lShoulderPitch */
                    lShoulderPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rShoulderRoll */
                    rShoulderRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lShoulderRoll */
                    lShoulderRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rElbow */
                    rElbow?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lElbow */
                    lElbow?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipYaw */
                    rHipYaw?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipYaw */
                    lHipYaw?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipRoll */
                    rHipRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipRoll */
                    lHipRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipPitch */
                    rHipPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipPitch */
                    lHipPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rKnee */
                    rKnee?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lKnee */
                    lKnee?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rAnklePitch */
                    rAnklePitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lAnklePitch */
                    lAnklePitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rAnkleRoll */
                    rAnkleRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lAnkleRoll */
                    lAnkleRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos headPan */
                    headPan?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos headTilt */
                    headTilt?: (message.platform.darwin.DarwinSensors.IServo|null);
                }

                /** Represents a Servos. */
                class Servos implements IServos {

                    /**
                     * Constructs a new Servos.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.platform.darwin.DarwinSensors.IServos);

                    /** Servos rShoulderPitch. */
                    public rShoulderPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lShoulderPitch. */
                    public lShoulderPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rShoulderRoll. */
                    public rShoulderRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lShoulderRoll. */
                    public lShoulderRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rElbow. */
                    public rElbow?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lElbow. */
                    public lElbow?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipYaw. */
                    public rHipYaw?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipYaw. */
                    public lHipYaw?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipRoll. */
                    public rHipRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipRoll. */
                    public lHipRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rHipPitch. */
                    public rHipPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lHipPitch. */
                    public lHipPitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rKnee. */
                    public rKnee?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lKnee. */
                    public lKnee?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rAnklePitch. */
                    public rAnklePitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lAnklePitch. */
                    public lAnklePitch?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos rAnkleRoll. */
                    public rAnkleRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos lAnkleRoll. */
                    public lAnkleRoll?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos headPan. */
                    public headPan?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /** Servos headTilt. */
                    public headTilt?: (message.platform.darwin.DarwinSensors.IServo|null);

                    /**
                     * Creates a new Servos instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Servos instance
                     */
                    public static create(properties?: message.platform.darwin.DarwinSensors.IServos): message.platform.darwin.DarwinSensors.Servos;

                    /**
                     * Encodes the specified Servos message. Does not implicitly {@link message.platform.darwin.DarwinSensors.Servos.verify|verify} messages.
                     * @param message Servos message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.platform.darwin.DarwinSensors.IServos, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Servos message, length delimited. Does not implicitly {@link message.platform.darwin.DarwinSensors.Servos.verify|verify} messages.
                     * @param message Servos message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.platform.darwin.DarwinSensors.IServos, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Servos message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Servos
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.DarwinSensors.Servos;

                    /**
                     * Decodes a Servos message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Servos
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.DarwinSensors.Servos;

                    /**
                     * Verifies a Servos message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Servos message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Servos
                     */
                    public static fromObject(object: { [k: string]: any }): message.platform.darwin.DarwinSensors.Servos;

                    /**
                     * Creates a plain object from a Servos message. Also converts values to other types if specified.
                     * @param message Servos
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.platform.darwin.DarwinSensors.Servos, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Servos to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ButtonLeftDown. */
            interface IButtonLeftDown {
            }

            /** Represents a ButtonLeftDown. */
            class ButtonLeftDown implements IButtonLeftDown {

                /**
                 * Constructs a new ButtonLeftDown.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.platform.darwin.IButtonLeftDown);

                /**
                 * Creates a new ButtonLeftDown instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ButtonLeftDown instance
                 */
                public static create(properties?: message.platform.darwin.IButtonLeftDown): message.platform.darwin.ButtonLeftDown;

                /**
                 * Encodes the specified ButtonLeftDown message. Does not implicitly {@link message.platform.darwin.ButtonLeftDown.verify|verify} messages.
                 * @param message ButtonLeftDown message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.platform.darwin.IButtonLeftDown, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ButtonLeftDown message, length delimited. Does not implicitly {@link message.platform.darwin.ButtonLeftDown.verify|verify} messages.
                 * @param message ButtonLeftDown message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.platform.darwin.IButtonLeftDown, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ButtonLeftDown message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ButtonLeftDown
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.ButtonLeftDown;

                /**
                 * Decodes a ButtonLeftDown message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ButtonLeftDown
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.ButtonLeftDown;

                /**
                 * Verifies a ButtonLeftDown message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ButtonLeftDown message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ButtonLeftDown
                 */
                public static fromObject(object: { [k: string]: any }): message.platform.darwin.ButtonLeftDown;

                /**
                 * Creates a plain object from a ButtonLeftDown message. Also converts values to other types if specified.
                 * @param message ButtonLeftDown
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.platform.darwin.ButtonLeftDown, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ButtonLeftDown to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ButtonLeftUp. */
            interface IButtonLeftUp {
            }

            /** Represents a ButtonLeftUp. */
            class ButtonLeftUp implements IButtonLeftUp {

                /**
                 * Constructs a new ButtonLeftUp.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.platform.darwin.IButtonLeftUp);

                /**
                 * Creates a new ButtonLeftUp instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ButtonLeftUp instance
                 */
                public static create(properties?: message.platform.darwin.IButtonLeftUp): message.platform.darwin.ButtonLeftUp;

                /**
                 * Encodes the specified ButtonLeftUp message. Does not implicitly {@link message.platform.darwin.ButtonLeftUp.verify|verify} messages.
                 * @param message ButtonLeftUp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.platform.darwin.IButtonLeftUp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ButtonLeftUp message, length delimited. Does not implicitly {@link message.platform.darwin.ButtonLeftUp.verify|verify} messages.
                 * @param message ButtonLeftUp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.platform.darwin.IButtonLeftUp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ButtonLeftUp message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ButtonLeftUp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.ButtonLeftUp;

                /**
                 * Decodes a ButtonLeftUp message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ButtonLeftUp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.ButtonLeftUp;

                /**
                 * Verifies a ButtonLeftUp message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ButtonLeftUp message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ButtonLeftUp
                 */
                public static fromObject(object: { [k: string]: any }): message.platform.darwin.ButtonLeftUp;

                /**
                 * Creates a plain object from a ButtonLeftUp message. Also converts values to other types if specified.
                 * @param message ButtonLeftUp
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.platform.darwin.ButtonLeftUp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ButtonLeftUp to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ButtonMiddleDown. */
            interface IButtonMiddleDown {
            }

            /** Represents a ButtonMiddleDown. */
            class ButtonMiddleDown implements IButtonMiddleDown {

                /**
                 * Constructs a new ButtonMiddleDown.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.platform.darwin.IButtonMiddleDown);

                /**
                 * Creates a new ButtonMiddleDown instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ButtonMiddleDown instance
                 */
                public static create(properties?: message.platform.darwin.IButtonMiddleDown): message.platform.darwin.ButtonMiddleDown;

                /**
                 * Encodes the specified ButtonMiddleDown message. Does not implicitly {@link message.platform.darwin.ButtonMiddleDown.verify|verify} messages.
                 * @param message ButtonMiddleDown message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.platform.darwin.IButtonMiddleDown, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ButtonMiddleDown message, length delimited. Does not implicitly {@link message.platform.darwin.ButtonMiddleDown.verify|verify} messages.
                 * @param message ButtonMiddleDown message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.platform.darwin.IButtonMiddleDown, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ButtonMiddleDown message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ButtonMiddleDown
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.ButtonMiddleDown;

                /**
                 * Decodes a ButtonMiddleDown message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ButtonMiddleDown
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.ButtonMiddleDown;

                /**
                 * Verifies a ButtonMiddleDown message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ButtonMiddleDown message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ButtonMiddleDown
                 */
                public static fromObject(object: { [k: string]: any }): message.platform.darwin.ButtonMiddleDown;

                /**
                 * Creates a plain object from a ButtonMiddleDown message. Also converts values to other types if specified.
                 * @param message ButtonMiddleDown
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.platform.darwin.ButtonMiddleDown, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ButtonMiddleDown to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ButtonMiddleUp. */
            interface IButtonMiddleUp {
            }

            /** Represents a ButtonMiddleUp. */
            class ButtonMiddleUp implements IButtonMiddleUp {

                /**
                 * Constructs a new ButtonMiddleUp.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.platform.darwin.IButtonMiddleUp);

                /**
                 * Creates a new ButtonMiddleUp instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ButtonMiddleUp instance
                 */
                public static create(properties?: message.platform.darwin.IButtonMiddleUp): message.platform.darwin.ButtonMiddleUp;

                /**
                 * Encodes the specified ButtonMiddleUp message. Does not implicitly {@link message.platform.darwin.ButtonMiddleUp.verify|verify} messages.
                 * @param message ButtonMiddleUp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.platform.darwin.IButtonMiddleUp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ButtonMiddleUp message, length delimited. Does not implicitly {@link message.platform.darwin.ButtonMiddleUp.verify|verify} messages.
                 * @param message ButtonMiddleUp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.platform.darwin.IButtonMiddleUp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ButtonMiddleUp message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ButtonMiddleUp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.platform.darwin.ButtonMiddleUp;

                /**
                 * Decodes a ButtonMiddleUp message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ButtonMiddleUp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.platform.darwin.ButtonMiddleUp;

                /**
                 * Verifies a ButtonMiddleUp message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ButtonMiddleUp message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ButtonMiddleUp
                 */
                public static fromObject(object: { [k: string]: any }): message.platform.darwin.ButtonMiddleUp;

                /**
                 * Creates a plain object from a ButtonMiddleUp message. Also converts values to other types if specified.
                 * @param message ButtonMiddleUp
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.platform.darwin.ButtonMiddleUp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ButtonMiddleUp to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace research. */
    namespace research {

        /** Properties of an AutoClassifierPixels. */
        interface IAutoClassifierPixels {

            /** AutoClassifierPixels pixels */
            pixels?: (number[]|null);

            /** AutoClassifierPixels classification */
            classification?: (number|null);
        }

        /** Represents an AutoClassifierPixels. */
        class AutoClassifierPixels implements IAutoClassifierPixels {

            /**
             * Constructs a new AutoClassifierPixels.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.research.IAutoClassifierPixels);

            /** AutoClassifierPixels pixels. */
            public pixels: number[];

            /** AutoClassifierPixels classification. */
            public classification: number;

            /**
             * Creates a new AutoClassifierPixels instance using the specified properties.
             * @param [properties] Properties to set
             * @returns AutoClassifierPixels instance
             */
            public static create(properties?: message.research.IAutoClassifierPixels): message.research.AutoClassifierPixels;

            /**
             * Encodes the specified AutoClassifierPixels message. Does not implicitly {@link message.research.AutoClassifierPixels.verify|verify} messages.
             * @param message AutoClassifierPixels message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.research.IAutoClassifierPixels, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AutoClassifierPixels message, length delimited. Does not implicitly {@link message.research.AutoClassifierPixels.verify|verify} messages.
             * @param message AutoClassifierPixels message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.research.IAutoClassifierPixels, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AutoClassifierPixels message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns AutoClassifierPixels
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.research.AutoClassifierPixels;

            /**
             * Decodes an AutoClassifierPixels message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns AutoClassifierPixels
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.research.AutoClassifierPixels;

            /**
             * Verifies an AutoClassifierPixels message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an AutoClassifierPixels message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns AutoClassifierPixels
             */
            public static fromObject(object: { [k: string]: any }): message.research.AutoClassifierPixels;

            /**
             * Creates a plain object from an AutoClassifierPixels message. Also converts values to other types if specified.
             * @param message AutoClassifierPixels
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.research.AutoClassifierPixels, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this AutoClassifierPixels to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Namespace scriptoptimizer. */
        namespace scriptoptimizer {

            /** Properties of an OptimizeScript. */
            interface IOptimizeScript {

                /** OptimizeScript target */
                target?: (string|null);

                /** OptimizeScript iteration */
                iteration?: (number|null);

                /** OptimizeScript metadata */
                metadata?: (string|null);

                /** OptimizeScript frames */
                frames?: (message.research.scriptoptimizer.OptimizeScript.IFrame[]|null);
            }

            /** Represents an OptimizeScript. */
            class OptimizeScript implements IOptimizeScript {

                /**
                 * Constructs a new OptimizeScript.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.research.scriptoptimizer.IOptimizeScript);

                /** OptimizeScript target. */
                public target: string;

                /** OptimizeScript iteration. */
                public iteration: number;

                /** OptimizeScript metadata. */
                public metadata: string;

                /** OptimizeScript frames. */
                public frames: message.research.scriptoptimizer.OptimizeScript.IFrame[];

                /**
                 * Creates a new OptimizeScript instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OptimizeScript instance
                 */
                public static create(properties?: message.research.scriptoptimizer.IOptimizeScript): message.research.scriptoptimizer.OptimizeScript;

                /**
                 * Encodes the specified OptimizeScript message. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.verify|verify} messages.
                 * @param message OptimizeScript message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.research.scriptoptimizer.IOptimizeScript, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OptimizeScript message, length delimited. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.verify|verify} messages.
                 * @param message OptimizeScript message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.research.scriptoptimizer.IOptimizeScript, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an OptimizeScript message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OptimizeScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.research.scriptoptimizer.OptimizeScript;

                /**
                 * Decodes an OptimizeScript message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OptimizeScript
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.research.scriptoptimizer.OptimizeScript;

                /**
                 * Verifies an OptimizeScript message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OptimizeScript message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OptimizeScript
                 */
                public static fromObject(object: { [k: string]: any }): message.research.scriptoptimizer.OptimizeScript;

                /**
                 * Creates a plain object from an OptimizeScript message. Also converts values to other types if specified.
                 * @param message OptimizeScript
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.research.scriptoptimizer.OptimizeScript, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OptimizeScript to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace OptimizeScript {

                /** Properties of a Target. */
                interface ITarget {

                    /** Target id */
                    id?: (number|null);

                    /** Target position */
                    position?: (number|null);

                    /** Target gain */
                    gain?: (number|null);
                }

                /** Represents a Target. */
                class Target implements ITarget {

                    /**
                     * Constructs a new Target.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.research.scriptoptimizer.OptimizeScript.ITarget);

                    /** Target id. */
                    public id: number;

                    /** Target position. */
                    public position: number;

                    /** Target gain. */
                    public gain: number;

                    /**
                     * Creates a new Target instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Target instance
                     */
                    public static create(properties?: message.research.scriptoptimizer.OptimizeScript.ITarget): message.research.scriptoptimizer.OptimizeScript.Target;

                    /**
                     * Encodes the specified Target message. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.Target.verify|verify} messages.
                     * @param message Target message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.research.scriptoptimizer.OptimizeScript.ITarget, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Target message, length delimited. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.Target.verify|verify} messages.
                     * @param message Target message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.research.scriptoptimizer.OptimizeScript.ITarget, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Target message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Target
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.research.scriptoptimizer.OptimizeScript.Target;

                    /**
                     * Decodes a Target message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Target
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.research.scriptoptimizer.OptimizeScript.Target;

                    /**
                     * Verifies a Target message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Target message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Target
                     */
                    public static fromObject(object: { [k: string]: any }): message.research.scriptoptimizer.OptimizeScript.Target;

                    /**
                     * Creates a plain object from a Target message. Also converts values to other types if specified.
                     * @param message Target
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.research.scriptoptimizer.OptimizeScript.Target, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Target to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Frame. */
                interface IFrame {

                    /** Frame duration */
                    duration?: (number|null);

                    /** Frame targets */
                    targets?: (message.research.scriptoptimizer.OptimizeScript.ITarget[]|null);
                }

                /** Represents a Frame. */
                class Frame implements IFrame {

                    /**
                     * Constructs a new Frame.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.research.scriptoptimizer.OptimizeScript.IFrame);

                    /** Frame duration. */
                    public duration: number;

                    /** Frame targets. */
                    public targets: message.research.scriptoptimizer.OptimizeScript.ITarget[];

                    /**
                     * Creates a new Frame instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Frame instance
                     */
                    public static create(properties?: message.research.scriptoptimizer.OptimizeScript.IFrame): message.research.scriptoptimizer.OptimizeScript.Frame;

                    /**
                     * Encodes the specified Frame message. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.Frame.verify|verify} messages.
                     * @param message Frame message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.research.scriptoptimizer.OptimizeScript.IFrame, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Frame message, length delimited. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScript.Frame.verify|verify} messages.
                     * @param message Frame message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.research.scriptoptimizer.OptimizeScript.IFrame, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Frame message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Frame
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.research.scriptoptimizer.OptimizeScript.Frame;

                    /**
                     * Decodes a Frame message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Frame
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.research.scriptoptimizer.OptimizeScript.Frame;

                    /**
                     * Verifies a Frame message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Frame message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Frame
                     */
                    public static fromObject(object: { [k: string]: any }): message.research.scriptoptimizer.OptimizeScript.Frame;

                    /**
                     * Creates a plain object from a Frame message. Also converts values to other types if specified.
                     * @param message Frame
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.research.scriptoptimizer.OptimizeScript.Frame, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Frame to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an OptimizeScriptResult. */
            interface IOptimizeScriptResult {

                /** OptimizeScriptResult iteration */
                iteration?: (number|null);

                /** OptimizeScriptResult metadata */
                metadata?: (string|null);

                /** OptimizeScriptResult sensors */
                sensors?: (message.input.ISensors[]|null);
            }

            /** Represents an OptimizeScriptResult. */
            class OptimizeScriptResult implements IOptimizeScriptResult {

                /**
                 * Constructs a new OptimizeScriptResult.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.research.scriptoptimizer.IOptimizeScriptResult);

                /** OptimizeScriptResult iteration. */
                public iteration: number;

                /** OptimizeScriptResult metadata. */
                public metadata: string;

                /** OptimizeScriptResult sensors. */
                public sensors: message.input.ISensors[];

                /**
                 * Creates a new OptimizeScriptResult instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OptimizeScriptResult instance
                 */
                public static create(properties?: message.research.scriptoptimizer.IOptimizeScriptResult): message.research.scriptoptimizer.OptimizeScriptResult;

                /**
                 * Encodes the specified OptimizeScriptResult message. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScriptResult.verify|verify} messages.
                 * @param message OptimizeScriptResult message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.research.scriptoptimizer.IOptimizeScriptResult, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OptimizeScriptResult message, length delimited. Does not implicitly {@link message.research.scriptoptimizer.OptimizeScriptResult.verify|verify} messages.
                 * @param message OptimizeScriptResult message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.research.scriptoptimizer.IOptimizeScriptResult, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an OptimizeScriptResult message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OptimizeScriptResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.research.scriptoptimizer.OptimizeScriptResult;

                /**
                 * Decodes an OptimizeScriptResult message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OptimizeScriptResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.research.scriptoptimizer.OptimizeScriptResult;

                /**
                 * Verifies an OptimizeScriptResult message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OptimizeScriptResult message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OptimizeScriptResult
                 */
                public static fromObject(object: { [k: string]: any }): message.research.scriptoptimizer.OptimizeScriptResult;

                /**
                 * Creates a plain object from an OptimizeScriptResult message. Also converts values to other types if specified.
                 * @param message OptimizeScriptResult
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.research.scriptoptimizer.OptimizeScriptResult, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OptimizeScriptResult to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace support. */
    namespace support {

        /** Properties of a FieldDescription. */
        interface IFieldDescription {

            /** FieldDescription ballRadius */
            ballRadius?: (number|null);

            /** FieldDescription goalpostTopHeight */
            goalpostTopHeight?: (number|null);

            /** FieldDescription penaltyRobotStart */
            penaltyRobotStart?: (number|null);

            /** FieldDescription goalpostOwnL */
            goalpostOwnL?: (Ivec2|null);

            /** FieldDescription goalpostOwnR */
            goalpostOwnR?: (Ivec2|null);

            /** FieldDescription goalpostOppL */
            goalpostOppL?: (Ivec2|null);

            /** FieldDescription goalpostOppR */
            goalpostOppR?: (Ivec2|null);

            /** FieldDescription dimensions */
            dimensions?: (message.support.FieldDescription.IFieldDimensions|null);
        }

        /** Represents a FieldDescription. */
        class FieldDescription implements IFieldDescription {

            /**
             * Constructs a new FieldDescription.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.support.IFieldDescription);

            /** FieldDescription ballRadius. */
            public ballRadius: number;

            /** FieldDescription goalpostTopHeight. */
            public goalpostTopHeight: number;

            /** FieldDescription penaltyRobotStart. */
            public penaltyRobotStart: number;

            /** FieldDescription goalpostOwnL. */
            public goalpostOwnL?: (Ivec2|null);

            /** FieldDescription goalpostOwnR. */
            public goalpostOwnR?: (Ivec2|null);

            /** FieldDescription goalpostOppL. */
            public goalpostOppL?: (Ivec2|null);

            /** FieldDescription goalpostOppR. */
            public goalpostOppR?: (Ivec2|null);

            /** FieldDescription dimensions. */
            public dimensions?: (message.support.FieldDescription.IFieldDimensions|null);

            /**
             * Creates a new FieldDescription instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldDescription instance
             */
            public static create(properties?: message.support.IFieldDescription): message.support.FieldDescription;

            /**
             * Encodes the specified FieldDescription message. Does not implicitly {@link message.support.FieldDescription.verify|verify} messages.
             * @param message FieldDescription message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.support.IFieldDescription, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldDescription message, length delimited. Does not implicitly {@link message.support.FieldDescription.verify|verify} messages.
             * @param message FieldDescription message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.support.IFieldDescription, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldDescription message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldDescription
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.FieldDescription;

            /**
             * Decodes a FieldDescription message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldDescription
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.FieldDescription;

            /**
             * Verifies a FieldDescription message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldDescription message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldDescription
             */
            public static fromObject(object: { [k: string]: any }): message.support.FieldDescription;

            /**
             * Creates a plain object from a FieldDescription message. Also converts values to other types if specified.
             * @param message FieldDescription
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.support.FieldDescription, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldDescription to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldDescription {

            /** GoalpostType enum. */
            enum GoalpostType {
                RECTANGLE = 0,
                CIRCLE = 1
            }

            /** Properties of a FieldDimensions. */
            interface IFieldDimensions {

                /** FieldDimensions lineWidth */
                lineWidth?: (number|null);

                /** FieldDimensions markWidth */
                markWidth?: (number|null);

                /** FieldDimensions fieldLength */
                fieldLength?: (number|null);

                /** FieldDimensions fieldWidth */
                fieldWidth?: (number|null);

                /** FieldDimensions goalpostType */
                goalpostType?: (message.support.FieldDescription.GoalpostType|null);

                /** FieldDimensions goalDepth */
                goalDepth?: (number|null);

                /** FieldDimensions goalWidth */
                goalWidth?: (number|null);

                /** FieldDimensions goalAreaLength */
                goalAreaLength?: (number|null);

                /** FieldDimensions goalAreaWidth */
                goalAreaWidth?: (number|null);

                /** FieldDimensions goalCrossbarHeight */
                goalCrossbarHeight?: (number|null);

                /** FieldDimensions goalpostWidth */
                goalpostWidth?: (number|null);

                /** FieldDimensions goalpostDepth */
                goalpostDepth?: (number|null);

                /** FieldDimensions goalCrossbarWidth */
                goalCrossbarWidth?: (number|null);

                /** FieldDimensions goalCrossbarDepth */
                goalCrossbarDepth?: (number|null);

                /** FieldDimensions goalNetHeight */
                goalNetHeight?: (number|null);

                /** FieldDimensions penaltyMarkDistance */
                penaltyMarkDistance?: (number|null);

                /** FieldDimensions centerCircleDiameter */
                centerCircleDiameter?: (number|null);

                /** FieldDimensions borderStripMinWidth */
                borderStripMinWidth?: (number|null);
            }

            /** Represents a FieldDimensions. */
            class FieldDimensions implements IFieldDimensions {

                /**
                 * Constructs a new FieldDimensions.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.FieldDescription.IFieldDimensions);

                /** FieldDimensions lineWidth. */
                public lineWidth: number;

                /** FieldDimensions markWidth. */
                public markWidth: number;

                /** FieldDimensions fieldLength. */
                public fieldLength: number;

                /** FieldDimensions fieldWidth. */
                public fieldWidth: number;

                /** FieldDimensions goalpostType. */
                public goalpostType: message.support.FieldDescription.GoalpostType;

                /** FieldDimensions goalDepth. */
                public goalDepth: number;

                /** FieldDimensions goalWidth. */
                public goalWidth: number;

                /** FieldDimensions goalAreaLength. */
                public goalAreaLength: number;

                /** FieldDimensions goalAreaWidth. */
                public goalAreaWidth: number;

                /** FieldDimensions goalCrossbarHeight. */
                public goalCrossbarHeight: number;

                /** FieldDimensions goalpostWidth. */
                public goalpostWidth: number;

                /** FieldDimensions goalpostDepth. */
                public goalpostDepth: number;

                /** FieldDimensions goalCrossbarWidth. */
                public goalCrossbarWidth: number;

                /** FieldDimensions goalCrossbarDepth. */
                public goalCrossbarDepth: number;

                /** FieldDimensions goalNetHeight. */
                public goalNetHeight: number;

                /** FieldDimensions penaltyMarkDistance. */
                public penaltyMarkDistance: number;

                /** FieldDimensions centerCircleDiameter. */
                public centerCircleDiameter: number;

                /** FieldDimensions borderStripMinWidth. */
                public borderStripMinWidth: number;

                /**
                 * Creates a new FieldDimensions instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns FieldDimensions instance
                 */
                public static create(properties?: message.support.FieldDescription.IFieldDimensions): message.support.FieldDescription.FieldDimensions;

                /**
                 * Encodes the specified FieldDimensions message. Does not implicitly {@link message.support.FieldDescription.FieldDimensions.verify|verify} messages.
                 * @param message FieldDimensions message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.FieldDescription.IFieldDimensions, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FieldDimensions message, length delimited. Does not implicitly {@link message.support.FieldDescription.FieldDimensions.verify|verify} messages.
                 * @param message FieldDimensions message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.FieldDescription.IFieldDimensions, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FieldDimensions message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns FieldDimensions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.FieldDescription.FieldDimensions;

                /**
                 * Decodes a FieldDimensions message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns FieldDimensions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.FieldDescription.FieldDimensions;

                /**
                 * Verifies a FieldDimensions message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FieldDimensions message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FieldDimensions
                 */
                public static fromObject(object: { [k: string]: any }): message.support.FieldDescription.FieldDimensions;

                /**
                 * Creates a plain object from a FieldDimensions message. Also converts values to other types if specified.
                 * @param message FieldDimensions
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.FieldDescription.FieldDimensions, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FieldDimensions to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GlobalConfig. */
        interface IGlobalConfig {

            /** GlobalConfig playerId */
            playerId?: (number|null);

            /** GlobalConfig teamId */
            teamId?: (number|null);
        }

        /** Represents a GlobalConfig. */
        class GlobalConfig implements IGlobalConfig {

            /**
             * Constructs a new GlobalConfig.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.support.IGlobalConfig);

            /** GlobalConfig playerId. */
            public playerId: number;

            /** GlobalConfig teamId. */
            public teamId: number;

            /**
             * Creates a new GlobalConfig instance using the specified properties.
             * @param [properties] Properties to set
             * @returns GlobalConfig instance
             */
            public static create(properties?: message.support.IGlobalConfig): message.support.GlobalConfig;

            /**
             * Encodes the specified GlobalConfig message. Does not implicitly {@link message.support.GlobalConfig.verify|verify} messages.
             * @param message GlobalConfig message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.support.IGlobalConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GlobalConfig message, length delimited. Does not implicitly {@link message.support.GlobalConfig.verify|verify} messages.
             * @param message GlobalConfig message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.support.IGlobalConfig, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GlobalConfig message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns GlobalConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.GlobalConfig;

            /**
             * Decodes a GlobalConfig message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns GlobalConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.GlobalConfig;

            /**
             * Verifies a GlobalConfig message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GlobalConfig message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GlobalConfig
             */
            public static fromObject(object: { [k: string]: any }): message.support.GlobalConfig;

            /**
             * Creates a plain object from a GlobalConfig message. Also converts values to other types if specified.
             * @param message GlobalConfig
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.support.GlobalConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GlobalConfig to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Namespace nuclear. */
        namespace nuclear {

            /** Properties of a ReactionStatistics. */
            interface IReactionStatistics {

                /** ReactionStatistics name */
                name?: (string|null);

                /** ReactionStatistics triggerName */
                triggerName?: (string|null);

                /** ReactionStatistics functionName */
                functionName?: (string|null);

                /** ReactionStatistics reactionId */
                reactionId?: (number|Long|null);

                /** ReactionStatistics taskId */
                taskId?: (number|Long|null);

                /** ReactionStatistics causeReactionId */
                causeReactionId?: (number|Long|null);

                /** ReactionStatistics causeTaskId */
                causeTaskId?: (number|Long|null);

                /** ReactionStatistics emitted */
                emitted?: (number|Long|null);

                /** ReactionStatistics started */
                started?: (number|Long|null);

                /** ReactionStatistics finished */
                finished?: (number|Long|null);
            }

            /** Represents a ReactionStatistics. */
            class ReactionStatistics implements IReactionStatistics {

                /**
                 * Constructs a new ReactionStatistics.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nuclear.IReactionStatistics);

                /** ReactionStatistics name. */
                public name: string;

                /** ReactionStatistics triggerName. */
                public triggerName: string;

                /** ReactionStatistics functionName. */
                public functionName: string;

                /** ReactionStatistics reactionId. */
                public reactionId: (number|Long);

                /** ReactionStatistics taskId. */
                public taskId: (number|Long);

                /** ReactionStatistics causeReactionId. */
                public causeReactionId: (number|Long);

                /** ReactionStatistics causeTaskId. */
                public causeTaskId: (number|Long);

                /** ReactionStatistics emitted. */
                public emitted: (number|Long);

                /** ReactionStatistics started. */
                public started: (number|Long);

                /** ReactionStatistics finished. */
                public finished: (number|Long);

                /**
                 * Creates a new ReactionStatistics instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ReactionStatistics instance
                 */
                public static create(properties?: message.support.nuclear.IReactionStatistics): message.support.nuclear.ReactionStatistics;

                /**
                 * Encodes the specified ReactionStatistics message. Does not implicitly {@link message.support.nuclear.ReactionStatistics.verify|verify} messages.
                 * @param message ReactionStatistics message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nuclear.IReactionStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReactionStatistics message, length delimited. Does not implicitly {@link message.support.nuclear.ReactionStatistics.verify|verify} messages.
                 * @param message ReactionStatistics message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nuclear.IReactionStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReactionStatistics message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ReactionStatistics
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nuclear.ReactionStatistics;

                /**
                 * Decodes a ReactionStatistics message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ReactionStatistics
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nuclear.ReactionStatistics;

                /**
                 * Verifies a ReactionStatistics message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReactionStatistics message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReactionStatistics
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nuclear.ReactionStatistics;

                /**
                 * Creates a plain object from a ReactionStatistics message. Also converts values to other types if specified.
                 * @param message ReactionStatistics
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nuclear.ReactionStatistics, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReactionStatistics to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace nusight. */
        namespace nusight {

            /** Properties of a Command. */
            interface ICommand {

                /** Command command */
                command?: (string|null);
            }

            /** Represents a Command. */
            class Command implements ICommand {

                /**
                 * Constructs a new Command.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.ICommand);

                /** Command command. */
                public command: string;

                /**
                 * Creates a new Command instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Command instance
                 */
                public static create(properties?: message.support.nusight.ICommand): message.support.nusight.Command;

                /**
                 * Encodes the specified Command message. Does not implicitly {@link message.support.nusight.Command.verify|verify} messages.
                 * @param message Command message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.ICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Command message, length delimited. Does not implicitly {@link message.support.nusight.Command.verify|verify} messages.
                 * @param message Command message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.ICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Command message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.Command;

                /**
                 * Decodes a Command message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Command
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.Command;

                /**
                 * Verifies a Command message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Command message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Command
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.Command;

                /**
                 * Creates a plain object from a Command message. Also converts values to other types if specified.
                 * @param message Command
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.Command, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Command to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DataPoint. */
            interface IDataPoint {

                /** DataPoint label */
                label?: (string|null);

                /** DataPoint value */
                value?: (number[]|null);

                /** DataPoint type */
                type?: (message.support.nusight.DataPoint.Type|null);
            }

            /** Represents a DataPoint. */
            class DataPoint implements IDataPoint {

                /**
                 * Constructs a new DataPoint.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IDataPoint);

                /** DataPoint label. */
                public label: string;

                /** DataPoint value. */
                public value: number[];

                /** DataPoint type. */
                public type: message.support.nusight.DataPoint.Type;

                /**
                 * Creates a new DataPoint instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DataPoint instance
                 */
                public static create(properties?: message.support.nusight.IDataPoint): message.support.nusight.DataPoint;

                /**
                 * Encodes the specified DataPoint message. Does not implicitly {@link message.support.nusight.DataPoint.verify|verify} messages.
                 * @param message DataPoint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IDataPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DataPoint message, length delimited. Does not implicitly {@link message.support.nusight.DataPoint.verify|verify} messages.
                 * @param message DataPoint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IDataPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DataPoint message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DataPoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.DataPoint;

                /**
                 * Decodes a DataPoint message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DataPoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.DataPoint;

                /**
                 * Verifies a DataPoint message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DataPoint message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DataPoint
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.DataPoint;

                /**
                 * Creates a plain object from a DataPoint message. Also converts values to other types if specified.
                 * @param message DataPoint
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.DataPoint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DataPoint to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DataPoint {

                /**
                 * The represents the type of data
                 * NOTE: This should not describe how to display the data, as that should be done client-side.
                 */
                enum Type {
                    FLOAT_LIST = 0,
                    ROTATION_3D = 2
                }
            }

            /** Properties of a DrawObject. */
            interface IDrawObject {

                /** DrawObject shape */
                shape?: (message.support.nusight.DrawObject.Shape|null);

                /** DrawObject name */
                name?: (string|null);

                /** DrawObject position */
                position?: (Ivec3|null);

                /** DrawObject direction */
                direction?: (Ivec3|null);

                /** DrawObject target */
                target?: (Ivec3|null);

                /** DrawObject width */
                width?: (number|null);

                /** DrawObject height */
                height?: (number|null);

                /** DrawObject rotation */
                rotation?: (Ivec3|null);

                /** DrawObject colour */
                colour?: (Ivec3|null);

                /** DrawObject radius */
                radius?: (number|null);

                /** DrawObject topRadius */
                topRadius?: (number|null);

                /** DrawObject bottomRadius */
                bottomRadius?: (number|null);

                /** DrawObject vertices */
                vertices?: (Ivec3[]|null);

                /** DrawObject path */
                path?: (message.support.nusight.DrawObject.IPath[]|null);

                /** DrawObject faces */
                faces?: (number|null);

                /** DrawObject lineWidth */
                lineWidth?: (number|null);

                /** DrawObject length */
                length?: (number|null);

                /** DrawObject depth */
                depth?: (number|null);

                /** DrawObject fill */
                fill?: (boolean|null);

                /** DrawObject timeout */
                timeout?: (number|null);
            }

            /** Represents a DrawObject. */
            class DrawObject implements IDrawObject {

                /**
                 * Constructs a new DrawObject.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IDrawObject);

                /** DrawObject shape. */
                public shape: message.support.nusight.DrawObject.Shape;

                /** DrawObject name. */
                public name: string;

                /** DrawObject position. */
                public position?: (Ivec3|null);

                /** DrawObject direction. */
                public direction?: (Ivec3|null);

                /** DrawObject target. */
                public target?: (Ivec3|null);

                /** DrawObject width. */
                public width: number;

                /** DrawObject height. */
                public height: number;

                /** DrawObject rotation. */
                public rotation?: (Ivec3|null);

                /** DrawObject colour. */
                public colour?: (Ivec3|null);

                /** DrawObject radius. */
                public radius: number;

                /** DrawObject topRadius. */
                public topRadius: number;

                /** DrawObject bottomRadius. */
                public bottomRadius: number;

                /** DrawObject vertices. */
                public vertices: Ivec3[];

                /** DrawObject path. */
                public path: message.support.nusight.DrawObject.IPath[];

                /** DrawObject faces. */
                public faces: number;

                /** DrawObject lineWidth. */
                public lineWidth: number;

                /** DrawObject length. */
                public length: number;

                /** DrawObject depth. */
                public depth: number;

                /** DrawObject fill. */
                public fill: boolean;

                /** DrawObject timeout. */
                public timeout: number;

                /**
                 * Creates a new DrawObject instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DrawObject instance
                 */
                public static create(properties?: message.support.nusight.IDrawObject): message.support.nusight.DrawObject;

                /**
                 * Encodes the specified DrawObject message. Does not implicitly {@link message.support.nusight.DrawObject.verify|verify} messages.
                 * @param message DrawObject message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IDrawObject, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrawObject message, length delimited. Does not implicitly {@link message.support.nusight.DrawObject.verify|verify} messages.
                 * @param message DrawObject message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IDrawObject, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrawObject message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DrawObject
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.DrawObject;

                /**
                 * Decodes a DrawObject message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DrawObject
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.DrawObject;

                /**
                 * Verifies a DrawObject message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DrawObject message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DrawObject
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.DrawObject;

                /**
                 * Creates a plain object from a DrawObject message. Also converts values to other types if specified.
                 * @param message DrawObject
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.DrawObject, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrawObject to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DrawObject {

                /** Shape enum. */
                enum Shape {
                    UNKNOWN = 0,
                    ARROW = 1,
                    BOX = 2,
                    CIRCLE = 3,
                    CYLINDER = 4,
                    POLYLINE = 5,
                    PYRAMID = 6,
                    RECTANGLE = 7,
                    SPHERE = 8
                }

                /** Properties of a Path. */
                interface IPath {

                    /** Path position */
                    position?: (Ivec2|null);

                    /** Path parentIndex */
                    parentIndex?: (number|null);
                }

                /** Represents a Path. */
                class Path implements IPath {

                    /**
                     * Constructs a new Path.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.support.nusight.DrawObject.IPath);

                    /** Path position. */
                    public position?: (Ivec2|null);

                    /** Path parentIndex. */
                    public parentIndex: number;

                    /**
                     * Creates a new Path instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Path instance
                     */
                    public static create(properties?: message.support.nusight.DrawObject.IPath): message.support.nusight.DrawObject.Path;

                    /**
                     * Encodes the specified Path message. Does not implicitly {@link message.support.nusight.DrawObject.Path.verify|verify} messages.
                     * @param message Path message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.support.nusight.DrawObject.IPath, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Path message, length delimited. Does not implicitly {@link message.support.nusight.DrawObject.Path.verify|verify} messages.
                     * @param message Path message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.support.nusight.DrawObject.IPath, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Path message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Path
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.DrawObject.Path;

                    /**
                     * Decodes a Path message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Path
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.DrawObject.Path;

                    /**
                     * Verifies a Path message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Path message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Path
                     */
                    public static fromObject(object: { [k: string]: any }): message.support.nusight.DrawObject.Path;

                    /**
                     * Creates a plain object from a Path message. Also converts values to other types if specified.
                     * @param message Path
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.support.nusight.DrawObject.Path, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Path to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a DrawObjects. */
            interface IDrawObjects {

                /** DrawObjects objects */
                objects?: (message.support.nusight.IDrawObject[]|null);
            }

            /** Represents a DrawObjects. */
            class DrawObjects implements IDrawObjects {

                /**
                 * Constructs a new DrawObjects.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IDrawObjects);

                /** DrawObjects objects. */
                public objects: message.support.nusight.IDrawObject[];

                /**
                 * Creates a new DrawObjects instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DrawObjects instance
                 */
                public static create(properties?: message.support.nusight.IDrawObjects): message.support.nusight.DrawObjects;

                /**
                 * Encodes the specified DrawObjects message. Does not implicitly {@link message.support.nusight.DrawObjects.verify|verify} messages.
                 * @param message DrawObjects message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IDrawObjects, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrawObjects message, length delimited. Does not implicitly {@link message.support.nusight.DrawObjects.verify|verify} messages.
                 * @param message DrawObjects message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IDrawObjects, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrawObjects message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DrawObjects
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.DrawObjects;

                /**
                 * Decodes a DrawObjects message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DrawObjects
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.DrawObjects;

                /**
                 * Verifies a DrawObjects message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DrawObjects message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DrawObjects
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.DrawObjects;

                /**
                 * Creates a plain object from a DrawObjects message. Also converts values to other types if specified.
                 * @param message DrawObjects
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.DrawObjects, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrawObjects to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Overview. */
            interface IOverview {

                /** Overview timestamp */
                timestamp?: (google.protobuf.ITimestamp|null);

                /** Overview robotId */
                robotId?: (number|null);

                /** Overview roleName */
                roleName?: (string|null);

                /** Overview battery */
                battery?: (number|null);

                /** Overview voltage */
                voltage?: (number|null);

                /** Overview behaviourState */
                behaviourState?: (message.behaviour.Behaviour.State|null);

                /** Overview robotPosition */
                robotPosition?: (Ifvec3|null);

                /** Overview robotPositionCovariance */
                robotPositionCovariance?: (Ifmat3|null);

                /** Overview ballPosition */
                ballPosition?: (Ifvec2|null);

                /** Overview ballPositionCovariance */
                ballPositionCovariance?: (Ifmat2|null);

                /** Overview kickTarget */
                kickTarget?: (Ifvec2|null);

                /** Overview gameMode */
                gameMode?: (message.input.GameState.Data.Mode|null);

                /** Overview gamePhase */
                gamePhase?: (message.input.GameState.Data.Phase|null);

                /** Overview penaltyReason */
                penaltyReason?: (message.input.GameState.Data.PenaltyReason|null);

                /** Overview lastCameraImage */
                lastCameraImage?: (google.protobuf.ITimestamp|null);

                /** Overview lastSeenBall */
                lastSeenBall?: (google.protobuf.ITimestamp|null);

                /** Overview lastSeenGoal */
                lastSeenGoal?: (google.protobuf.ITimestamp|null);

                /** Overview walkPathPlan */
                walkPathPlan?: (Ifvec2[]|null);

                /** Overview walkCommand */
                walkCommand?: (Ifvec3|null);
            }

            /** Represents an Overview. */
            class Overview implements IOverview {

                /**
                 * Constructs a new Overview.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IOverview);

                /** Overview timestamp. */
                public timestamp?: (google.protobuf.ITimestamp|null);

                /** Overview robotId. */
                public robotId: number;

                /** Overview roleName. */
                public roleName: string;

                /** Overview battery. */
                public battery: number;

                /** Overview voltage. */
                public voltage: number;

                /** Overview behaviourState. */
                public behaviourState: message.behaviour.Behaviour.State;

                /** Overview robotPosition. */
                public robotPosition?: (Ifvec3|null);

                /** Overview robotPositionCovariance. */
                public robotPositionCovariance?: (Ifmat3|null);

                /** Overview ballPosition. */
                public ballPosition?: (Ifvec2|null);

                /** Overview ballPositionCovariance. */
                public ballPositionCovariance?: (Ifmat2|null);

                /** Overview kickTarget. */
                public kickTarget?: (Ifvec2|null);

                /** Overview gameMode. */
                public gameMode: message.input.GameState.Data.Mode;

                /** Overview gamePhase. */
                public gamePhase: message.input.GameState.Data.Phase;

                /** Overview penaltyReason. */
                public penaltyReason: message.input.GameState.Data.PenaltyReason;

                /** Overview lastCameraImage. */
                public lastCameraImage?: (google.protobuf.ITimestamp|null);

                /** Overview lastSeenBall. */
                public lastSeenBall?: (google.protobuf.ITimestamp|null);

                /** Overview lastSeenGoal. */
                public lastSeenGoal?: (google.protobuf.ITimestamp|null);

                /** Overview walkPathPlan. */
                public walkPathPlan: Ifvec2[];

                /** Overview walkCommand. */
                public walkCommand?: (Ifvec3|null);

                /**
                 * Creates a new Overview instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Overview instance
                 */
                public static create(properties?: message.support.nusight.IOverview): message.support.nusight.Overview;

                /**
                 * Encodes the specified Overview message. Does not implicitly {@link message.support.nusight.Overview.verify|verify} messages.
                 * @param message Overview message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IOverview, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Overview message, length delimited. Does not implicitly {@link message.support.nusight.Overview.verify|verify} messages.
                 * @param message Overview message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IOverview, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Overview message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Overview
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.Overview;

                /**
                 * Decodes an Overview message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Overview
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.Overview;

                /**
                 * Verifies an Overview message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Overview message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Overview
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.Overview;

                /**
                 * Creates a plain object from an Overview message. Also converts values to other types if specified.
                 * @param message Overview
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.Overview, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Overview to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Ping. */
            interface IPing {

                /** Ping time */
                time?: (number|Long|null);
            }

            /** Represents a Ping. */
            class Ping implements IPing {

                /**
                 * Constructs a new Ping.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IPing);

                /** Ping time. */
                public time: (number|Long);

                /**
                 * Creates a new Ping instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Ping instance
                 */
                public static create(properties?: message.support.nusight.IPing): message.support.nusight.Ping;

                /**
                 * Encodes the specified Ping message. Does not implicitly {@link message.support.nusight.Ping.verify|verify} messages.
                 * @param message Ping message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Ping message, length delimited. Does not implicitly {@link message.support.nusight.Ping.verify|verify} messages.
                 * @param message Ping message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IPing, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Ping message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Ping
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.Ping;

                /**
                 * Decodes a Ping message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Ping
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.Ping;

                /**
                 * Verifies a Ping message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Ping message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Ping
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.Ping;

                /**
                 * Creates a plain object from a Ping message. Also converts values to other types if specified.
                 * @param message Ping
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.Ping, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Ping to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ReactionHandles. */
            interface IReactionHandles {

                /** ReactionHandles handles */
                handles?: (message.support.nusight.ReactionHandles.IHandle[]|null);
            }

            /** Represents a ReactionHandles. */
            class ReactionHandles implements IReactionHandles {

                /**
                 * Constructs a new ReactionHandles.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.nusight.IReactionHandles);

                /** ReactionHandles handles. */
                public handles: message.support.nusight.ReactionHandles.IHandle[];

                /**
                 * Creates a new ReactionHandles instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ReactionHandles instance
                 */
                public static create(properties?: message.support.nusight.IReactionHandles): message.support.nusight.ReactionHandles;

                /**
                 * Encodes the specified ReactionHandles message. Does not implicitly {@link message.support.nusight.ReactionHandles.verify|verify} messages.
                 * @param message ReactionHandles message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.nusight.IReactionHandles, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReactionHandles message, length delimited. Does not implicitly {@link message.support.nusight.ReactionHandles.verify|verify} messages.
                 * @param message ReactionHandles message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.nusight.IReactionHandles, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReactionHandles message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ReactionHandles
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.ReactionHandles;

                /**
                 * Decodes a ReactionHandles message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ReactionHandles
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.ReactionHandles;

                /**
                 * Verifies a ReactionHandles message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReactionHandles message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReactionHandles
                 */
                public static fromObject(object: { [k: string]: any }): message.support.nusight.ReactionHandles;

                /**
                 * Creates a plain object from a ReactionHandles message. Also converts values to other types if specified.
                 * @param message ReactionHandles
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.nusight.ReactionHandles, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReactionHandles to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ReactionHandles {

                /** Properties of a Handle. */
                interface IHandle {

                    /** Handle type */
                    type?: (string|null);

                    /** Handle enabled */
                    enabled?: (boolean|null);
                }

                /** Represents a Handle. */
                class Handle implements IHandle {

                    /**
                     * Constructs a new Handle.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.support.nusight.ReactionHandles.IHandle);

                    /** Handle type. */
                    public type: string;

                    /** Handle enabled. */
                    public enabled: boolean;

                    /**
                     * Creates a new Handle instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Handle instance
                     */
                    public static create(properties?: message.support.nusight.ReactionHandles.IHandle): message.support.nusight.ReactionHandles.Handle;

                    /**
                     * Encodes the specified Handle message. Does not implicitly {@link message.support.nusight.ReactionHandles.Handle.verify|verify} messages.
                     * @param message Handle message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.support.nusight.ReactionHandles.IHandle, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Handle message, length delimited. Does not implicitly {@link message.support.nusight.ReactionHandles.Handle.verify|verify} messages.
                     * @param message Handle message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.support.nusight.ReactionHandles.IHandle, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Handle message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Handle
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.nusight.ReactionHandles.Handle;

                    /**
                     * Decodes a Handle message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Handle
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.nusight.ReactionHandles.Handle;

                    /**
                     * Verifies a Handle message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Handle message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Handle
                     */
                    public static fromObject(object: { [k: string]: any }): message.support.nusight.ReactionHandles.Handle;

                    /**
                     * Creates a plain object from a Handle message. Also converts values to other types if specified.
                     * @param message Handle
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.support.nusight.ReactionHandles.Handle, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Handle to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** Namespace optimisation. */
        namespace optimisation {

            /** Properties of a RegisterOptimisation. */
            interface IRegisterOptimisation {

                /** RegisterOptimisation group */
                group?: (string|null);

                /** RegisterOptimisation network */
                network?: (boolean|null);

                /** RegisterOptimisation parameters */
                parameters?: (message.support.optimisation.IOptimiserParameters|null);
            }

            /** Represents a RegisterOptimisation. */
            class RegisterOptimisation implements IRegisterOptimisation {

                /**
                 * Constructs a new RegisterOptimisation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IRegisterOptimisation);

                /** RegisterOptimisation group. */
                public group: string;

                /** RegisterOptimisation network. */
                public network: boolean;

                /** RegisterOptimisation parameters. */
                public parameters?: (message.support.optimisation.IOptimiserParameters|null);

                /**
                 * Creates a new RegisterOptimisation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RegisterOptimisation instance
                 */
                public static create(properties?: message.support.optimisation.IRegisterOptimisation): message.support.optimisation.RegisterOptimisation;

                /**
                 * Encodes the specified RegisterOptimisation message. Does not implicitly {@link message.support.optimisation.RegisterOptimisation.verify|verify} messages.
                 * @param message RegisterOptimisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IRegisterOptimisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RegisterOptimisation message, length delimited. Does not implicitly {@link message.support.optimisation.RegisterOptimisation.verify|verify} messages.
                 * @param message RegisterOptimisation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IRegisterOptimisation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RegisterOptimisation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RegisterOptimisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.RegisterOptimisation;

                /**
                 * Decodes a RegisterOptimisation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RegisterOptimisation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.RegisterOptimisation;

                /**
                 * Verifies a RegisterOptimisation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RegisterOptimisation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RegisterOptimisation
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.RegisterOptimisation;

                /**
                 * Creates a plain object from a RegisterOptimisation message. Also converts values to other types if specified.
                 * @param message RegisterOptimisation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.RegisterOptimisation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RegisterOptimisation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RequestParameters. */
            interface IRequestParameters {

                /** RequestParameters group */
                group?: (string|null);

                /** RequestParameters nSamples */
                nSamples?: (number|null);
            }

            /** Represents a RequestParameters. */
            class RequestParameters implements IRequestParameters {

                /**
                 * Constructs a new RequestParameters.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IRequestParameters);

                /** RequestParameters group. */
                public group: string;

                /** RequestParameters nSamples. */
                public nSamples: number;

                /**
                 * Creates a new RequestParameters instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RequestParameters instance
                 */
                public static create(properties?: message.support.optimisation.IRequestParameters): message.support.optimisation.RequestParameters;

                /**
                 * Encodes the specified RequestParameters message. Does not implicitly {@link message.support.optimisation.RequestParameters.verify|verify} messages.
                 * @param message RequestParameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IRequestParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RequestParameters message, length delimited. Does not implicitly {@link message.support.optimisation.RequestParameters.verify|verify} messages.
                 * @param message RequestParameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IRequestParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RequestParameters message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RequestParameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.RequestParameters;

                /**
                 * Decodes a RequestParameters message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RequestParameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.RequestParameters;

                /**
                 * Verifies a RequestParameters message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RequestParameters message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RequestParameters
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.RequestParameters;

                /**
                 * Creates a plain object from a RequestParameters message. Also converts values to other types if specified.
                 * @param message RequestParameters
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.RequestParameters, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RequestParameters to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Parameters. */
            interface IParameters {

                /** Parameters group */
                group?: (string|null);

                /** Parameters generation */
                generation?: (number|null);

                /** Parameters samples */
                samples?: (Imat|null);

                /** Parameters covariance */
                covariance?: (Imat|null);
            }

            /** Represents a Parameters. */
            class Parameters implements IParameters {

                /**
                 * Constructs a new Parameters.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IParameters);

                /** Parameters group. */
                public group: string;

                /** Parameters generation. */
                public generation: number;

                /** Parameters samples. */
                public samples?: (Imat|null);

                /** Parameters covariance. */
                public covariance?: (Imat|null);

                /**
                 * Creates a new Parameters instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Parameters instance
                 */
                public static create(properties?: message.support.optimisation.IParameters): message.support.optimisation.Parameters;

                /**
                 * Encodes the specified Parameters message. Does not implicitly {@link message.support.optimisation.Parameters.verify|verify} messages.
                 * @param message Parameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Parameters message, length delimited. Does not implicitly {@link message.support.optimisation.Parameters.verify|verify} messages.
                 * @param message Parameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Parameters message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Parameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.Parameters;

                /**
                 * Decodes a Parameters message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Parameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.Parameters;

                /**
                 * Verifies a Parameters message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Parameters message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Parameters
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.Parameters;

                /**
                 * Creates a plain object from a Parameters message. Also converts values to other types if specified.
                 * @param message Parameters
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.Parameters, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Parameters to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an OptimiserEstimate. */
            interface IOptimiserEstimate {

                /** OptimiserEstimate generation */
                generation?: (number|null);

                /** OptimiserEstimate estimate */
                estimate?: (Ivec|null);

                /** OptimiserEstimate covariance */
                covariance?: (Imat|null);
            }

            /** Represents an OptimiserEstimate. */
            class OptimiserEstimate implements IOptimiserEstimate {

                /**
                 * Constructs a new OptimiserEstimate.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IOptimiserEstimate);

                /** OptimiserEstimate generation. */
                public generation: number;

                /** OptimiserEstimate estimate. */
                public estimate?: (Ivec|null);

                /** OptimiserEstimate covariance. */
                public covariance?: (Imat|null);

                /**
                 * Creates a new OptimiserEstimate instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OptimiserEstimate instance
                 */
                public static create(properties?: message.support.optimisation.IOptimiserEstimate): message.support.optimisation.OptimiserEstimate;

                /**
                 * Encodes the specified OptimiserEstimate message. Does not implicitly {@link message.support.optimisation.OptimiserEstimate.verify|verify} messages.
                 * @param message OptimiserEstimate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IOptimiserEstimate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OptimiserEstimate message, length delimited. Does not implicitly {@link message.support.optimisation.OptimiserEstimate.verify|verify} messages.
                 * @param message OptimiserEstimate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IOptimiserEstimate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an OptimiserEstimate message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OptimiserEstimate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.OptimiserEstimate;

                /**
                 * Decodes an OptimiserEstimate message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OptimiserEstimate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.OptimiserEstimate;

                /**
                 * Verifies an OptimiserEstimate message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OptimiserEstimate message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OptimiserEstimate
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.OptimiserEstimate;

                /**
                 * Creates a plain object from an OptimiserEstimate message. Also converts values to other types if specified.
                 * @param message OptimiserEstimate
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.OptimiserEstimate, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OptimiserEstimate to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an OptimiserParameters. */
            interface IOptimiserParameters {

                /** OptimiserParameters initial */
                initial?: (message.support.optimisation.IOptimiserEstimate|null);

                /** OptimiserParameters upperBound */
                upperBound?: (Ivec|null);

                /** OptimiserParameters lowerBound */
                lowerBound?: (Ivec|null);

                /** OptimiserParameters batchSize */
                batchSize?: (number|null);
            }

            /** Represents an OptimiserParameters. */
            class OptimiserParameters implements IOptimiserParameters {

                /**
                 * Constructs a new OptimiserParameters.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IOptimiserParameters);

                /** OptimiserParameters initial. */
                public initial?: (message.support.optimisation.IOptimiserEstimate|null);

                /** OptimiserParameters upperBound. */
                public upperBound?: (Ivec|null);

                /** OptimiserParameters lowerBound. */
                public lowerBound?: (Ivec|null);

                /** OptimiserParameters batchSize. */
                public batchSize: number;

                /**
                 * Creates a new OptimiserParameters instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OptimiserParameters instance
                 */
                public static create(properties?: message.support.optimisation.IOptimiserParameters): message.support.optimisation.OptimiserParameters;

                /**
                 * Encodes the specified OptimiserParameters message. Does not implicitly {@link message.support.optimisation.OptimiserParameters.verify|verify} messages.
                 * @param message OptimiserParameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IOptimiserParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OptimiserParameters message, length delimited. Does not implicitly {@link message.support.optimisation.OptimiserParameters.verify|verify} messages.
                 * @param message OptimiserParameters message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IOptimiserParameters, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an OptimiserParameters message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OptimiserParameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.OptimiserParameters;

                /**
                 * Decodes an OptimiserParameters message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OptimiserParameters
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.OptimiserParameters;

                /**
                 * Verifies an OptimiserParameters message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OptimiserParameters message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OptimiserParameters
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.OptimiserParameters;

                /**
                 * Creates a plain object from an OptimiserParameters message. Also converts values to other types if specified.
                 * @param message OptimiserParameters
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.OptimiserParameters, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OptimiserParameters to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Episode. */
            interface IEpisode {

                /** Episode group */
                group?: (string|null);

                /** Episode generation */
                generation?: (number|null);

                /** Episode values */
                values?: (Ivec|null);

                /** Episode covariance */
                covariance?: (Imat|null);

                /** Episode fitness */
                fitness?: (message.support.optimisation.Episode.IFitness[]|null);
            }

            /** Represents an Episode. */
            class Episode implements IEpisode {

                /**
                 * Constructs a new Episode.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IEpisode);

                /** Episode group. */
                public group: string;

                /** Episode generation. */
                public generation: number;

                /** Episode values. */
                public values?: (Ivec|null);

                /** Episode covariance. */
                public covariance?: (Imat|null);

                /** Episode fitness. */
                public fitness: message.support.optimisation.Episode.IFitness[];

                /**
                 * Creates a new Episode instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Episode instance
                 */
                public static create(properties?: message.support.optimisation.IEpisode): message.support.optimisation.Episode;

                /**
                 * Encodes the specified Episode message. Does not implicitly {@link message.support.optimisation.Episode.verify|verify} messages.
                 * @param message Episode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IEpisode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Episode message, length delimited. Does not implicitly {@link message.support.optimisation.Episode.verify|verify} messages.
                 * @param message Episode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IEpisode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Episode message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Episode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.Episode;

                /**
                 * Decodes an Episode message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Episode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.Episode;

                /**
                 * Verifies an Episode message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Episode message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Episode
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.Episode;

                /**
                 * Creates a plain object from an Episode message. Also converts values to other types if specified.
                 * @param message Episode
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.Episode, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Episode to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Episode {

                /** Properties of a Fitness. */
                interface IFitness {

                    /** Fitness fitness */
                    fitness?: (number|null);

                    /** Fitness weight */
                    weight?: (number|null);
                }

                /** Represents a Fitness. */
                class Fitness implements IFitness {

                    /**
                     * Constructs a new Fitness.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: message.support.optimisation.Episode.IFitness);

                    /** Fitness fitness. */
                    public fitness: number;

                    /** Fitness weight. */
                    public weight: number;

                    /**
                     * Creates a new Fitness instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Fitness instance
                     */
                    public static create(properties?: message.support.optimisation.Episode.IFitness): message.support.optimisation.Episode.Fitness;

                    /**
                     * Encodes the specified Fitness message. Does not implicitly {@link message.support.optimisation.Episode.Fitness.verify|verify} messages.
                     * @param message Fitness message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: message.support.optimisation.Episode.IFitness, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Fitness message, length delimited. Does not implicitly {@link message.support.optimisation.Episode.Fitness.verify|verify} messages.
                     * @param message Fitness message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: message.support.optimisation.Episode.IFitness, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Fitness message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Fitness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.Episode.Fitness;

                    /**
                     * Decodes a Fitness message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Fitness
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.Episode.Fitness;

                    /**
                     * Verifies a Fitness message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fitness message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fitness
                     */
                    public static fromObject(object: { [k: string]: any }): message.support.optimisation.Episode.Fitness;

                    /**
                     * Creates a plain object from a Fitness message. Also converts values to other types if specified.
                     * @param message Fitness
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: message.support.optimisation.Episode.Fitness, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fitness to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an Estimate. */
            interface IEstimate {

                /** Estimate group */
                group?: (string|null);

                /** Estimate generation */
                generation?: (number|null);

                /** Estimate values */
                values?: (Ivec|null);

                /** Estimate covariance */
                covariance?: (Imat|null);

                /** Estimate estimateEpisode */
                estimateEpisode?: (message.support.optimisation.IEpisode[]|null);

                /** Estimate episode */
                episode?: (message.support.optimisation.IEpisode[]|null);
            }

            /** Represents an Estimate. */
            class Estimate implements IEstimate {

                /**
                 * Constructs a new Estimate.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.support.optimisation.IEstimate);

                /** Estimate group. */
                public group: string;

                /** Estimate generation. */
                public generation: number;

                /** Estimate values. */
                public values?: (Ivec|null);

                /** Estimate covariance. */
                public covariance?: (Imat|null);

                /** Estimate estimateEpisode. */
                public estimateEpisode: message.support.optimisation.IEpisode[];

                /** Estimate episode. */
                public episode: message.support.optimisation.IEpisode[];

                /**
                 * Creates a new Estimate instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Estimate instance
                 */
                public static create(properties?: message.support.optimisation.IEstimate): message.support.optimisation.Estimate;

                /**
                 * Encodes the specified Estimate message. Does not implicitly {@link message.support.optimisation.Estimate.verify|verify} messages.
                 * @param message Estimate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.support.optimisation.IEstimate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Estimate message, length delimited. Does not implicitly {@link message.support.optimisation.Estimate.verify|verify} messages.
                 * @param message Estimate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.support.optimisation.IEstimate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Estimate message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Estimate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.optimisation.Estimate;

                /**
                 * Decodes an Estimate message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Estimate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.optimisation.Estimate;

                /**
                 * Verifies an Estimate message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Estimate message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Estimate
                 */
                public static fromObject(object: { [k: string]: any }): message.support.optimisation.Estimate;

                /**
                 * Creates a plain object from an Estimate message. Also converts values to other types if specified.
                 * @param message Estimate
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.support.optimisation.Estimate, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Estimate to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a SaveConfiguration. */
        interface ISaveConfiguration {

            /** SaveConfiguration path */
            path?: (string|null);

            /** SaveConfiguration config */
            config?: (string|null);
        }

        /** Represents a SaveConfiguration. */
        class SaveConfiguration implements ISaveConfiguration {

            /**
             * Constructs a new SaveConfiguration.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.support.ISaveConfiguration);

            /** SaveConfiguration path. */
            public path: string;

            /** SaveConfiguration config. */
            public config: string;

            /**
             * Creates a new SaveConfiguration instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SaveConfiguration instance
             */
            public static create(properties?: message.support.ISaveConfiguration): message.support.SaveConfiguration;

            /**
             * Encodes the specified SaveConfiguration message. Does not implicitly {@link message.support.SaveConfiguration.verify|verify} messages.
             * @param message SaveConfiguration message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.support.ISaveConfiguration, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SaveConfiguration message, length delimited. Does not implicitly {@link message.support.SaveConfiguration.verify|verify} messages.
             * @param message SaveConfiguration message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.support.ISaveConfiguration, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SaveConfiguration message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SaveConfiguration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.SaveConfiguration;

            /**
             * Decodes a SaveConfiguration message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SaveConfiguration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.SaveConfiguration;

            /**
             * Verifies a SaveConfiguration message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SaveConfiguration message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SaveConfiguration
             */
            public static fromObject(object: { [k: string]: any }): message.support.SaveConfiguration;

            /**
             * Creates a plain object from a SaveConfiguration message. Also converts values to other types if specified.
             * @param message SaveConfiguration
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.support.SaveConfiguration, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SaveConfiguration to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServoHealthTestData. */
        interface IServoHealthTestData {

            /** ServoHealthTestData state */
            state?: (message.support.ServoHealthTestData.State|null);

            /** ServoHealthTestData sensors */
            sensors?: (message.platform.darwin.IDarwinSensors|null);
        }

        /** Represents a ServoHealthTestData. */
        class ServoHealthTestData implements IServoHealthTestData {

            /**
             * Constructs a new ServoHealthTestData.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.support.IServoHealthTestData);

            /** ServoHealthTestData state. */
            public state: message.support.ServoHealthTestData.State;

            /** ServoHealthTestData sensors. */
            public sensors?: (message.platform.darwin.IDarwinSensors|null);

            /**
             * Creates a new ServoHealthTestData instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServoHealthTestData instance
             */
            public static create(properties?: message.support.IServoHealthTestData): message.support.ServoHealthTestData;

            /**
             * Encodes the specified ServoHealthTestData message. Does not implicitly {@link message.support.ServoHealthTestData.verify|verify} messages.
             * @param message ServoHealthTestData message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.support.IServoHealthTestData, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServoHealthTestData message, length delimited. Does not implicitly {@link message.support.ServoHealthTestData.verify|verify} messages.
             * @param message ServoHealthTestData message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.support.IServoHealthTestData, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServoHealthTestData message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServoHealthTestData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.support.ServoHealthTestData;

            /**
             * Decodes a ServoHealthTestData message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServoHealthTestData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.support.ServoHealthTestData;

            /**
             * Verifies a ServoHealthTestData message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServoHealthTestData message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServoHealthTestData
             */
            public static fromObject(object: { [k: string]: any }): message.support.ServoHealthTestData;

            /**
             * Creates a plain object from a ServoHealthTestData message. Also converts values to other types if specified.
             * @param message ServoHealthTestData
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.support.ServoHealthTestData, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServoHealthTestData to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace ServoHealthTestData {

            /** State enum. */
            enum State {
                INITIALISE = 0,
                MOVE_1 = 1,
                ELBOW = 2,
                MOVE_2 = 3,
                SHOULDER_PITCH = 4,
                SHOULDER_MOVE_1 = 5,
                SHOULDER_ROLL = 6,
                MOVE_3 = 7,
                HEAD_PITCH = 8,
                MOVE_4 = 9,
                HEAD_YAW = 10,
                LAYDOWN = 11,
                HIP_ROLL = 12,
                HIP_MOVE_1 = 13,
                HIP_YAW = 14,
                HIP_MOVE_2 = 15,
                ANKLE_PITCH = 16,
                ANKLE_MOVE = 17,
                ANKLE_ROLL = 18,
                KNEE_MOVE = 19,
                KNEE = 20,
                KNEE_MOVE_2 = 21,
                HIP_PITCH = 22,
                LAYDOWN_2 = 23,
                FINISHED = 24
            }
        }
    }

    /** Namespace vision. */
    namespace vision {

        /** Properties of a ClassifiedImage. */
        interface IClassifiedImage {

            /** ClassifiedImage sensors */
            sensors?: (message.input.ISensors|null);

            /** ClassifiedImage image */
            image?: (message.input.IImage|null);

            /** ClassifiedImage dimensions */
            dimensions?: (Iuvec2|null);

            /** ClassifiedImage ballSeedPoints */
            ballSeedPoints?: (message.vision.ClassifiedImage.ISeedPoints[]|null);

            /** ClassifiedImage ballPoints */
            ballPoints?: (Iivec2[]|null);

            /** ClassifiedImage horizonNormal */
            horizonNormal?: (Ivec3|null);

            /** ClassifiedImage visualHorizon */
            visualHorizon?: (Iivec2[]|null);

            /** ClassifiedImage horizontalSegments */
            horizontalSegments?: (message.vision.ClassifiedImage.ISegment[]|null);

            /** ClassifiedImage verticalSegments */
            verticalSegments?: (message.vision.ClassifiedImage.ISegment[]|null);

            /** ClassifiedImage horizon */
            horizon?: (message.vision.ILine|null);
        }

        /** Represents a ClassifiedImage. */
        class ClassifiedImage implements IClassifiedImage {

            /**
             * Constructs a new ClassifiedImage.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IClassifiedImage);

            /** ClassifiedImage sensors. */
            public sensors?: (message.input.ISensors|null);

            /** ClassifiedImage image. */
            public image?: (message.input.IImage|null);

            /** ClassifiedImage dimensions. */
            public dimensions?: (Iuvec2|null);

            /** ClassifiedImage ballSeedPoints. */
            public ballSeedPoints: message.vision.ClassifiedImage.ISeedPoints[];

            /** ClassifiedImage ballPoints. */
            public ballPoints: Iivec2[];

            /** ClassifiedImage horizonNormal. */
            public horizonNormal?: (Ivec3|null);

            /** ClassifiedImage visualHorizon. */
            public visualHorizon: Iivec2[];

            /** ClassifiedImage horizontalSegments. */
            public horizontalSegments: message.vision.ClassifiedImage.ISegment[];

            /** ClassifiedImage verticalSegments. */
            public verticalSegments: message.vision.ClassifiedImage.ISegment[];

            /** ClassifiedImage horizon. */
            public horizon?: (message.vision.ILine|null);

            /**
             * Creates a new ClassifiedImage instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ClassifiedImage instance
             */
            public static create(properties?: message.vision.IClassifiedImage): message.vision.ClassifiedImage;

            /**
             * Encodes the specified ClassifiedImage message. Does not implicitly {@link message.vision.ClassifiedImage.verify|verify} messages.
             * @param message ClassifiedImage message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IClassifiedImage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ClassifiedImage message, length delimited. Does not implicitly {@link message.vision.ClassifiedImage.verify|verify} messages.
             * @param message ClassifiedImage message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IClassifiedImage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ClassifiedImage message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ClassifiedImage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.ClassifiedImage;

            /**
             * Decodes a ClassifiedImage message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ClassifiedImage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.ClassifiedImage;

            /**
             * Verifies a ClassifiedImage message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ClassifiedImage message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ClassifiedImage
             */
            public static fromObject(object: { [k: string]: any }): message.vision.ClassifiedImage;

            /**
             * Creates a plain object from a ClassifiedImage message. Also converts values to other types if specified.
             * @param message ClassifiedImage
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.ClassifiedImage, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ClassifiedImage to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace ClassifiedImage {

            /** SegmentClass enum. */
            enum SegmentClass {
                UNKNOWN_CLASS = 0,
                FIELD = 1,
                BALL = 2,
                GOAL = 3,
                LINE = 4,
                CYAN_TEAM = 5,
                MAGENTA_TEAM = 6
            }

            /** Properties of a Segment. */
            interface ISegment {

                /** Segment segmentClass */
                segmentClass?: (message.vision.ClassifiedImage.SegmentClass|null);

                /** Segment length */
                length?: (number|null);

                /** Segment subsample */
                subsample?: (number|null);

                /** Segment start */
                start?: (Iivec2|null);

                /** Segment end */
                end?: (Iivec2|null);

                /** Segment midpoint */
                midpoint?: (Iivec2|null);

                /** Segment previous */
                previous?: (number|null);

                /** Segment next */
                next?: (number|null);
            }

            /** Represents a Segment. */
            class Segment implements ISegment {

                /**
                 * Constructs a new Segment.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.ClassifiedImage.ISegment);

                /** Segment segmentClass. */
                public segmentClass: message.vision.ClassifiedImage.SegmentClass;

                /** Segment length. */
                public length: number;

                /** Segment subsample. */
                public subsample: number;

                /** Segment start. */
                public start?: (Iivec2|null);

                /** Segment end. */
                public end?: (Iivec2|null);

                /** Segment midpoint. */
                public midpoint?: (Iivec2|null);

                /** Segment previous. */
                public previous: number;

                /** Segment next. */
                public next: number;

                /**
                 * Creates a new Segment instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Segment instance
                 */
                public static create(properties?: message.vision.ClassifiedImage.ISegment): message.vision.ClassifiedImage.Segment;

                /**
                 * Encodes the specified Segment message. Does not implicitly {@link message.vision.ClassifiedImage.Segment.verify|verify} messages.
                 * @param message Segment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.ClassifiedImage.ISegment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Segment message, length delimited. Does not implicitly {@link message.vision.ClassifiedImage.Segment.verify|verify} messages.
                 * @param message Segment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.ClassifiedImage.ISegment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Segment message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Segment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.ClassifiedImage.Segment;

                /**
                 * Decodes a Segment message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Segment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.ClassifiedImage.Segment;

                /**
                 * Verifies a Segment message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Segment message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Segment
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.ClassifiedImage.Segment;

                /**
                 * Creates a plain object from a Segment message. Also converts values to other types if specified.
                 * @param message Segment
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.ClassifiedImage.Segment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Segment to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SeedPoints. */
            interface ISeedPoints {

                /** SeedPoints points */
                points?: (Iivec2[]|null);
            }

            /** Represents a SeedPoints. */
            class SeedPoints implements ISeedPoints {

                /**
                 * Constructs a new SeedPoints.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.ClassifiedImage.ISeedPoints);

                /** SeedPoints points. */
                public points: Iivec2[];

                /**
                 * Creates a new SeedPoints instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SeedPoints instance
                 */
                public static create(properties?: message.vision.ClassifiedImage.ISeedPoints): message.vision.ClassifiedImage.SeedPoints;

                /**
                 * Encodes the specified SeedPoints message. Does not implicitly {@link message.vision.ClassifiedImage.SeedPoints.verify|verify} messages.
                 * @param message SeedPoints message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.ClassifiedImage.ISeedPoints, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SeedPoints message, length delimited. Does not implicitly {@link message.vision.ClassifiedImage.SeedPoints.verify|verify} messages.
                 * @param message SeedPoints message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.ClassifiedImage.ISeedPoints, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SeedPoints message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SeedPoints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.ClassifiedImage.SeedPoints;

                /**
                 * Decodes a SeedPoints message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SeedPoints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.ClassifiedImage.SeedPoints;

                /**
                 * Verifies a SeedPoints message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SeedPoints message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SeedPoints
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.ClassifiedImage.SeedPoints;

                /**
                 * Creates a plain object from a SeedPoints message. Also converts values to other types if specified.
                 * @param message SeedPoints
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.ClassifiedImage.SeedPoints, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SeedPoints to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a LookUpTable. */
        interface ILookUpTable {

            /** LookUpTable table */
            table?: (Uint8Array|null);

            /** LookUpTable bitsY */
            bitsY?: (number|null);

            /** LookUpTable bitsCb */
            bitsCb?: (number|null);

            /** LookUpTable bitsCr */
            bitsCr?: (number|null);
        }

        /** Represents a LookUpTable. */
        class LookUpTable implements ILookUpTable {

            /**
             * Constructs a new LookUpTable.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.ILookUpTable);

            /** LookUpTable table. */
            public table: Uint8Array;

            /** LookUpTable bitsY. */
            public bitsY: number;

            /** LookUpTable bitsCb. */
            public bitsCb: number;

            /** LookUpTable bitsCr. */
            public bitsCr: number;

            /**
             * Creates a new LookUpTable instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LookUpTable instance
             */
            public static create(properties?: message.vision.ILookUpTable): message.vision.LookUpTable;

            /**
             * Encodes the specified LookUpTable message. Does not implicitly {@link message.vision.LookUpTable.verify|verify} messages.
             * @param message LookUpTable message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.ILookUpTable, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LookUpTable message, length delimited. Does not implicitly {@link message.vision.LookUpTable.verify|verify} messages.
             * @param message LookUpTable message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.ILookUpTable, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LookUpTable message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LookUpTable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.LookUpTable;

            /**
             * Decodes a LookUpTable message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LookUpTable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.LookUpTable;

            /**
             * Verifies a LookUpTable message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LookUpTable message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LookUpTable
             */
            public static fromObject(object: { [k: string]: any }): message.vision.LookUpTable;

            /**
             * Creates a plain object from a LookUpTable message. Also converts values to other types if specified.
             * @param message LookUpTable
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.LookUpTable, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LookUpTable to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SaveLookUpTable. */
        interface ISaveLookUpTable {
        }

        /** Represents a SaveLookUpTable. */
        class SaveLookUpTable implements ISaveLookUpTable {

            /**
             * Constructs a new SaveLookUpTable.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.ISaveLookUpTable);

            /**
             * Creates a new SaveLookUpTable instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SaveLookUpTable instance
             */
            public static create(properties?: message.vision.ISaveLookUpTable): message.vision.SaveLookUpTable;

            /**
             * Encodes the specified SaveLookUpTable message. Does not implicitly {@link message.vision.SaveLookUpTable.verify|verify} messages.
             * @param message SaveLookUpTable message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.ISaveLookUpTable, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SaveLookUpTable message, length delimited. Does not implicitly {@link message.vision.SaveLookUpTable.verify|verify} messages.
             * @param message SaveLookUpTable message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.ISaveLookUpTable, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SaveLookUpTable message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SaveLookUpTable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.SaveLookUpTable;

            /**
             * Decodes a SaveLookUpTable message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SaveLookUpTable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.SaveLookUpTable;

            /**
             * Verifies a SaveLookUpTable message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SaveLookUpTable message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SaveLookUpTable
             */
            public static fromObject(object: { [k: string]: any }): message.vision.SaveLookUpTable;

            /**
             * Creates a plain object from a SaveLookUpTable message. Also converts values to other types if specified.
             * @param message SaveLookUpTable
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.SaveLookUpTable, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SaveLookUpTable to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a LookUpTableDiff. */
        interface ILookUpTableDiff {

            /** LookUpTableDiff diff */
            diff?: (message.vision.LookUpTableDiff.IDiff[]|null);
        }

        /** Represents a LookUpTableDiff. */
        class LookUpTableDiff implements ILookUpTableDiff {

            /**
             * Constructs a new LookUpTableDiff.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.ILookUpTableDiff);

            /** LookUpTableDiff diff. */
            public diff: message.vision.LookUpTableDiff.IDiff[];

            /**
             * Creates a new LookUpTableDiff instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LookUpTableDiff instance
             */
            public static create(properties?: message.vision.ILookUpTableDiff): message.vision.LookUpTableDiff;

            /**
             * Encodes the specified LookUpTableDiff message. Does not implicitly {@link message.vision.LookUpTableDiff.verify|verify} messages.
             * @param message LookUpTableDiff message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.ILookUpTableDiff, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LookUpTableDiff message, length delimited. Does not implicitly {@link message.vision.LookUpTableDiff.verify|verify} messages.
             * @param message LookUpTableDiff message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.ILookUpTableDiff, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LookUpTableDiff message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LookUpTableDiff
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.LookUpTableDiff;

            /**
             * Decodes a LookUpTableDiff message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LookUpTableDiff
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.LookUpTableDiff;

            /**
             * Verifies a LookUpTableDiff message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LookUpTableDiff message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LookUpTableDiff
             */
            public static fromObject(object: { [k: string]: any }): message.vision.LookUpTableDiff;

            /**
             * Creates a plain object from a LookUpTableDiff message. Also converts values to other types if specified.
             * @param message LookUpTableDiff
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.LookUpTableDiff, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LookUpTableDiff to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace LookUpTableDiff {

            /** Properties of a Diff. */
            interface IDiff {

                /** Diff lutIndex */
                lutIndex?: (number|null);

                /** Diff classification */
                classification?: (number|null);
            }

            /** Represents a Diff. */
            class Diff implements IDiff {

                /**
                 * Constructs a new Diff.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.LookUpTableDiff.IDiff);

                /** Diff lutIndex. */
                public lutIndex: number;

                /** Diff classification. */
                public classification: number;

                /**
                 * Creates a new Diff instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Diff instance
                 */
                public static create(properties?: message.vision.LookUpTableDiff.IDiff): message.vision.LookUpTableDiff.Diff;

                /**
                 * Encodes the specified Diff message. Does not implicitly {@link message.vision.LookUpTableDiff.Diff.verify|verify} messages.
                 * @param message Diff message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.LookUpTableDiff.IDiff, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Diff message, length delimited. Does not implicitly {@link message.vision.LookUpTableDiff.Diff.verify|verify} messages.
                 * @param message Diff message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.LookUpTableDiff.IDiff, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Diff message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Diff
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.LookUpTableDiff.Diff;

                /**
                 * Decodes a Diff message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Diff
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.LookUpTableDiff.Diff;

                /**
                 * Verifies a Diff message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Diff message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Diff
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.LookUpTableDiff.Diff;

                /**
                 * Creates a plain object from a Diff message. Also converts values to other types if specified.
                 * @param message Diff
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.LookUpTableDiff.Diff, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Diff to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a VisionObject. */
        interface IVisionObject {

            /** VisionObject timestamp */
            timestamp?: (google.protobuf.ITimestamp|null);

            /** VisionObject screenAngular */
            screenAngular?: (Ivec2|null);

            /** VisionObject angularSize */
            angularSize?: (Ivec2|null);

            /** VisionObject sensors */
            sensors?: (message.input.ISensors|null);

            /** VisionObject classifiedImage */
            classifiedImage?: (message.vision.IClassifiedImage|null);

            /** VisionObject cameraId */
            cameraId?: (number|null);
        }

        /** Represents a VisionObject. */
        class VisionObject implements IVisionObject {

            /**
             * Constructs a new VisionObject.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IVisionObject);

            /** VisionObject timestamp. */
            public timestamp?: (google.protobuf.ITimestamp|null);

            /** VisionObject screenAngular. */
            public screenAngular?: (Ivec2|null);

            /** VisionObject angularSize. */
            public angularSize?: (Ivec2|null);

            /** VisionObject sensors. */
            public sensors?: (message.input.ISensors|null);

            /** VisionObject classifiedImage. */
            public classifiedImage?: (message.vision.IClassifiedImage|null);

            /** VisionObject cameraId. */
            public cameraId: number;

            /**
             * Creates a new VisionObject instance using the specified properties.
             * @param [properties] Properties to set
             * @returns VisionObject instance
             */
            public static create(properties?: message.vision.IVisionObject): message.vision.VisionObject;

            /**
             * Encodes the specified VisionObject message. Does not implicitly {@link message.vision.VisionObject.verify|verify} messages.
             * @param message VisionObject message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IVisionObject, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified VisionObject message, length delimited. Does not implicitly {@link message.vision.VisionObject.verify|verify} messages.
             * @param message VisionObject message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IVisionObject, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a VisionObject message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns VisionObject
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.VisionObject;

            /**
             * Decodes a VisionObject message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns VisionObject
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.VisionObject;

            /**
             * Verifies a VisionObject message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a VisionObject message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns VisionObject
             */
            public static fromObject(object: { [k: string]: any }): message.vision.VisionObject;

            /**
             * Creates a plain object from a VisionObject message. Also converts values to other types if specified.
             * @param message VisionObject
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.VisionObject, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this VisionObject to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Ball. */
        interface IBall {

            /** Ball visObject */
            visObject?: (message.vision.IVisionObject|null);

            /** Ball measurements */
            measurements?: (message.vision.Ball.IMeasurement[]|null);

            /** Ball edgePoints */
            edgePoints?: (Ivec3[]|null);

            /** Ball cone */
            cone?: (message.ICone|null);
        }

        /** Represents a Ball. */
        class Ball implements IBall {

            /**
             * Constructs a new Ball.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IBall);

            /** Ball visObject. */
            public visObject?: (message.vision.IVisionObject|null);

            /** Ball measurements. */
            public measurements: message.vision.Ball.IMeasurement[];

            /** Ball edgePoints. */
            public edgePoints: Ivec3[];

            /** Ball cone. */
            public cone?: (message.ICone|null);

            /**
             * Creates a new Ball instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Ball instance
             */
            public static create(properties?: message.vision.IBall): message.vision.Ball;

            /**
             * Encodes the specified Ball message. Does not implicitly {@link message.vision.Ball.verify|verify} messages.
             * @param message Ball message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IBall, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Ball message, length delimited. Does not implicitly {@link message.vision.Ball.verify|verify} messages.
             * @param message Ball message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IBall, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Ball message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Ball
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Ball;

            /**
             * Decodes a Ball message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Ball
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Ball;

            /**
             * Verifies a Ball message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Ball message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Ball
             */
            public static fromObject(object: { [k: string]: any }): message.vision.Ball;

            /**
             * Creates a plain object from a Ball message. Also converts values to other types if specified.
             * @param message Ball
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.Ball, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Ball to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Ball {

            /** MeasurementType enum. */
            enum MeasurementType {
                REPROJECTION = 0,
                WIDTH_BASED = 1
            }

            /** Properties of a Measurement. */
            interface IMeasurement {

                /** Measurement type */
                type?: (message.vision.Ball.MeasurementType|null);

                /** Measurement rBCc */
                rBCc?: (Ivec3|null);

                /** Measurement covariance */
                covariance?: (Imat3|null);
            }

            /** Represents a Measurement. */
            class Measurement implements IMeasurement {

                /**
                 * Constructs a new Measurement.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.Ball.IMeasurement);

                /** Measurement type. */
                public type: message.vision.Ball.MeasurementType;

                /** Measurement rBCc. */
                public rBCc?: (Ivec3|null);

                /** Measurement covariance. */
                public covariance?: (Imat3|null);

                /**
                 * Creates a new Measurement instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Measurement instance
                 */
                public static create(properties?: message.vision.Ball.IMeasurement): message.vision.Ball.Measurement;

                /**
                 * Encodes the specified Measurement message. Does not implicitly {@link message.vision.Ball.Measurement.verify|verify} messages.
                 * @param message Measurement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.Ball.IMeasurement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Measurement message, length delimited. Does not implicitly {@link message.vision.Ball.Measurement.verify|verify} messages.
                 * @param message Measurement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.Ball.IMeasurement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Measurement message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Measurement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Ball.Measurement;

                /**
                 * Decodes a Measurement message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Measurement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Ball.Measurement;

                /**
                 * Verifies a Measurement message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Measurement message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Measurement
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.Ball.Measurement;

                /**
                 * Creates a plain object from a Measurement message. Also converts values to other types if specified.
                 * @param message Measurement
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.Ball.Measurement, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Measurement to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a Goal. */
        interface IGoal {

            /** Goal visObject */
            visObject?: (message.vision.IVisionObject|null);

            /** Goal side */
            side?: (message.vision.Goal.Side|null);

            /** Goal team */
            team?: (message.vision.Goal.Team|null);

            /** Goal frustum */
            frustum?: (message.IFrustum|null);

            /** Goal quad */
            quad?: (message.IQuad|null);

            /** Goal measurement */
            measurement?: (message.vision.Goal.IMeasurement[]|null);
        }

        /** Represents a Goal. */
        class Goal implements IGoal {

            /**
             * Constructs a new Goal.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IGoal);

            /** Goal visObject. */
            public visObject?: (message.vision.IVisionObject|null);

            /** Goal side. */
            public side: message.vision.Goal.Side;

            /** Goal team. */
            public team: message.vision.Goal.Team;

            /** Goal frustum. */
            public frustum?: (message.IFrustum|null);

            /** Goal quad. */
            public quad?: (message.IQuad|null);

            /** Goal measurement. */
            public measurement: message.vision.Goal.IMeasurement[];

            /**
             * Creates a new Goal instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Goal instance
             */
            public static create(properties?: message.vision.IGoal): message.vision.Goal;

            /**
             * Encodes the specified Goal message. Does not implicitly {@link message.vision.Goal.verify|verify} messages.
             * @param message Goal message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IGoal, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Goal message, length delimited. Does not implicitly {@link message.vision.Goal.verify|verify} messages.
             * @param message Goal message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IGoal, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Goal message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Goal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Goal;

            /**
             * Decodes a Goal message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Goal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Goal;

            /**
             * Verifies a Goal message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Goal message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Goal
             */
            public static fromObject(object: { [k: string]: any }): message.vision.Goal;

            /**
             * Creates a plain object from a Goal message. Also converts values to other types if specified.
             * @param message Goal
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.Goal, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Goal to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Goal {

            /** Side enum. */
            enum Side {
                UNKNOWN_SIDE = 0,
                LEFT = 1,
                RIGHT = 2
            }

            /** Team enum. */
            enum Team {
                UNKNOWN_TEAM = 0,
                OWN = 1,
                OPPONENT = 2
            }

            /** MeasurementType enum. */
            enum MeasurementType {
                UNKNOWN_MEASUREMENT = 0,
                LEFT_NORMAL = 1,
                RIGHT_NORMAL = 2,
                TOP_NORMAL = 3,
                BASE_NORMAL = 4,
                CENTRE = 5
            }

            /** Properties of a Measurement. */
            interface IMeasurement {

                /** Measurement type */
                type?: (message.vision.Goal.MeasurementType|null);

                /** Measurement position */
                position?: (Ivec3|null);

                /** Measurement covariance */
                covariance?: (Imat3|null);

                /** Measurement normalAngles */
                normalAngles?: (Ivec2|null);

                /** Measurement normAngCov */
                normAngCov?: (Imat2|null);
            }

            /** Represents a Measurement. */
            class Measurement implements IMeasurement {

                /**
                 * Constructs a new Measurement.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.Goal.IMeasurement);

                /** Measurement type. */
                public type: message.vision.Goal.MeasurementType;

                /** Measurement position. */
                public position?: (Ivec3|null);

                /** Measurement covariance. */
                public covariance?: (Imat3|null);

                /** Measurement normalAngles. */
                public normalAngles?: (Ivec2|null);

                /** Measurement normAngCov. */
                public normAngCov?: (Imat2|null);

                /**
                 * Creates a new Measurement instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Measurement instance
                 */
                public static create(properties?: message.vision.Goal.IMeasurement): message.vision.Goal.Measurement;

                /**
                 * Encodes the specified Measurement message. Does not implicitly {@link message.vision.Goal.Measurement.verify|verify} messages.
                 * @param message Measurement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.Goal.IMeasurement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Measurement message, length delimited. Does not implicitly {@link message.vision.Goal.Measurement.verify|verify} messages.
                 * @param message Measurement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.Goal.IMeasurement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Measurement message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Measurement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Goal.Measurement;

                /**
                 * Decodes a Measurement message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Measurement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Goal.Measurement;

                /**
                 * Verifies a Measurement message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Measurement message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Measurement
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.Goal.Measurement;

                /**
                 * Creates a plain object from a Measurement message. Also converts values to other types if specified.
                 * @param message Measurement
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.Goal.Measurement, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Measurement to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an Obstacle. */
        interface IObstacle {

            /** Obstacle visObject */
            visObject?: (message.vision.IVisionObject|null);

            /** Obstacle shape */
            shape?: (message.IPolygon|null);

            /** Obstacle team */
            team?: (message.vision.Obstacle.Team|null);
        }

        /** Represents an Obstacle. */
        class Obstacle implements IObstacle {

            /**
             * Constructs a new Obstacle.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IObstacle);

            /** Obstacle visObject. */
            public visObject?: (message.vision.IVisionObject|null);

            /** Obstacle shape. */
            public shape?: (message.IPolygon|null);

            /** Obstacle team. */
            public team: message.vision.Obstacle.Team;

            /**
             * Creates a new Obstacle instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Obstacle instance
             */
            public static create(properties?: message.vision.IObstacle): message.vision.Obstacle;

            /**
             * Encodes the specified Obstacle message. Does not implicitly {@link message.vision.Obstacle.verify|verify} messages.
             * @param message Obstacle message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IObstacle, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Obstacle message, length delimited. Does not implicitly {@link message.vision.Obstacle.verify|verify} messages.
             * @param message Obstacle message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IObstacle, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Obstacle message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Obstacle
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Obstacle;

            /**
             * Decodes an Obstacle message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Obstacle
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Obstacle;

            /**
             * Verifies an Obstacle message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Obstacle message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Obstacle
             */
            public static fromObject(object: { [k: string]: any }): message.vision.Obstacle;

            /**
             * Creates a plain object from an Obstacle message. Also converts values to other types if specified.
             * @param message Obstacle
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.Obstacle, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Obstacle to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Obstacle {

            /** Team enum. */
            enum Team {
                UNKNOWN_TEAM = 0,
                MAGENTA = 1,
                CYAN = 2
            }
        }

        /** Properties of a Line. */
        interface ILine {

            /** Line visObject */
            visObject?: (message.vision.IVisionObject|null);

            /** Line start */
            start?: (Iivec2|null);

            /** Line end */
            end?: (Iivec2|null);

            /** Line colour */
            colour?: (Ivec4|null);
        }

        /** Represents a Line. */
        class Line implements ILine {

            /**
             * Constructs a new Line.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.ILine);

            /** Line visObject. */
            public visObject?: (message.vision.IVisionObject|null);

            /** Line start. */
            public start?: (Iivec2|null);

            /** Line end. */
            public end?: (Iivec2|null);

            /** Line colour. */
            public colour?: (Ivec4|null);

            /**
             * Creates a new Line instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Line instance
             */
            public static create(properties?: message.vision.ILine): message.vision.Line;

            /**
             * Encodes the specified Line message. Does not implicitly {@link message.vision.Line.verify|verify} messages.
             * @param message Line message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.ILine, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Line message, length delimited. Does not implicitly {@link message.vision.Line.verify|verify} messages.
             * @param message Line message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.ILine, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Line message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Line
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.Line;

            /**
             * Decodes a Line message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Line
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.Line;

            /**
             * Verifies a Line message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Line message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Line
             */
            public static fromObject(object: { [k: string]: any }): message.vision.Line;

            /**
             * Creates a plain object from a Line message. Also converts values to other types if specified.
             * @param message Line
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.Line, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Line to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NUsightBalls. */
        interface INUsightBalls {

            /** NUsightBalls balls */
            balls?: (message.vision.IBall[]|null);
        }

        /** Represents a NUsightBalls. */
        class NUsightBalls implements INUsightBalls {

            /**
             * Constructs a new NUsightBalls.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.INUsightBalls);

            /** NUsightBalls balls. */
            public balls: message.vision.IBall[];

            /**
             * Creates a new NUsightBalls instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NUsightBalls instance
             */
            public static create(properties?: message.vision.INUsightBalls): message.vision.NUsightBalls;

            /**
             * Encodes the specified NUsightBalls message. Does not implicitly {@link message.vision.NUsightBalls.verify|verify} messages.
             * @param message NUsightBalls message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.INUsightBalls, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NUsightBalls message, length delimited. Does not implicitly {@link message.vision.NUsightBalls.verify|verify} messages.
             * @param message NUsightBalls message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.INUsightBalls, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NUsightBalls message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NUsightBalls
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.NUsightBalls;

            /**
             * Decodes a NUsightBalls message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NUsightBalls
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.NUsightBalls;

            /**
             * Verifies a NUsightBalls message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NUsightBalls message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NUsightBalls
             */
            public static fromObject(object: { [k: string]: any }): message.vision.NUsightBalls;

            /**
             * Creates a plain object from a NUsightBalls message. Also converts values to other types if specified.
             * @param message NUsightBalls
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.NUsightBalls, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NUsightBalls to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NUsightGoals. */
        interface INUsightGoals {

            /** NUsightGoals goals */
            goals?: (message.vision.IGoal[]|null);
        }

        /** Represents a NUsightGoals. */
        class NUsightGoals implements INUsightGoals {

            /**
             * Constructs a new NUsightGoals.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.INUsightGoals);

            /** NUsightGoals goals. */
            public goals: message.vision.IGoal[];

            /**
             * Creates a new NUsightGoals instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NUsightGoals instance
             */
            public static create(properties?: message.vision.INUsightGoals): message.vision.NUsightGoals;

            /**
             * Encodes the specified NUsightGoals message. Does not implicitly {@link message.vision.NUsightGoals.verify|verify} messages.
             * @param message NUsightGoals message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.INUsightGoals, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NUsightGoals message, length delimited. Does not implicitly {@link message.vision.NUsightGoals.verify|verify} messages.
             * @param message NUsightGoals message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.INUsightGoals, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NUsightGoals message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NUsightGoals
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.NUsightGoals;

            /**
             * Decodes a NUsightGoals message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NUsightGoals
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.NUsightGoals;

            /**
             * Verifies a NUsightGoals message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NUsightGoals message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NUsightGoals
             */
            public static fromObject(object: { [k: string]: any }): message.vision.NUsightGoals;

            /**
             * Creates a plain object from a NUsightGoals message. Also converts values to other types if specified.
             * @param message NUsightGoals
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.NUsightGoals, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NUsightGoals to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NUsightObstacles. */
        interface INUsightObstacles {

            /** NUsightObstacles obstacles */
            obstacles?: (message.vision.IObstacle[]|null);
        }

        /** Represents a NUsightObstacles. */
        class NUsightObstacles implements INUsightObstacles {

            /**
             * Constructs a new NUsightObstacles.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.INUsightObstacles);

            /** NUsightObstacles obstacles. */
            public obstacles: message.vision.IObstacle[];

            /**
             * Creates a new NUsightObstacles instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NUsightObstacles instance
             */
            public static create(properties?: message.vision.INUsightObstacles): message.vision.NUsightObstacles;

            /**
             * Encodes the specified NUsightObstacles message. Does not implicitly {@link message.vision.NUsightObstacles.verify|verify} messages.
             * @param message NUsightObstacles message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.INUsightObstacles, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NUsightObstacles message, length delimited. Does not implicitly {@link message.vision.NUsightObstacles.verify|verify} messages.
             * @param message NUsightObstacles message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.INUsightObstacles, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NUsightObstacles message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NUsightObstacles
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.NUsightObstacles;

            /**
             * Decodes a NUsightObstacles message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NUsightObstacles
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.NUsightObstacles;

            /**
             * Verifies a NUsightObstacles message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NUsightObstacles message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NUsightObstacles
             */
            public static fromObject(object: { [k: string]: any }): message.vision.NUsightObstacles;

            /**
             * Creates a plain object from a NUsightObstacles message. Also converts values to other types if specified.
             * @param message NUsightObstacles
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.NUsightObstacles, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NUsightObstacles to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NUsightLines. */
        interface INUsightLines {

            /** NUsightLines lines */
            lines?: (message.vision.ILine[]|null);
        }

        /** Represents a NUsightLines. */
        class NUsightLines implements INUsightLines {

            /**
             * Constructs a new NUsightLines.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.INUsightLines);

            /** NUsightLines lines. */
            public lines: message.vision.ILine[];

            /**
             * Creates a new NUsightLines instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NUsightLines instance
             */
            public static create(properties?: message.vision.INUsightLines): message.vision.NUsightLines;

            /**
             * Encodes the specified NUsightLines message. Does not implicitly {@link message.vision.NUsightLines.verify|verify} messages.
             * @param message NUsightLines message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.INUsightLines, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NUsightLines message, length delimited. Does not implicitly {@link message.vision.NUsightLines.verify|verify} messages.
             * @param message NUsightLines message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.INUsightLines, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NUsightLines message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NUsightLines
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.NUsightLines;

            /**
             * Decodes a NUsightLines message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NUsightLines
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.NUsightLines;

            /**
             * Verifies a NUsightLines message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NUsightLines message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NUsightLines
             */
            public static fromObject(object: { [k: string]: any }): message.vision.NUsightLines;

            /**
             * Creates a plain object from a NUsightLines message. Also converts values to other types if specified.
             * @param message NUsightLines
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.NUsightLines, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NUsightLines to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a VisualMesh. */
        interface IVisualMesh {

            /** VisualMesh cameraId */
            cameraId?: (number|null);

            /** VisualMesh mesh */
            mesh?: (message.vision.VisualMesh.IRow[]|null);

            /** VisualMesh indices */
            indices?: (number[]|null);

            /** VisualMesh neighbourhood */
            neighbourhood?: (Iivec6[]|null);

            /** VisualMesh coordinates */
            coordinates?: (Iivec2[]|null);

            /** VisualMesh classifications */
            classifications?: (message.vision.VisualMesh.IClassification[]|null);
        }

        /** Represents a VisualMesh. */
        class VisualMesh implements IVisualMesh {

            /**
             * Constructs a new VisualMesh.
             * @param [properties] Properties to set
             */
            constructor(properties?: message.vision.IVisualMesh);

            /** VisualMesh cameraId. */
            public cameraId: number;

            /** VisualMesh mesh. */
            public mesh: message.vision.VisualMesh.IRow[];

            /** VisualMesh indices. */
            public indices: number[];

            /** VisualMesh neighbourhood. */
            public neighbourhood: Iivec6[];

            /** VisualMesh coordinates. */
            public coordinates: Iivec2[];

            /** VisualMesh classifications. */
            public classifications: message.vision.VisualMesh.IClassification[];

            /**
             * Creates a new VisualMesh instance using the specified properties.
             * @param [properties] Properties to set
             * @returns VisualMesh instance
             */
            public static create(properties?: message.vision.IVisualMesh): message.vision.VisualMesh;

            /**
             * Encodes the specified VisualMesh message. Does not implicitly {@link message.vision.VisualMesh.verify|verify} messages.
             * @param message VisualMesh message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: message.vision.IVisualMesh, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified VisualMesh message, length delimited. Does not implicitly {@link message.vision.VisualMesh.verify|verify} messages.
             * @param message VisualMesh message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: message.vision.IVisualMesh, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a VisualMesh message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns VisualMesh
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.VisualMesh;

            /**
             * Decodes a VisualMesh message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns VisualMesh
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.VisualMesh;

            /**
             * Verifies a VisualMesh message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a VisualMesh message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns VisualMesh
             */
            public static fromObject(object: { [k: string]: any }): message.vision.VisualMesh;

            /**
             * Creates a plain object from a VisualMesh message. Also converts values to other types if specified.
             * @param message VisualMesh
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: message.vision.VisualMesh, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this VisualMesh to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace VisualMesh {

            /** Properties of a Row. */
            interface IRow {

                /** Row phi */
                phi?: (number|null);

                /** Row segments */
                segments?: (number|null);
            }

            /** Represents a Row. */
            class Row implements IRow {

                /**
                 * Constructs a new Row.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.VisualMesh.IRow);

                /** Row phi. */
                public phi: number;

                /** Row segments. */
                public segments: number;

                /**
                 * Creates a new Row instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Row instance
                 */
                public static create(properties?: message.vision.VisualMesh.IRow): message.vision.VisualMesh.Row;

                /**
                 * Encodes the specified Row message. Does not implicitly {@link message.vision.VisualMesh.Row.verify|verify} messages.
                 * @param message Row message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.VisualMesh.IRow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Row message, length delimited. Does not implicitly {@link message.vision.VisualMesh.Row.verify|verify} messages.
                 * @param message Row message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.VisualMesh.IRow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Row message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.VisualMesh.Row;

                /**
                 * Decodes a Row message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Row
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.VisualMesh.Row;

                /**
                 * Verifies a Row message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Row message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Row
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.VisualMesh.Row;

                /**
                 * Creates a plain object from a Row message. Also converts values to other types if specified.
                 * @param message Row
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.VisualMesh.Row, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Row to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Classification. */
            interface IClassification {

                /** Classification dimensions */
                dimensions?: (number|null);

                /** Classification values */
                values?: (number[]|null);
            }

            /** Represents a Classification. */
            class Classification implements IClassification {

                /**
                 * Constructs a new Classification.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: message.vision.VisualMesh.IClassification);

                /** Classification dimensions. */
                public dimensions: number;

                /** Classification values. */
                public values: number[];

                /**
                 * Creates a new Classification instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Classification instance
                 */
                public static create(properties?: message.vision.VisualMesh.IClassification): message.vision.VisualMesh.Classification;

                /**
                 * Encodes the specified Classification message. Does not implicitly {@link message.vision.VisualMesh.Classification.verify|verify} messages.
                 * @param message Classification message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: message.vision.VisualMesh.IClassification, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Classification message, length delimited. Does not implicitly {@link message.vision.VisualMesh.Classification.verify|verify} messages.
                 * @param message Classification message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: message.vision.VisualMesh.IClassification, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Classification message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Classification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): message.vision.VisualMesh.Classification;

                /**
                 * Decodes a Classification message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Classification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): message.vision.VisualMesh.Classification;

                /**
                 * Verifies a Classification message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Classification message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Classification
                 */
                public static fromObject(object: { [k: string]: any }): message.vision.VisualMesh.Classification;

                /**
                 * Creates a plain object from a Classification message. Also converts values to other types if specified.
                 * @param message Classification
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: message.vision.VisualMesh.Classification, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Classification to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }
}

/** PointerType enum. */
export enum PointerType {
    NONE = 0,
    RAW = 1,
    SHARED = 2,
    UNIQUE = 3
}
