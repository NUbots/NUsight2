
/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */
syntax = "proto3";

package message.vision;

import "google/protobuf/timestamp.proto";
import "Neutron.proto";
import "Vector.proto";
import "message/Geometry.proto";
import "message/input/Sensors.proto";
import "message/vision/ClassifiedImage.proto";
import "Matrix.proto";

message VisionObject {
    // Time the image was taken
    google.protobuf.Timestamp timestamp       = 1;

    // The angular position and size from the perspective of the camera
    // Use these values to move the camera around to see this object
    vec2                      screenAngular   = 2;
    vec2                      angularSize     = 3;

    // The sensor frame that was used to detect this object
    input.Sensors       sensors         = 4 [(pointer) = SHARED];

    // The classified image that was used to detect this object
    // TODO: Why is this here?
    ClassifiedImage           classifiedImage = 5 [(pointer) = SHARED];

    // The camera which saw the object.
    uint32                    camera_id       = 6;
}

message Ball {
    enum MeasurementType {
        REPROJECTION = 0;
        WIDTH_BASED  = 1;
    }

    message Measurement {
        MeasurementType type        = 1;
        //Vector from camera to ball in camera coordinates
        vec3            rBCc        = 2;
        mat33           covariance  = 3;
    }

    VisionObject  visObject             = 1;
    repeated Measurement measurements   = 2;
    repeated vec3 edgePoints            = 3;
    Cone        cone                    = 4;
}

message Goal {
    enum Side {
        UNKNOWN_SIDE = 0;
        LEFT         = 1;
        RIGHT        = 2;
    }

    enum Team {
        UNKNOWN_TEAM = 0;
        OWN          = 1;
        OPPONENT     = 2;
    }

    enum MeasurementType {
        UNKNOWN_MEASUREMENT = 0;
        LEFT_NORMAL         = 1;
        RIGHT_NORMAL        = 2;
        TOP_NORMAL          = 3;
        BASE_NORMAL         = 4;
        CENTRE              = 5;
    }

    message Measurement {
        MeasurementType type       = 1;
        // Normal vectors point inwards towards the centre of the object
        vec3            position   = 2;
        mat33           covariance   = 3;
        // Normal vectors expressed in angles (first angle is around z axis, second is elevation)
        vec2            normalAngles = 4;
        mat22           normAngCov   = 5;
    }

    VisionObject         visObject   = 1;
    Side                 side        = 2;
    Team                 team        = 3;
    Frustum              frustum     = 4;
    Quad                 quad        = 5;
    repeated Measurement measurement = 6;
}

message Obstacle {
    enum Team {
        UNKNOWN_TEAM = 0;
        MAGENTA      = 1;
        CYAN         = 2;
    }

    VisionObject visObject = 1;
    Polygon      shape     = 2;
    Team         team      = 3;
}

message Line {
    VisionObject visObject = 1;
    ivec2        start     = 2;
    ivec2        end       = 3;
    vec4         colour    = 4;
}

message NUsightBalls {
    repeated Ball balls = 1;
}

message NUsightGoals {
    repeated Goal goals = 1;
}

message NUsightObstacles {
    repeated Obstacle obstacles = 1;
}

message NUsightLines {
    repeated Line lines = 1;
}
